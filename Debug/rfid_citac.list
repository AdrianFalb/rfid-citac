
rfid_citac.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e08  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d4  08005f98  08005f98  00015f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800636c  0800636c  000200a0  2**0
                  CONTENTS
  4 .ARM          00000000  0800636c  0800636c  000200a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800636c  0800636c  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800636c  0800636c  0001636c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006370  08006370  00016370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08006374  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a0  2**0
                  CONTENTS
 10 .bss          000003b8  200000a0  200000a0  000200a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000458  20000458  000200a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000d15f  00000000  00000000  00020113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000024d7  00000000  00000000  0002d272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000af8  00000000  00000000  0002f750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000850  00000000  00000000  00030248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001d655  00000000  00000000  00030a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001011a  00000000  00000000  0004e0ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a621d  00000000  00000000  0005e207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000036e0  00000000  00000000  00104424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  00107b04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a0 	.word	0x200000a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005f80 	.word	0x08005f80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a4 	.word	0x200000a4
 80001cc:	08005f80 	.word	0x08005f80

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	2200      	movs	r2, #0
 800027a:	601a      	str	r2, [r3, #0]
 800027c:	605a      	str	r2, [r3, #4]
 800027e:	609a      	str	r2, [r3, #8]
 8000280:	60da      	str	r2, [r3, #12]
 8000282:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000284:	4b12      	ldr	r3, [pc, #72]	; (80002d0 <MX_GPIO_Init+0x60>)
 8000286:	695b      	ldr	r3, [r3, #20]
 8000288:	4a11      	ldr	r2, [pc, #68]	; (80002d0 <MX_GPIO_Init+0x60>)
 800028a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800028e:	6153      	str	r3, [r2, #20]
 8000290:	4b0f      	ldr	r3, [pc, #60]	; (80002d0 <MX_GPIO_Init+0x60>)
 8000292:	695b      	ldr	r3, [r3, #20]
 8000294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000298:	603b      	str	r3, [r7, #0]
 800029a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MFRC522_CS_GPIO_Port, MFRC522_CS_Pin, GPIO_PIN_SET);
 800029c:	2201      	movs	r2, #1
 800029e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002a6:	f000 ff99 	bl	80011dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFRC522_CS_Pin;
 80002aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002b0:	2301      	movs	r3, #1
 80002b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b4:	2300      	movs	r3, #0
 80002b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002b8:	2300      	movs	r3, #0
 80002ba:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(MFRC522_CS_GPIO_Port, &GPIO_InitStruct);
 80002bc:	1d3b      	adds	r3, r7, #4
 80002be:	4619      	mov	r1, r3
 80002c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002c4:	f000 fe18 	bl	8000ef8 <HAL_GPIO_Init>

}
 80002c8:	bf00      	nop
 80002ca:	3718      	adds	r7, #24
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	40021000 	.word	0x40021000

080002d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b090      	sub	sp, #64	; 0x40
 80002d8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002da:	f000 fc9d 	bl	8000c18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002de:	f000 f8b9 	bl	8000454 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e2:	f7ff ffc5 	bl	8000270 <MX_GPIO_Init>
  MX_SPI1_Init();
 80002e6:	f000 fa55 	bl	8000794 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80002ea:	f000 fbf9 	bl	8000ae0 <MX_USART2_UART_Init>
  MX_RTC_Init();
 80002ee:	f000 f9d1 	bl	8000694 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_RTC_GetTime(&hrtc, &curTime, RTC_FORMAT_BCD);  // Replace rtclock.breakTime(rtclock.now(), &curTime);
 80002f2:	2201      	movs	r2, #1
 80002f4:	4950      	ldr	r1, [pc, #320]	; (8000438 <main+0x164>)
 80002f6:	4851      	ldr	r0, [pc, #324]	; (800043c <main+0x168>)
 80002f8:	f002 fc3f 	bl	8002b7a <HAL_RTC_GetTime>
  RTC_DateTypeDef sDate;
  RTC_TimeTypeDef sTime;
  sDate.Year = 0x23; // Set the year (e.g., 2023 - 2000)
 80002fc:	2323      	movs	r3, #35	; 0x23
 80002fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  sDate.Month = RTC_MONTH_JANUARY;
 8000302:	2301      	movs	r3, #1
 8000304:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8000308:	2301      	movs	r3, #1
 800030a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sTime.Hours = 0x12;
 800030e:	2312      	movs	r3, #18
 8000310:	753b      	strb	r3, [r7, #20]
  sTime.Minutes = 0x00;
 8000312:	2300      	movs	r3, #0
 8000314:	757b      	strb	r3, [r7, #21]
  sTime.Seconds = 0x00;
 8000316:	2300      	movs	r3, #0
 8000318:	75bb      	strb	r3, [r7, #22]
  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 800031a:	f107 0314 	add.w	r3, r7, #20
 800031e:	2201      	movs	r2, #1
 8000320:	4619      	mov	r1, r3
 8000322:	4846      	ldr	r0, [pc, #280]	; (800043c <main+0x168>)
 8000324:	f002 fc29 	bl	8002b7a <HAL_RTC_GetTime>
  if (sDate.Year + 2000 < 2019)
 8000328:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800032c:	2b12      	cmp	r3, #18
 800032e:	d807      	bhi.n	8000340 <main+0x6c>
  {
      setBuildTime(&sDate, &sTime);
 8000330:	f107 0214 	add.w	r2, r7, #20
 8000334:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000338:	4611      	mov	r1, r2
 800033a:	4618      	mov	r0, r3
 800033c:	f000 f8e0 	bl	8000500 <setBuildTime>
  }

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000340:	f107 0314 	add.w	r3, r7, #20
 8000344:	2201      	movs	r2, #1
 8000346:	4619      	mov	r1, r3
 8000348:	483c      	ldr	r0, [pc, #240]	; (800043c <main+0x168>)
 800034a:	f002 fb7c 	bl	8002a46 <HAL_RTC_SetTime>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <main+0x84>
  {
    Error_Handler();
 8000354:	f000 f998 	bl	8000688 <Error_Handler>
  }

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000358:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800035c:	2201      	movs	r2, #1
 800035e:	4619      	mov	r1, r3
 8000360:	4836      	ldr	r0, [pc, #216]	; (800043c <main+0x168>)
 8000362:	f002 fc68 	bl	8002c36 <HAL_RTC_SetDate>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <main+0x9c>
  {
    Error_Handler();
 800036c:	f000 f98c 	bl	8000688 <Error_Handler>
  }
  // Initialize MFRC522 and read the version
  uint8_t status;
  uint8_t card_buffer[MAX_LEN+1];

  MFRC522_PCD_Init();
 8000370:	f004 f995 	bl	800469e <MFRC522_PCD_Init>
  HAL_Delay(10);
 8000374:	200a      	movs	r0, #10
 8000376:	f000 fcb5 	bl	8000ce4 <HAL_Delay>

  MFRC522_PCD_GetVersion(version_buffer, sizeof(version_buffer));
 800037a:	2180      	movs	r1, #128	; 0x80
 800037c:	4830      	ldr	r0, [pc, #192]	; (8000440 <main+0x16c>)
 800037e:	f004 faf7 	bl	8004970 <MFRC522_PCD_GetVersion>

  memset(message_buffer, 0, sizeof(message_buffer));
 8000382:	2280      	movs	r2, #128	; 0x80
 8000384:	2100      	movs	r1, #0
 8000386:	482f      	ldr	r0, [pc, #188]	; (8000444 <main+0x170>)
 8000388:	f004 fd31 	bl	8004dee <memset>
  snprintf(message_buffer, sizeof(message_buffer), version_buffer);
 800038c:	4a2c      	ldr	r2, [pc, #176]	; (8000440 <main+0x16c>)
 800038e:	2180      	movs	r1, #128	; 0x80
 8000390:	482c      	ldr	r0, [pc, #176]	; (8000444 <main+0x170>)
 8000392:	f004 fcb5 	bl	8004d00 <sniprintf>
  HAL_UART_Transmit(&huart2, (uint8_t *)message_buffer, sizeof(message_buffer), 250);
 8000396:	23fa      	movs	r3, #250	; 0xfa
 8000398:	2280      	movs	r2, #128	; 0x80
 800039a:	492a      	ldr	r1, [pc, #168]	; (8000444 <main+0x170>)
 800039c:	482a      	ldr	r0, [pc, #168]	; (8000448 <main+0x174>)
 800039e:	f003 fd09 	bl	8003db4 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  status = STATUS_ERROR;
 80003a2:	2301      	movs	r3, #1
 80003a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  status = MFRC522_PICC_RequestA(PICC_CMD_REQA, card_buffer);
 80003a8:	463b      	mov	r3, r7
 80003aa:	4619      	mov	r1, r3
 80003ac:	2026      	movs	r0, #38	; 0x26
 80003ae:	f004 f9ef 	bl	8004790 <MFRC522_PICC_RequestA>
 80003b2:	4603      	mov	r3, r0
 80003b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	  if (status == STATUS_OK)
 80003b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d1f0      	bne.n	80003a2 <main+0xce>
	  {
		  memset(message_buffer, 0, sizeof(message_buffer));
 80003c0:	2280      	movs	r2, #128	; 0x80
 80003c2:	2100      	movs	r1, #0
 80003c4:	481f      	ldr	r0, [pc, #124]	; (8000444 <main+0x170>)
 80003c6:	f004 fd12 	bl	8004dee <memset>
		  snprintf(message_buffer, sizeof(message_buffer), "\n\r%X,%X,%X", card_buffer[0], card_buffer[1], card_buffer[2]);
 80003ca:	783b      	ldrb	r3, [r7, #0]
 80003cc:	4619      	mov	r1, r3
 80003ce:	787b      	ldrb	r3, [r7, #1]
 80003d0:	78ba      	ldrb	r2, [r7, #2]
 80003d2:	9201      	str	r2, [sp, #4]
 80003d4:	9300      	str	r3, [sp, #0]
 80003d6:	460b      	mov	r3, r1
 80003d8:	4a1c      	ldr	r2, [pc, #112]	; (800044c <main+0x178>)
 80003da:	2180      	movs	r1, #128	; 0x80
 80003dc:	4819      	ldr	r0, [pc, #100]	; (8000444 <main+0x170>)
 80003de:	f004 fc8f 	bl	8004d00 <sniprintf>

		  HAL_UART_Transmit(&huart2, (uint8_t *)message_buffer, sizeof(message_buffer), 250);
 80003e2:	23fa      	movs	r3, #250	; 0xfa
 80003e4:	2280      	movs	r2, #128	; 0x80
 80003e6:	4917      	ldr	r1, [pc, #92]	; (8000444 <main+0x170>)
 80003e8:	4817      	ldr	r0, [pc, #92]	; (8000448 <main+0x174>)
 80003ea:	f003 fce3 	bl	8003db4 <HAL_UART_Transmit>
		  //HAL_Delay(1);

		  status = MFRC522_PICC_Anticollision(card_buffer);
 80003ee:	463b      	mov	r3, r7
 80003f0:	4618      	mov	r0, r3
 80003f2:	f004 f990 	bl	8004716 <MFRC522_PICC_Anticollision>
 80003f6:	4603      	mov	r3, r0
 80003f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		  if (status == STATUS_OK)
 80003fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000400:	2b00      	cmp	r3, #0
 8000402:	d1ce      	bne.n	80003a2 <main+0xce>
		  {
			  memset(message_buffer, 0, sizeof(message_buffer));
 8000404:	2280      	movs	r2, #128	; 0x80
 8000406:	2100      	movs	r1, #0
 8000408:	480e      	ldr	r0, [pc, #56]	; (8000444 <main+0x170>)
 800040a:	f004 fcf0 	bl	8004dee <memset>
			  snprintf(message_buffer, sizeof(message_buffer), "\n\rUID: %X %X %X %X", card_buffer[0], card_buffer[1], card_buffer[2], card_buffer[3]);
 800040e:	783b      	ldrb	r3, [r7, #0]
 8000410:	4618      	mov	r0, r3
 8000412:	787b      	ldrb	r3, [r7, #1]
 8000414:	78ba      	ldrb	r2, [r7, #2]
 8000416:	78f9      	ldrb	r1, [r7, #3]
 8000418:	9102      	str	r1, [sp, #8]
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	9300      	str	r3, [sp, #0]
 800041e:	4603      	mov	r3, r0
 8000420:	4a0b      	ldr	r2, [pc, #44]	; (8000450 <main+0x17c>)
 8000422:	2180      	movs	r1, #128	; 0x80
 8000424:	4807      	ldr	r0, [pc, #28]	; (8000444 <main+0x170>)
 8000426:	f004 fc6b 	bl	8004d00 <sniprintf>

			  HAL_UART_Transmit(&huart2, (uint8_t *)message_buffer, sizeof(message_buffer), 250);
 800042a:	23fa      	movs	r3, #250	; 0xfa
 800042c:	2280      	movs	r2, #128	; 0x80
 800042e:	4905      	ldr	r1, [pc, #20]	; (8000444 <main+0x170>)
 8000430:	4805      	ldr	r0, [pc, #20]	; (8000448 <main+0x174>)
 8000432:	f003 fcbf 	bl	8003db4 <HAL_UART_Transmit>
	  status = STATUS_ERROR;
 8000436:	e7b4      	b.n	80003a2 <main+0xce>
 8000438:	200001bc 	.word	0x200001bc
 800043c:	200001f8 	.word	0x200001f8
 8000440:	200000bc 	.word	0x200000bc
 8000444:	2000013c 	.word	0x2000013c
 8000448:	20000280 	.word	0x20000280
 800044c:	08005fd0 	.word	0x08005fd0
 8000450:	08005fdc 	.word	0x08005fdc

08000454 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b096      	sub	sp, #88	; 0x58
 8000458:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800045a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800045e:	2228      	movs	r2, #40	; 0x28
 8000460:	2100      	movs	r1, #0
 8000462:	4618      	mov	r0, r3
 8000464:	f004 fcc3 	bl	8004dee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000468:	f107 031c 	add.w	r3, r7, #28
 800046c:	2200      	movs	r2, #0
 800046e:	601a      	str	r2, [r3, #0]
 8000470:	605a      	str	r2, [r3, #4]
 8000472:	609a      	str	r2, [r3, #8]
 8000474:	60da      	str	r2, [r3, #12]
 8000476:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000478:	1d3b      	adds	r3, r7, #4
 800047a:	2200      	movs	r2, #0
 800047c:	601a      	str	r2, [r3, #0]
 800047e:	605a      	str	r2, [r3, #4]
 8000480:	609a      	str	r2, [r3, #8]
 8000482:	60da      	str	r2, [r3, #12]
 8000484:	611a      	str	r2, [r3, #16]
 8000486:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000488:	230a      	movs	r3, #10
 800048a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800048c:	2301      	movs	r3, #1
 800048e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000490:	2310      	movs	r3, #16
 8000492:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000494:	2301      	movs	r3, #1
 8000496:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000498:	2300      	movs	r3, #0
 800049a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800049c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004a0:	4618      	mov	r0, r3
 80004a2:	f000 feb3 	bl	800120c <HAL_RCC_OscConfig>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80004ac:	f000 f8ec 	bl	8000688 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b0:	230f      	movs	r3, #15
 80004b2:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004b4:	2300      	movs	r3, #0
 80004b6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004b8:	2300      	movs	r3, #0
 80004ba:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004bc:	2300      	movs	r3, #0
 80004be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004c0:	2300      	movs	r3, #0
 80004c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004c4:	f107 031c 	add.w	r3, r7, #28
 80004c8:	2100      	movs	r1, #0
 80004ca:	4618      	mov	r0, r3
 80004cc:	f001 fedc 	bl	8002288 <HAL_RCC_ClockConfig>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <SystemClock_Config+0x86>
  {
    Error_Handler();
 80004d6:	f000 f8d7 	bl	8000688 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80004da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004de:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80004e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004e4:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004e6:	1d3b      	adds	r3, r7, #4
 80004e8:	4618      	mov	r0, r3
 80004ea:	f002 f903 	bl	80026f4 <HAL_RCCEx_PeriphCLKConfig>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80004f4:	f000 f8c8 	bl	8000688 <Error_Handler>
  }
}
 80004f8:	bf00      	nop
 80004fa:	3758      	adds	r7, #88	; 0x58
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}

08000500 <setBuildTime>:

/* USER CODE BEGIN 4 */


void setBuildTime(RTC_DateTypeDef *date, RTC_TimeTypeDef *time)
{
 8000500:	b5b0      	push	{r4, r5, r7, lr}
 8000502:	b08a      	sub	sp, #40	; 0x28
 8000504:	af06      	add	r7, sp, #24
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	6039      	str	r1, [r7, #0]
    // Timestamp format: "Mar 3 2019 12:34:56"
    snprintf(bld, 40, "%s %s\n", __DATE__, __TIME__);
 800050a:	4b47      	ldr	r3, [pc, #284]	; (8000628 <setBuildTime+0x128>)
 800050c:	9300      	str	r3, [sp, #0]
 800050e:	4b47      	ldr	r3, [pc, #284]	; (800062c <setBuildTime+0x12c>)
 8000510:	4a47      	ldr	r2, [pc, #284]	; (8000630 <setBuildTime+0x130>)
 8000512:	2128      	movs	r1, #40	; 0x28
 8000514:	4847      	ldr	r0, [pc, #284]	; (8000634 <setBuildTime+0x134>)
 8000516:	f004 fbf3 	bl	8004d00 <sniprintf>
    char *token = strtok(bld, delim);
 800051a:	4b47      	ldr	r3, [pc, #284]	; (8000638 <setBuildTime+0x138>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4619      	mov	r1, r3
 8000520:	4844      	ldr	r0, [pc, #272]	; (8000634 <setBuildTime+0x134>)
 8000522:	f004 fc7f 	bl	8004e24 <strtok>
 8000526:	60f8      	str	r0, [r7, #12]
    while (token)
 8000528:	e059      	b.n	80005de <setBuildTime+0xde>
    {
        int m = str2month((const char *)token);
 800052a:	68f8      	ldr	r0, [r7, #12]
 800052c:	f000 f888 	bl	8000640 <str2month>
 8000530:	60b8      	str	r0, [r7, #8]
        if (m > 0)
 8000532:	68bb      	ldr	r3, [r7, #8]
 8000534:	2b00      	cmp	r3, #0
 8000536:	dd4b      	ble.n	80005d0 <setBuildTime+0xd0>
        {
            date->Month = m;
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	b2da      	uxtb	r2, r3
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	705a      	strb	r2, [r3, #1]
            token = strtok(NULL, delim);
 8000540:	4b3d      	ldr	r3, [pc, #244]	; (8000638 <setBuildTime+0x138>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4619      	mov	r1, r3
 8000546:	2000      	movs	r0, #0
 8000548:	f004 fc6c 	bl	8004e24 <strtok>
 800054c:	60f8      	str	r0, [r7, #12]
            date->Date = atoi(token);
 800054e:	68f8      	ldr	r0, [r7, #12]
 8000550:	f004 fa84 	bl	8004a5c <atoi>
 8000554:	4603      	mov	r3, r0
 8000556:	b2da      	uxtb	r2, r3
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	709a      	strb	r2, [r3, #2]
            token = strtok(NULL, delim);
 800055c:	4b36      	ldr	r3, [pc, #216]	; (8000638 <setBuildTime+0x138>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4619      	mov	r1, r3
 8000562:	2000      	movs	r0, #0
 8000564:	f004 fc5e 	bl	8004e24 <strtok>
 8000568:	60f8      	str	r0, [r7, #12]
            date->Year = atoi(token) - 2000; // Assuming it's a two-digit year representation
 800056a:	68f8      	ldr	r0, [r7, #12]
 800056c:	f004 fa76 	bl	8004a5c <atoi>
 8000570:	4603      	mov	r3, r0
 8000572:	b2db      	uxtb	r3, r3
 8000574:	3330      	adds	r3, #48	; 0x30
 8000576:	b2da      	uxtb	r2, r3
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	70da      	strb	r2, [r3, #3]
            token = strtok(NULL, delim);
 800057c:	4b2e      	ldr	r3, [pc, #184]	; (8000638 <setBuildTime+0x138>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4619      	mov	r1, r3
 8000582:	2000      	movs	r0, #0
 8000584:	f004 fc4e 	bl	8004e24 <strtok>
 8000588:	60f8      	str	r0, [r7, #12]
            time->Hours = atoi(token);
 800058a:	68f8      	ldr	r0, [r7, #12]
 800058c:	f004 fa66 	bl	8004a5c <atoi>
 8000590:	4603      	mov	r3, r0
 8000592:	b2da      	uxtb	r2, r3
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	701a      	strb	r2, [r3, #0]
            token = strtok(NULL, delim);
 8000598:	4b27      	ldr	r3, [pc, #156]	; (8000638 <setBuildTime+0x138>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4619      	mov	r1, r3
 800059e:	2000      	movs	r0, #0
 80005a0:	f004 fc40 	bl	8004e24 <strtok>
 80005a4:	60f8      	str	r0, [r7, #12]
            time->Minutes = atoi(token);
 80005a6:	68f8      	ldr	r0, [r7, #12]
 80005a8:	f004 fa58 	bl	8004a5c <atoi>
 80005ac:	4603      	mov	r3, r0
 80005ae:	b2da      	uxtb	r2, r3
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	705a      	strb	r2, [r3, #1]
            token = strtok(NULL, delim);
 80005b4:	4b20      	ldr	r3, [pc, #128]	; (8000638 <setBuildTime+0x138>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4619      	mov	r1, r3
 80005ba:	2000      	movs	r0, #0
 80005bc:	f004 fc32 	bl	8004e24 <strtok>
 80005c0:	60f8      	str	r0, [r7, #12]
            time->Seconds = atoi(token);
 80005c2:	68f8      	ldr	r0, [r7, #12]
 80005c4:	f004 fa4a 	bl	8004a5c <atoi>
 80005c8:	4603      	mov	r3, r0
 80005ca:	b2da      	uxtb	r2, r3
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	709a      	strb	r2, [r3, #2]
        }
        token = strtok(NULL, delim);
 80005d0:	4b19      	ldr	r3, [pc, #100]	; (8000638 <setBuildTime+0x138>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4619      	mov	r1, r3
 80005d6:	2000      	movs	r0, #0
 80005d8:	f004 fc24 	bl	8004e24 <strtok>
 80005dc:	60f8      	str	r0, [r7, #12]
    while (token)
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d1a2      	bne.n	800052a <setBuildTime+0x2a>
    }
    snprintf(bld, 40, "Build: %02d-%02d-%02d %02d:%02d:%02d\n", date->Year + 2000, date->Month, date->Date, time->Hours, time->Minutes, time->Seconds);
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	78db      	ldrb	r3, [r3, #3]
 80005e8:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	785b      	ldrb	r3, [r3, #1]
 80005f0:	4619      	mov	r1, r3
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	789b      	ldrb	r3, [r3, #2]
 80005f6:	4618      	mov	r0, r3
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	461c      	mov	r4, r3
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	785b      	ldrb	r3, [r3, #1]
 8000602:	461d      	mov	r5, r3
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	789b      	ldrb	r3, [r3, #2]
 8000608:	9304      	str	r3, [sp, #16]
 800060a:	9503      	str	r5, [sp, #12]
 800060c:	9402      	str	r4, [sp, #8]
 800060e:	9001      	str	r0, [sp, #4]
 8000610:	9100      	str	r1, [sp, #0]
 8000612:	4613      	mov	r3, r2
 8000614:	4a09      	ldr	r2, [pc, #36]	; (800063c <setBuildTime+0x13c>)
 8000616:	2128      	movs	r1, #40	; 0x28
 8000618:	4806      	ldr	r0, [pc, #24]	; (8000634 <setBuildTime+0x134>)
 800061a:	f004 fb71 	bl	8004d00 <sniprintf>
    // Output to serial or logging mechanism of your choice
}
 800061e:	bf00      	nop
 8000620:	3710      	adds	r7, #16
 8000622:	46bd      	mov	sp, r7
 8000624:	bdb0      	pop	{r4, r5, r7, pc}
 8000626:	bf00      	nop
 8000628:	08006004 	.word	0x08006004
 800062c:	08005ff0 	.word	0x08005ff0
 8000630:	08005ffc 	.word	0x08005ffc
 8000634:	200001d0 	.word	0x200001d0
 8000638:	20000034 	.word	0x20000034
 800063c:	08006010 	.word	0x08006010

08000640 <str2month>:

int str2month(const char *str) {
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 12; ++i) {
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	e011      	b.n	8000672 <str2month+0x32>
        if (strncmp(str, months[i], 3) == 0) {
 800064e:	4a0d      	ldr	r2, [pc, #52]	; (8000684 <str2month+0x44>)
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000656:	2203      	movs	r2, #3
 8000658:	4619      	mov	r1, r3
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f004 fbcf 	bl	8004dfe <strncmp>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d102      	bne.n	800066c <str2month+0x2c>
            return i + 1;  // Months are 1-based in the RTC_DateTypeDef structure
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	3301      	adds	r3, #1
 800066a:	e007      	b.n	800067c <str2month+0x3c>
    for (int i = 0; i < 12; ++i) {
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	3301      	adds	r3, #1
 8000670:	60fb      	str	r3, [r7, #12]
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	2b0b      	cmp	r3, #11
 8000676:	ddea      	ble.n	800064e <str2month+0xe>
        }
    }
    return -1;  // Invalid month
 8000678:	f04f 33ff 	mov.w	r3, #4294967295
}
 800067c:	4618      	mov	r0, r3
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000000 	.word	0x20000000

08000688 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800068c:	b672      	cpsid	i
}
 800068e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000690:	e7fe      	b.n	8000690 <Error_Handler+0x8>
	...

08000694 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80006a8:	2300      	movs	r3, #0
 80006aa:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80006ac:	4b24      	ldr	r3, [pc, #144]	; (8000740 <MX_RTC_Init+0xac>)
 80006ae:	4a25      	ldr	r2, [pc, #148]	; (8000744 <MX_RTC_Init+0xb0>)
 80006b0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80006b2:	4b23      	ldr	r3, [pc, #140]	; (8000740 <MX_RTC_Init+0xac>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80006b8:	4b21      	ldr	r3, [pc, #132]	; (8000740 <MX_RTC_Init+0xac>)
 80006ba:	227f      	movs	r2, #127	; 0x7f
 80006bc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80006be:	4b20      	ldr	r3, [pc, #128]	; (8000740 <MX_RTC_Init+0xac>)
 80006c0:	22ff      	movs	r2, #255	; 0xff
 80006c2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006c4:	4b1e      	ldr	r3, [pc, #120]	; (8000740 <MX_RTC_Init+0xac>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006ca:	4b1d      	ldr	r3, [pc, #116]	; (8000740 <MX_RTC_Init+0xac>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006d0:	4b1b      	ldr	r3, [pc, #108]	; (8000740 <MX_RTC_Init+0xac>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006d6:	481a      	ldr	r0, [pc, #104]	; (8000740 <MX_RTC_Init+0xac>)
 80006d8:	f002 f932 	bl	8002940 <HAL_RTC_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80006e2:	f7ff ffd1 	bl	8000688 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 80006e6:	2312      	movs	r3, #18
 80006e8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x5;
 80006ea:	2305      	movs	r3, #5
 80006ec:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	2201      	movs	r2, #1
 80006fe:	4619      	mov	r1, r3
 8000700:	480f      	ldr	r0, [pc, #60]	; (8000740 <MX_RTC_Init+0xac>)
 8000702:	f002 f9a0 	bl	8002a46 <HAL_RTC_SetTime>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 800070c:	f7ff ffbc 	bl	8000688 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000710:	2301      	movs	r3, #1
 8000712:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000714:	2301      	movs	r3, #1
 8000716:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000718:	2301      	movs	r3, #1
 800071a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800071c:	2300      	movs	r3, #0
 800071e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000720:	463b      	mov	r3, r7
 8000722:	2201      	movs	r2, #1
 8000724:	4619      	mov	r1, r3
 8000726:	4806      	ldr	r0, [pc, #24]	; (8000740 <MX_RTC_Init+0xac>)
 8000728:	f002 fa85 	bl	8002c36 <HAL_RTC_SetDate>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000732:	f7ff ffa9 	bl	8000688 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	3718      	adds	r7, #24
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	200001f8 	.word	0x200001f8
 8000744:	40002800 	.word	0x40002800

08000748 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000748:	b480      	push	{r7}
 800074a:	b085      	sub	sp, #20
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a0d      	ldr	r2, [pc, #52]	; (800078c <HAL_RTC_MspInit+0x44>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d111      	bne.n	800077e <HAL_RTC_MspInit+0x36>
 800075a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800075e:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	fa93 f3a3 	rbit	r3, r3
 8000766:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000768:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800076a:	fab3 f383 	clz	r3, r3
 800076e:	b2db      	uxtb	r3, r3
 8000770:	461a      	mov	r2, r3
 8000772:	4b07      	ldr	r3, [pc, #28]	; (8000790 <HAL_RTC_MspInit+0x48>)
 8000774:	4413      	add	r3, r2
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	461a      	mov	r2, r3
 800077a:	2301      	movs	r3, #1
 800077c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800077e:	bf00      	nop
 8000780:	3714      	adds	r7, #20
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	40002800 	.word	0x40002800
 8000790:	10908100 	.word	0x10908100

08000794 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000798:	4b1b      	ldr	r3, [pc, #108]	; (8000808 <MX_SPI1_Init+0x74>)
 800079a:	4a1c      	ldr	r2, [pc, #112]	; (800080c <MX_SPI1_Init+0x78>)
 800079c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800079e:	4b1a      	ldr	r3, [pc, #104]	; (8000808 <MX_SPI1_Init+0x74>)
 80007a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007a6:	4b18      	ldr	r3, [pc, #96]	; (8000808 <MX_SPI1_Init+0x74>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007ac:	4b16      	ldr	r3, [pc, #88]	; (8000808 <MX_SPI1_Init+0x74>)
 80007ae:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80007b2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007b4:	4b14      	ldr	r3, [pc, #80]	; (8000808 <MX_SPI1_Init+0x74>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007ba:	4b13      	ldr	r3, [pc, #76]	; (8000808 <MX_SPI1_Init+0x74>)
 80007bc:	2200      	movs	r2, #0
 80007be:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007c0:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_SPI1_Init+0x74>)
 80007c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007c6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_SPI1_Init+0x74>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_SPI1_Init+0x74>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_SPI1_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <MX_SPI1_Init+0x74>)
 80007dc:	2200      	movs	r2, #0
 80007de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_SPI1_Init+0x74>)
 80007e2:	2207      	movs	r2, #7
 80007e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <MX_SPI1_Init+0x74>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_SPI1_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_SPI1_Init+0x74>)
 80007f4:	f002 fb62 	bl	8002ebc <HAL_SPI_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80007fe:	f7ff ff43 	bl	8000688 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000218 	.word	0x20000218
 800080c:	40013000 	.word	0x40013000

08000810 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08a      	sub	sp, #40	; 0x28
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a17      	ldr	r2, [pc, #92]	; (800088c <HAL_SPI_MspInit+0x7c>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d128      	bne.n	8000884 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000832:	4b17      	ldr	r3, [pc, #92]	; (8000890 <HAL_SPI_MspInit+0x80>)
 8000834:	699b      	ldr	r3, [r3, #24]
 8000836:	4a16      	ldr	r2, [pc, #88]	; (8000890 <HAL_SPI_MspInit+0x80>)
 8000838:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800083c:	6193      	str	r3, [r2, #24]
 800083e:	4b14      	ldr	r3, [pc, #80]	; (8000890 <HAL_SPI_MspInit+0x80>)
 8000840:	699b      	ldr	r3, [r3, #24]
 8000842:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000846:	613b      	str	r3, [r7, #16]
 8000848:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	4b11      	ldr	r3, [pc, #68]	; (8000890 <HAL_SPI_MspInit+0x80>)
 800084c:	695b      	ldr	r3, [r3, #20]
 800084e:	4a10      	ldr	r2, [pc, #64]	; (8000890 <HAL_SPI_MspInit+0x80>)
 8000850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000854:	6153      	str	r3, [r2, #20]
 8000856:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <HAL_SPI_MspInit+0x80>)
 8000858:	695b      	ldr	r3, [r3, #20]
 800085a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000862:	23e0      	movs	r3, #224	; 0xe0
 8000864:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000866:	2302      	movs	r3, #2
 8000868:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800086a:	2301      	movs	r3, #1
 800086c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	2300      	movs	r3, #0
 8000870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000872:	2305      	movs	r3, #5
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	4619      	mov	r1, r3
 800087c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000880:	f000 fb3a 	bl	8000ef8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000884:	bf00      	nop
 8000886:	3728      	adds	r7, #40	; 0x28
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40013000 	.word	0x40013000
 8000890:	40021000 	.word	0x40021000

08000894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089a:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <HAL_MspInit+0x44>)
 800089c:	699b      	ldr	r3, [r3, #24]
 800089e:	4a0e      	ldr	r2, [pc, #56]	; (80008d8 <HAL_MspInit+0x44>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6193      	str	r3, [r2, #24]
 80008a6:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <HAL_MspInit+0x44>)
 80008a8:	699b      	ldr	r3, [r3, #24]
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <HAL_MspInit+0x44>)
 80008b4:	69db      	ldr	r3, [r3, #28]
 80008b6:	4a08      	ldr	r2, [pc, #32]	; (80008d8 <HAL_MspInit+0x44>)
 80008b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008bc:	61d3      	str	r3, [r2, #28]
 80008be:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <HAL_MspInit+0x44>)
 80008c0:	69db      	ldr	r3, [r3, #28]
 80008c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ca:	bf00      	nop
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	40021000 	.word	0x40021000

080008dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <NMI_Handler+0x4>

080008e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e6:	e7fe      	b.n	80008e6 <HardFault_Handler+0x4>

080008e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008ec:	e7fe      	b.n	80008ec <MemManage_Handler+0x4>

080008ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f2:	e7fe      	b.n	80008f2 <BusFault_Handler+0x4>

080008f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <UsageFault_Handler+0x4>

080008fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr

08000908 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr

08000916 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000928:	f000 f9bc 	bl	8000ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}

08000930 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  return 1;
 8000934:	2301      	movs	r3, #1
}
 8000936:	4618      	mov	r0, r3
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <_kill>:

int _kill(int pid, int sig)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800094a:	f004 fb0d 	bl	8004f68 <__errno>
 800094e:	4603      	mov	r3, r0
 8000950:	2216      	movs	r2, #22
 8000952:	601a      	str	r2, [r3, #0]
  return -1;
 8000954:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000958:	4618      	mov	r0, r3
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}

08000960 <_exit>:

void _exit (int status)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000968:	f04f 31ff 	mov.w	r1, #4294967295
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f7ff ffe7 	bl	8000940 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000972:	e7fe      	b.n	8000972 <_exit+0x12>

08000974 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]
 8000984:	e00a      	b.n	800099c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000986:	f3af 8000 	nop.w
 800098a:	4601      	mov	r1, r0
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	1c5a      	adds	r2, r3, #1
 8000990:	60ba      	str	r2, [r7, #8]
 8000992:	b2ca      	uxtb	r2, r1
 8000994:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	3301      	adds	r3, #1
 800099a:	617b      	str	r3, [r7, #20]
 800099c:	697a      	ldr	r2, [r7, #20]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	dbf0      	blt.n	8000986 <_read+0x12>
  }

  return len;
 80009a4:	687b      	ldr	r3, [r7, #4]
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3718      	adds	r7, #24
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}

080009ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b086      	sub	sp, #24
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	60f8      	str	r0, [r7, #12]
 80009b6:	60b9      	str	r1, [r7, #8]
 80009b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ba:	2300      	movs	r3, #0
 80009bc:	617b      	str	r3, [r7, #20]
 80009be:	e009      	b.n	80009d4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	1c5a      	adds	r2, r3, #1
 80009c4:	60ba      	str	r2, [r7, #8]
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	4618      	mov	r0, r3
 80009ca:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	3301      	adds	r3, #1
 80009d2:	617b      	str	r3, [r7, #20]
 80009d4:	697a      	ldr	r2, [r7, #20]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	429a      	cmp	r2, r3
 80009da:	dbf1      	blt.n	80009c0 <_write+0x12>
  }
  return len;
 80009dc:	687b      	ldr	r3, [r7, #4]
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3718      	adds	r7, #24
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <_close>:

int _close(int file)
{
 80009e6:	b480      	push	{r7}
 80009e8:	b083      	sub	sp, #12
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr

080009fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009fe:	b480      	push	{r7}
 8000a00:	b083      	sub	sp, #12
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
 8000a06:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a0e:	605a      	str	r2, [r3, #4]
  return 0;
 8000a10:	2300      	movs	r3, #0
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr

08000a1e <_isatty>:

int _isatty(int file)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	b083      	sub	sp, #12
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a26:	2301      	movs	r3, #1
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b085      	sub	sp, #20
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3714      	adds	r7, #20
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
	...

08000a50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a58:	4a14      	ldr	r2, [pc, #80]	; (8000aac <_sbrk+0x5c>)
 8000a5a:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <_sbrk+0x60>)
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a64:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <_sbrk+0x64>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d102      	bne.n	8000a72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a6c:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <_sbrk+0x64>)
 8000a6e:	4a12      	ldr	r2, [pc, #72]	; (8000ab8 <_sbrk+0x68>)
 8000a70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <_sbrk+0x64>)
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4413      	add	r3, r2
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d207      	bcs.n	8000a90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a80:	f004 fa72 	bl	8004f68 <__errno>
 8000a84:	4603      	mov	r3, r0
 8000a86:	220c      	movs	r2, #12
 8000a88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8e:	e009      	b.n	8000aa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <_sbrk+0x64>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a96:	4b07      	ldr	r3, [pc, #28]	; (8000ab4 <_sbrk+0x64>)
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	4a05      	ldr	r2, [pc, #20]	; (8000ab4 <_sbrk+0x64>)
 8000aa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3718      	adds	r7, #24
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20003000 	.word	0x20003000
 8000ab0:	00000400 	.word	0x00000400
 8000ab4:	2000027c 	.word	0x2000027c
 8000ab8:	20000458 	.word	0x20000458

08000abc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <SystemInit+0x20>)
 8000ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ac6:	4a05      	ldr	r2, [pc, #20]	; (8000adc <SystemInit+0x20>)
 8000ac8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000acc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ae4:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <MX_USART2_UART_Init+0x58>)
 8000ae6:	4a15      	ldr	r2, [pc, #84]	; (8000b3c <MX_USART2_UART_Init+0x5c>)
 8000ae8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aea:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <MX_USART2_UART_Init+0x58>)
 8000aec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000af0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000af2:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <MX_USART2_UART_Init+0x58>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000af8:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <MX_USART2_UART_Init+0x58>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000afe:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <MX_USART2_UART_Init+0x58>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b04:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <MX_USART2_UART_Init+0x58>)
 8000b06:	220c      	movs	r2, #12
 8000b08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <MX_USART2_UART_Init+0x58>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b10:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <MX_USART2_UART_Init+0x58>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b16:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <MX_USART2_UART_Init+0x58>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <MX_USART2_UART_Init+0x58>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b22:	4805      	ldr	r0, [pc, #20]	; (8000b38 <MX_USART2_UART_Init+0x58>)
 8000b24:	f003 f8f8 	bl	8003d18 <HAL_UART_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b2e:	f7ff fdab 	bl	8000688 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000280 	.word	0x20000280
 8000b3c:	40004400 	.word	0x40004400

08000b40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	; 0x28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a17      	ldr	r2, [pc, #92]	; (8000bbc <HAL_UART_MspInit+0x7c>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d128      	bne.n	8000bb4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b62:	4b17      	ldr	r3, [pc, #92]	; (8000bc0 <HAL_UART_MspInit+0x80>)
 8000b64:	69db      	ldr	r3, [r3, #28]
 8000b66:	4a16      	ldr	r2, [pc, #88]	; (8000bc0 <HAL_UART_MspInit+0x80>)
 8000b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b6c:	61d3      	str	r3, [r2, #28]
 8000b6e:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <HAL_UART_MspInit+0x80>)
 8000b70:	69db      	ldr	r3, [r3, #28]
 8000b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <HAL_UART_MspInit+0x80>)
 8000b7c:	695b      	ldr	r3, [r3, #20]
 8000b7e:	4a10      	ldr	r2, [pc, #64]	; (8000bc0 <HAL_UART_MspInit+0x80>)
 8000b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b84:	6153      	str	r3, [r2, #20]
 8000b86:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <HAL_UART_MspInit+0x80>)
 8000b88:	695b      	ldr	r3, [r3, #20]
 8000b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b92:	230c      	movs	r3, #12
 8000b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	2302      	movs	r3, #2
 8000b98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ba2:	2307      	movs	r3, #7
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4619      	mov	r1, r3
 8000bac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb0:	f000 f9a2 	bl	8000ef8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000bb4:	bf00      	nop
 8000bb6:	3728      	adds	r7, #40	; 0x28
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40004400 	.word	0x40004400
 8000bc0:	40021000 	.word	0x40021000

08000bc4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bfc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bc8:	f7ff ff78 	bl	8000abc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bcc:	480c      	ldr	r0, [pc, #48]	; (8000c00 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bce:	490d      	ldr	r1, [pc, #52]	; (8000c04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bd0:	4a0d      	ldr	r2, [pc, #52]	; (8000c08 <LoopForever+0xe>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd4:	e002      	b.n	8000bdc <LoopCopyDataInit>

08000bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bda:	3304      	adds	r3, #4

08000bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be0:	d3f9      	bcc.n	8000bd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000be2:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000be4:	4c0a      	ldr	r4, [pc, #40]	; (8000c10 <LoopForever+0x16>)
  movs r3, #0
 8000be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be8:	e001      	b.n	8000bee <LoopFillZerobss>

08000bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bec:	3204      	adds	r2, #4

08000bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf0:	d3fb      	bcc.n	8000bea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bf2:	f004 f9bf 	bl	8004f74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bf6:	f7ff fb6d 	bl	80002d4 <main>

08000bfa <LoopForever>:

LoopForever:
    b LoopForever
 8000bfa:	e7fe      	b.n	8000bfa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bfc:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c04:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8000c08:	08006374 	.word	0x08006374
  ldr r2, =_sbss
 8000c0c:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8000c10:	20000458 	.word	0x20000458

08000c14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c14:	e7fe      	b.n	8000c14 <ADC1_2_IRQHandler>
	...

08000c18 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c1c:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <HAL_Init+0x28>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a07      	ldr	r2, [pc, #28]	; (8000c40 <HAL_Init+0x28>)
 8000c22:	f043 0310 	orr.w	r3, r3, #16
 8000c26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c28:	2003      	movs	r0, #3
 8000c2a:	f000 f931 	bl	8000e90 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c2e:	200f      	movs	r0, #15
 8000c30:	f000 f808 	bl	8000c44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c34:	f7ff fe2e 	bl	8000894 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40022000 	.word	0x40022000

08000c44 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c4c:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <HAL_InitTick+0x54>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <HAL_InitTick+0x58>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	4619      	mov	r1, r3
 8000c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 f93b 	bl	8000ede <HAL_SYSTICK_Config>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e00e      	b.n	8000c90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2b0f      	cmp	r3, #15
 8000c76:	d80a      	bhi.n	8000c8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	6879      	ldr	r1, [r7, #4]
 8000c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c80:	f000 f911 	bl	8000ea6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c84:	4a06      	ldr	r2, [pc, #24]	; (8000ca0 <HAL_InitTick+0x5c>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	e000      	b.n	8000c90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20000038 	.word	0x20000038
 8000c9c:	20000040 	.word	0x20000040
 8000ca0:	2000003c 	.word	0x2000003c

08000ca4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <HAL_IncTick+0x20>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_IncTick+0x24>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <HAL_IncTick+0x24>)
 8000cb6:	6013      	str	r3, [r2, #0]
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	20000040 	.word	0x20000040
 8000cc8:	20000308 	.word	0x20000308

08000ccc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return uwTick;  
 8000cd0:	4b03      	ldr	r3, [pc, #12]	; (8000ce0 <HAL_GetTick+0x14>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	20000308 	.word	0x20000308

08000ce4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cec:	f7ff ffee 	bl	8000ccc <HAL_GetTick>
 8000cf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cfc:	d005      	beq.n	8000d0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <HAL_Delay+0x44>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	461a      	mov	r2, r3
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	4413      	add	r3, r2
 8000d08:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d0a:	bf00      	nop
 8000d0c:	f7ff ffde 	bl	8000ccc <HAL_GetTick>
 8000d10:	4602      	mov	r2, r0
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d8f7      	bhi.n	8000d0c <HAL_Delay+0x28>
  {
  }
}
 8000d1c:	bf00      	nop
 8000d1e:	bf00      	nop
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000040 	.word	0x20000040

08000d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f003 0307 	and.w	r3, r3, #7
 8000d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <__NVIC_SetPriorityGrouping+0x44>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d42:	68ba      	ldr	r2, [r7, #8]
 8000d44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d48:	4013      	ands	r3, r2
 8000d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d5e:	4a04      	ldr	r2, [pc, #16]	; (8000d70 <__NVIC_SetPriorityGrouping+0x44>)
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	60d3      	str	r3, [r2, #12]
}
 8000d64:	bf00      	nop
 8000d66:	3714      	adds	r7, #20
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d78:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <__NVIC_GetPriorityGrouping+0x18>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	0a1b      	lsrs	r3, r3, #8
 8000d7e:	f003 0307 	and.w	r3, r3, #7
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	6039      	str	r1, [r7, #0]
 8000d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	db0a      	blt.n	8000dba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	490c      	ldr	r1, [pc, #48]	; (8000ddc <__NVIC_SetPriority+0x4c>)
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	0112      	lsls	r2, r2, #4
 8000db0:	b2d2      	uxtb	r2, r2
 8000db2:	440b      	add	r3, r1
 8000db4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db8:	e00a      	b.n	8000dd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	4908      	ldr	r1, [pc, #32]	; (8000de0 <__NVIC_SetPriority+0x50>)
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	f003 030f 	and.w	r3, r3, #15
 8000dc6:	3b04      	subs	r3, #4
 8000dc8:	0112      	lsls	r2, r2, #4
 8000dca:	b2d2      	uxtb	r2, r2
 8000dcc:	440b      	add	r3, r1
 8000dce:	761a      	strb	r2, [r3, #24]
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000e100 	.word	0xe000e100
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b089      	sub	sp, #36	; 0x24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	f003 0307 	and.w	r3, r3, #7
 8000df6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	f1c3 0307 	rsb	r3, r3, #7
 8000dfe:	2b04      	cmp	r3, #4
 8000e00:	bf28      	it	cs
 8000e02:	2304      	movcs	r3, #4
 8000e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3304      	adds	r3, #4
 8000e0a:	2b06      	cmp	r3, #6
 8000e0c:	d902      	bls.n	8000e14 <NVIC_EncodePriority+0x30>
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3b03      	subs	r3, #3
 8000e12:	e000      	b.n	8000e16 <NVIC_EncodePriority+0x32>
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e18:	f04f 32ff 	mov.w	r2, #4294967295
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43da      	mvns	r2, r3
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	401a      	ands	r2, r3
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	fa01 f303 	lsl.w	r3, r1, r3
 8000e36:	43d9      	mvns	r1, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e3c:	4313      	orrs	r3, r2
         );
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3724      	adds	r7, #36	; 0x24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
	...

08000e4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3b01      	subs	r3, #1
 8000e58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e5c:	d301      	bcc.n	8000e62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e00f      	b.n	8000e82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e62:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <SysTick_Config+0x40>)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3b01      	subs	r3, #1
 8000e68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e6a:	210f      	movs	r1, #15
 8000e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e70:	f7ff ff8e 	bl	8000d90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e74:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <SysTick_Config+0x40>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e7a:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <SysTick_Config+0x40>)
 8000e7c:	2207      	movs	r2, #7
 8000e7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	e000e010 	.word	0xe000e010

08000e90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f7ff ff47 	bl	8000d2c <__NVIC_SetPriorityGrouping>
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b086      	sub	sp, #24
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	4603      	mov	r3, r0
 8000eae:	60b9      	str	r1, [r7, #8]
 8000eb0:	607a      	str	r2, [r7, #4]
 8000eb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb8:	f7ff ff5c 	bl	8000d74 <__NVIC_GetPriorityGrouping>
 8000ebc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	68b9      	ldr	r1, [r7, #8]
 8000ec2:	6978      	ldr	r0, [r7, #20]
 8000ec4:	f7ff ff8e 	bl	8000de4 <NVIC_EncodePriority>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ece:	4611      	mov	r1, r2
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff ff5d 	bl	8000d90 <__NVIC_SetPriority>
}
 8000ed6:	bf00      	nop
 8000ed8:	3718      	adds	r7, #24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff ffb0 	bl	8000e4c <SysTick_Config>
 8000eec:	4603      	mov	r3, r0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b087      	sub	sp, #28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f06:	e14e      	b.n	80011a6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	fa01 f303 	lsl.w	r3, r1, r3
 8000f14:	4013      	ands	r3, r2
 8000f16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	f000 8140 	beq.w	80011a0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f003 0303 	and.w	r3, r3, #3
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d005      	beq.n	8000f38 <HAL_GPIO_Init+0x40>
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f003 0303 	and.w	r3, r3, #3
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d130      	bne.n	8000f9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	2203      	movs	r2, #3
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	68da      	ldr	r2, [r3, #12]
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f6e:	2201      	movs	r2, #1
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43db      	mvns	r3, r3
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	091b      	lsrs	r3, r3, #4
 8000f84:	f003 0201 	and.w	r2, r3, #1
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f003 0303 	and.w	r3, r3, #3
 8000fa2:	2b03      	cmp	r3, #3
 8000fa4:	d017      	beq.n	8000fd6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	689a      	ldr	r2, [r3, #8]
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f003 0303 	and.w	r3, r3, #3
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d123      	bne.n	800102a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	08da      	lsrs	r2, r3, #3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	3208      	adds	r2, #8
 8000fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	220f      	movs	r2, #15
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43db      	mvns	r3, r3
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	4013      	ands	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	691a      	ldr	r2, [r3, #16]
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	f003 0307 	and.w	r3, r3, #7
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4313      	orrs	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	08da      	lsrs	r2, r3, #3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3208      	adds	r2, #8
 8001024:	6939      	ldr	r1, [r7, #16]
 8001026:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	2203      	movs	r2, #3
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43db      	mvns	r3, r3
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	4013      	ands	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f003 0203 	and.w	r2, r3, #3
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	4313      	orrs	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001066:	2b00      	cmp	r3, #0
 8001068:	f000 809a 	beq.w	80011a0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106c:	4b55      	ldr	r3, [pc, #340]	; (80011c4 <HAL_GPIO_Init+0x2cc>)
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	4a54      	ldr	r2, [pc, #336]	; (80011c4 <HAL_GPIO_Init+0x2cc>)
 8001072:	f043 0301 	orr.w	r3, r3, #1
 8001076:	6193      	str	r3, [r2, #24]
 8001078:	4b52      	ldr	r3, [pc, #328]	; (80011c4 <HAL_GPIO_Init+0x2cc>)
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	f003 0301 	and.w	r3, r3, #1
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001084:	4a50      	ldr	r2, [pc, #320]	; (80011c8 <HAL_GPIO_Init+0x2d0>)
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	089b      	lsrs	r3, r3, #2
 800108a:	3302      	adds	r3, #2
 800108c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001090:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	f003 0303 	and.w	r3, r3, #3
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	220f      	movs	r2, #15
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	4013      	ands	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010ae:	d013      	beq.n	80010d8 <HAL_GPIO_Init+0x1e0>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4a46      	ldr	r2, [pc, #280]	; (80011cc <HAL_GPIO_Init+0x2d4>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d00d      	beq.n	80010d4 <HAL_GPIO_Init+0x1dc>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4a45      	ldr	r2, [pc, #276]	; (80011d0 <HAL_GPIO_Init+0x2d8>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d007      	beq.n	80010d0 <HAL_GPIO_Init+0x1d8>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4a44      	ldr	r2, [pc, #272]	; (80011d4 <HAL_GPIO_Init+0x2dc>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d101      	bne.n	80010cc <HAL_GPIO_Init+0x1d4>
 80010c8:	2303      	movs	r3, #3
 80010ca:	e006      	b.n	80010da <HAL_GPIO_Init+0x1e2>
 80010cc:	2305      	movs	r3, #5
 80010ce:	e004      	b.n	80010da <HAL_GPIO_Init+0x1e2>
 80010d0:	2302      	movs	r3, #2
 80010d2:	e002      	b.n	80010da <HAL_GPIO_Init+0x1e2>
 80010d4:	2301      	movs	r3, #1
 80010d6:	e000      	b.n	80010da <HAL_GPIO_Init+0x1e2>
 80010d8:	2300      	movs	r3, #0
 80010da:	697a      	ldr	r2, [r7, #20]
 80010dc:	f002 0203 	and.w	r2, r2, #3
 80010e0:	0092      	lsls	r2, r2, #2
 80010e2:	4093      	lsls	r3, r2
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010ea:	4937      	ldr	r1, [pc, #220]	; (80011c8 <HAL_GPIO_Init+0x2d0>)
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	089b      	lsrs	r3, r3, #2
 80010f0:	3302      	adds	r3, #2
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010f8:	4b37      	ldr	r3, [pc, #220]	; (80011d8 <HAL_GPIO_Init+0x2e0>)
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	43db      	mvns	r3, r3
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	4013      	ands	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d003      	beq.n	800111c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	4313      	orrs	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800111c:	4a2e      	ldr	r2, [pc, #184]	; (80011d8 <HAL_GPIO_Init+0x2e0>)
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001122:	4b2d      	ldr	r3, [pc, #180]	; (80011d8 <HAL_GPIO_Init+0x2e0>)
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	43db      	mvns	r3, r3
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	4013      	ands	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d003      	beq.n	8001146 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4313      	orrs	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001146:	4a24      	ldr	r2, [pc, #144]	; (80011d8 <HAL_GPIO_Init+0x2e0>)
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800114c:	4b22      	ldr	r3, [pc, #136]	; (80011d8 <HAL_GPIO_Init+0x2e0>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	43db      	mvns	r3, r3
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4013      	ands	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	4313      	orrs	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001170:	4a19      	ldr	r2, [pc, #100]	; (80011d8 <HAL_GPIO_Init+0x2e0>)
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001176:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <HAL_GPIO_Init+0x2e0>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	43db      	mvns	r3, r3
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	4013      	ands	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	4313      	orrs	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800119a:	4a0f      	ldr	r2, [pc, #60]	; (80011d8 <HAL_GPIO_Init+0x2e0>)
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	3301      	adds	r3, #1
 80011a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	fa22 f303 	lsr.w	r3, r2, r3
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f47f aea9 	bne.w	8000f08 <HAL_GPIO_Init+0x10>
  }
}
 80011b6:	bf00      	nop
 80011b8:	bf00      	nop
 80011ba:	371c      	adds	r7, #28
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	40021000 	.word	0x40021000
 80011c8:	40010000 	.word	0x40010000
 80011cc:	48000400 	.word	0x48000400
 80011d0:	48000800 	.word	0x48000800
 80011d4:	48000c00 	.word	0x48000c00
 80011d8:	40010400 	.word	0x40010400

080011dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	460b      	mov	r3, r1
 80011e6:	807b      	strh	r3, [r7, #2]
 80011e8:	4613      	mov	r3, r2
 80011ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011ec:	787b      	ldrb	r3, [r7, #1]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011f2:	887a      	ldrh	r2, [r7, #2]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011f8:	e002      	b.n	8001200 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011fa:	887a      	ldrh	r2, [r7, #2]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001212:	af00      	add	r7, sp, #0
 8001214:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001218:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800121c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800121e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001222:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d102      	bne.n	8001232 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	f001 b823 	b.w	8002278 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001232:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001236:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	2b00      	cmp	r3, #0
 8001244:	f000 817d 	beq.w	8001542 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001248:	4bbc      	ldr	r3, [pc, #752]	; (800153c <HAL_RCC_OscConfig+0x330>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 030c 	and.w	r3, r3, #12
 8001250:	2b04      	cmp	r3, #4
 8001252:	d00c      	beq.n	800126e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001254:	4bb9      	ldr	r3, [pc, #740]	; (800153c <HAL_RCC_OscConfig+0x330>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 030c 	and.w	r3, r3, #12
 800125c:	2b08      	cmp	r3, #8
 800125e:	d15c      	bne.n	800131a <HAL_RCC_OscConfig+0x10e>
 8001260:	4bb6      	ldr	r3, [pc, #728]	; (800153c <HAL_RCC_OscConfig+0x330>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800126c:	d155      	bne.n	800131a <HAL_RCC_OscConfig+0x10e>
 800126e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001272:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001276:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800127a:	fa93 f3a3 	rbit	r3, r3
 800127e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 8001282:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001286:	fab3 f383 	clz	r3, r3
 800128a:	b2db      	uxtb	r3, r3
 800128c:	095b      	lsrs	r3, r3, #5
 800128e:	b2db      	uxtb	r3, r3
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2b01      	cmp	r3, #1
 8001298:	d102      	bne.n	80012a0 <HAL_RCC_OscConfig+0x94>
 800129a:	4ba8      	ldr	r3, [pc, #672]	; (800153c <HAL_RCC_OscConfig+0x330>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	e015      	b.n	80012cc <HAL_RCC_OscConfig+0xc0>
 80012a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012a4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80012ac:	fa93 f3a3 	rbit	r3, r3
 80012b0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80012b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012b8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80012bc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80012c0:	fa93 f3a3 	rbit	r3, r3
 80012c4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80012c8:	4b9c      	ldr	r3, [pc, #624]	; (800153c <HAL_RCC_OscConfig+0x330>)
 80012ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012d0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80012d4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80012d8:	fa92 f2a2 	rbit	r2, r2
 80012dc:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80012e0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80012e4:	fab2 f282 	clz	r2, r2
 80012e8:	b2d2      	uxtb	r2, r2
 80012ea:	f042 0220 	orr.w	r2, r2, #32
 80012ee:	b2d2      	uxtb	r2, r2
 80012f0:	f002 021f 	and.w	r2, r2, #31
 80012f4:	2101      	movs	r1, #1
 80012f6:	fa01 f202 	lsl.w	r2, r1, r2
 80012fa:	4013      	ands	r3, r2
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	f000 811f 	beq.w	8001540 <HAL_RCC_OscConfig+0x334>
 8001302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001306:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	f040 8116 	bne.w	8001540 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	f000 bfaf 	b.w	8002278 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800131a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800131e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800132a:	d106      	bne.n	800133a <HAL_RCC_OscConfig+0x12e>
 800132c:	4b83      	ldr	r3, [pc, #524]	; (800153c <HAL_RCC_OscConfig+0x330>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a82      	ldr	r2, [pc, #520]	; (800153c <HAL_RCC_OscConfig+0x330>)
 8001332:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	e036      	b.n	80013a8 <HAL_RCC_OscConfig+0x19c>
 800133a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800133e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d10c      	bne.n	8001364 <HAL_RCC_OscConfig+0x158>
 800134a:	4b7c      	ldr	r3, [pc, #496]	; (800153c <HAL_RCC_OscConfig+0x330>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a7b      	ldr	r2, [pc, #492]	; (800153c <HAL_RCC_OscConfig+0x330>)
 8001350:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001354:	6013      	str	r3, [r2, #0]
 8001356:	4b79      	ldr	r3, [pc, #484]	; (800153c <HAL_RCC_OscConfig+0x330>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a78      	ldr	r2, [pc, #480]	; (800153c <HAL_RCC_OscConfig+0x330>)
 800135c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001360:	6013      	str	r3, [r2, #0]
 8001362:	e021      	b.n	80013a8 <HAL_RCC_OscConfig+0x19c>
 8001364:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001368:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001374:	d10c      	bne.n	8001390 <HAL_RCC_OscConfig+0x184>
 8001376:	4b71      	ldr	r3, [pc, #452]	; (800153c <HAL_RCC_OscConfig+0x330>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a70      	ldr	r2, [pc, #448]	; (800153c <HAL_RCC_OscConfig+0x330>)
 800137c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001380:	6013      	str	r3, [r2, #0]
 8001382:	4b6e      	ldr	r3, [pc, #440]	; (800153c <HAL_RCC_OscConfig+0x330>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a6d      	ldr	r2, [pc, #436]	; (800153c <HAL_RCC_OscConfig+0x330>)
 8001388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800138c:	6013      	str	r3, [r2, #0]
 800138e:	e00b      	b.n	80013a8 <HAL_RCC_OscConfig+0x19c>
 8001390:	4b6a      	ldr	r3, [pc, #424]	; (800153c <HAL_RCC_OscConfig+0x330>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a69      	ldr	r2, [pc, #420]	; (800153c <HAL_RCC_OscConfig+0x330>)
 8001396:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800139a:	6013      	str	r3, [r2, #0]
 800139c:	4b67      	ldr	r3, [pc, #412]	; (800153c <HAL_RCC_OscConfig+0x330>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a66      	ldr	r2, [pc, #408]	; (800153c <HAL_RCC_OscConfig+0x330>)
 80013a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013a6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013a8:	4b64      	ldr	r3, [pc, #400]	; (800153c <HAL_RCC_OscConfig+0x330>)
 80013aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ac:	f023 020f 	bic.w	r2, r3, #15
 80013b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	495f      	ldr	r1, [pc, #380]	; (800153c <HAL_RCC_OscConfig+0x330>)
 80013be:	4313      	orrs	r3, r2
 80013c0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d059      	beq.n	8001486 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d2:	f7ff fc7b 	bl	8000ccc <HAL_GetTick>
 80013d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013da:	e00a      	b.n	80013f2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013dc:	f7ff fc76 	bl	8000ccc <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b64      	cmp	r3, #100	; 0x64
 80013ea:	d902      	bls.n	80013f2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	f000 bf43 	b.w	8002278 <HAL_RCC_OscConfig+0x106c>
 80013f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013f6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013fa:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80013fe:	fa93 f3a3 	rbit	r3, r3
 8001402:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001406:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800140a:	fab3 f383 	clz	r3, r3
 800140e:	b2db      	uxtb	r3, r3
 8001410:	095b      	lsrs	r3, r3, #5
 8001412:	b2db      	uxtb	r3, r3
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	b2db      	uxtb	r3, r3
 800141a:	2b01      	cmp	r3, #1
 800141c:	d102      	bne.n	8001424 <HAL_RCC_OscConfig+0x218>
 800141e:	4b47      	ldr	r3, [pc, #284]	; (800153c <HAL_RCC_OscConfig+0x330>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	e015      	b.n	8001450 <HAL_RCC_OscConfig+0x244>
 8001424:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001428:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800142c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001430:	fa93 f3a3 	rbit	r3, r3
 8001434:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001438:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800143c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001440:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001444:	fa93 f3a3 	rbit	r3, r3
 8001448:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800144c:	4b3b      	ldr	r3, [pc, #236]	; (800153c <HAL_RCC_OscConfig+0x330>)
 800144e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001450:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001454:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001458:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800145c:	fa92 f2a2 	rbit	r2, r2
 8001460:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001464:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001468:	fab2 f282 	clz	r2, r2
 800146c:	b2d2      	uxtb	r2, r2
 800146e:	f042 0220 	orr.w	r2, r2, #32
 8001472:	b2d2      	uxtb	r2, r2
 8001474:	f002 021f 	and.w	r2, r2, #31
 8001478:	2101      	movs	r1, #1
 800147a:	fa01 f202 	lsl.w	r2, r1, r2
 800147e:	4013      	ands	r3, r2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d0ab      	beq.n	80013dc <HAL_RCC_OscConfig+0x1d0>
 8001484:	e05d      	b.n	8001542 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001486:	f7ff fc21 	bl	8000ccc <HAL_GetTick>
 800148a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800148e:	e00a      	b.n	80014a6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001490:	f7ff fc1c 	bl	8000ccc <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b64      	cmp	r3, #100	; 0x64
 800149e:	d902      	bls.n	80014a6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	f000 bee9 	b.w	8002278 <HAL_RCC_OscConfig+0x106c>
 80014a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014aa:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ae:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80014b2:	fa93 f3a3 	rbit	r3, r3
 80014b6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80014ba:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014be:	fab3 f383 	clz	r3, r3
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	095b      	lsrs	r3, r3, #5
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d102      	bne.n	80014d8 <HAL_RCC_OscConfig+0x2cc>
 80014d2:	4b1a      	ldr	r3, [pc, #104]	; (800153c <HAL_RCC_OscConfig+0x330>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	e015      	b.n	8001504 <HAL_RCC_OscConfig+0x2f8>
 80014d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014dc:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80014e4:	fa93 f3a3 	rbit	r3, r3
 80014e8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80014ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014f0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80014f4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80014f8:	fa93 f3a3 	rbit	r3, r3
 80014fc:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001500:	4b0e      	ldr	r3, [pc, #56]	; (800153c <HAL_RCC_OscConfig+0x330>)
 8001502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001504:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001508:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800150c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001510:	fa92 f2a2 	rbit	r2, r2
 8001514:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001518:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800151c:	fab2 f282 	clz	r2, r2
 8001520:	b2d2      	uxtb	r2, r2
 8001522:	f042 0220 	orr.w	r2, r2, #32
 8001526:	b2d2      	uxtb	r2, r2
 8001528:	f002 021f 	and.w	r2, r2, #31
 800152c:	2101      	movs	r1, #1
 800152e:	fa01 f202 	lsl.w	r2, r1, r2
 8001532:	4013      	ands	r3, r2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d1ab      	bne.n	8001490 <HAL_RCC_OscConfig+0x284>
 8001538:	e003      	b.n	8001542 <HAL_RCC_OscConfig+0x336>
 800153a:	bf00      	nop
 800153c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001540:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001542:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001546:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	f000 817d 	beq.w	8001852 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001558:	4ba6      	ldr	r3, [pc, #664]	; (80017f4 <HAL_RCC_OscConfig+0x5e8>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 030c 	and.w	r3, r3, #12
 8001560:	2b00      	cmp	r3, #0
 8001562:	d00b      	beq.n	800157c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001564:	4ba3      	ldr	r3, [pc, #652]	; (80017f4 <HAL_RCC_OscConfig+0x5e8>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 030c 	and.w	r3, r3, #12
 800156c:	2b08      	cmp	r3, #8
 800156e:	d172      	bne.n	8001656 <HAL_RCC_OscConfig+0x44a>
 8001570:	4ba0      	ldr	r3, [pc, #640]	; (80017f4 <HAL_RCC_OscConfig+0x5e8>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d16c      	bne.n	8001656 <HAL_RCC_OscConfig+0x44a>
 800157c:	2302      	movs	r3, #2
 800157e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001582:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001586:	fa93 f3a3 	rbit	r3, r3
 800158a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800158e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001592:	fab3 f383 	clz	r3, r3
 8001596:	b2db      	uxtb	r3, r3
 8001598:	095b      	lsrs	r3, r3, #5
 800159a:	b2db      	uxtb	r3, r3
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d102      	bne.n	80015ac <HAL_RCC_OscConfig+0x3a0>
 80015a6:	4b93      	ldr	r3, [pc, #588]	; (80017f4 <HAL_RCC_OscConfig+0x5e8>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	e013      	b.n	80015d4 <HAL_RCC_OscConfig+0x3c8>
 80015ac:	2302      	movs	r3, #2
 80015ae:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80015b6:	fa93 f3a3 	rbit	r3, r3
 80015ba:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80015be:	2302      	movs	r3, #2
 80015c0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80015c4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80015c8:	fa93 f3a3 	rbit	r3, r3
 80015cc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80015d0:	4b88      	ldr	r3, [pc, #544]	; (80017f4 <HAL_RCC_OscConfig+0x5e8>)
 80015d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d4:	2202      	movs	r2, #2
 80015d6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80015da:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80015de:	fa92 f2a2 	rbit	r2, r2
 80015e2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80015e6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80015ea:	fab2 f282 	clz	r2, r2
 80015ee:	b2d2      	uxtb	r2, r2
 80015f0:	f042 0220 	orr.w	r2, r2, #32
 80015f4:	b2d2      	uxtb	r2, r2
 80015f6:	f002 021f 	and.w	r2, r2, #31
 80015fa:	2101      	movs	r1, #1
 80015fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001600:	4013      	ands	r3, r2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d00a      	beq.n	800161c <HAL_RCC_OscConfig+0x410>
 8001606:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800160a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d002      	beq.n	800161c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	f000 be2e 	b.w	8002278 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800161c:	4b75      	ldr	r3, [pc, #468]	; (80017f4 <HAL_RCC_OscConfig+0x5e8>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001624:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001628:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	695b      	ldr	r3, [r3, #20]
 8001630:	21f8      	movs	r1, #248	; 0xf8
 8001632:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001636:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800163a:	fa91 f1a1 	rbit	r1, r1
 800163e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001642:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001646:	fab1 f181 	clz	r1, r1
 800164a:	b2c9      	uxtb	r1, r1
 800164c:	408b      	lsls	r3, r1
 800164e:	4969      	ldr	r1, [pc, #420]	; (80017f4 <HAL_RCC_OscConfig+0x5e8>)
 8001650:	4313      	orrs	r3, r2
 8001652:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001654:	e0fd      	b.n	8001852 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001656:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800165a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	2b00      	cmp	r3, #0
 8001664:	f000 8088 	beq.w	8001778 <HAL_RCC_OscConfig+0x56c>
 8001668:	2301      	movs	r3, #1
 800166a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800166e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001672:	fa93 f3a3 	rbit	r3, r3
 8001676:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800167a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800167e:	fab3 f383 	clz	r3, r3
 8001682:	b2db      	uxtb	r3, r3
 8001684:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001688:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	461a      	mov	r2, r3
 8001690:	2301      	movs	r3, #1
 8001692:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001694:	f7ff fb1a 	bl	8000ccc <HAL_GetTick>
 8001698:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800169c:	e00a      	b.n	80016b4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800169e:	f7ff fb15 	bl	8000ccc <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d902      	bls.n	80016b4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	f000 bde2 	b.w	8002278 <HAL_RCC_OscConfig+0x106c>
 80016b4:	2302      	movs	r3, #2
 80016b6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ba:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80016be:	fa93 f3a3 	rbit	r3, r3
 80016c2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80016c6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ca:	fab3 f383 	clz	r3, r3
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	095b      	lsrs	r3, r3, #5
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d102      	bne.n	80016e4 <HAL_RCC_OscConfig+0x4d8>
 80016de:	4b45      	ldr	r3, [pc, #276]	; (80017f4 <HAL_RCC_OscConfig+0x5e8>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	e013      	b.n	800170c <HAL_RCC_OscConfig+0x500>
 80016e4:	2302      	movs	r3, #2
 80016e6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ea:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80016ee:	fa93 f3a3 	rbit	r3, r3
 80016f2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80016f6:	2302      	movs	r3, #2
 80016f8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80016fc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001700:	fa93 f3a3 	rbit	r3, r3
 8001704:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001708:	4b3a      	ldr	r3, [pc, #232]	; (80017f4 <HAL_RCC_OscConfig+0x5e8>)
 800170a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170c:	2202      	movs	r2, #2
 800170e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001712:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001716:	fa92 f2a2 	rbit	r2, r2
 800171a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800171e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001722:	fab2 f282 	clz	r2, r2
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	f042 0220 	orr.w	r2, r2, #32
 800172c:	b2d2      	uxtb	r2, r2
 800172e:	f002 021f 	and.w	r2, r2, #31
 8001732:	2101      	movs	r1, #1
 8001734:	fa01 f202 	lsl.w	r2, r1, r2
 8001738:	4013      	ands	r3, r2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d0af      	beq.n	800169e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800173e:	4b2d      	ldr	r3, [pc, #180]	; (80017f4 <HAL_RCC_OscConfig+0x5e8>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001746:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800174a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	695b      	ldr	r3, [r3, #20]
 8001752:	21f8      	movs	r1, #248	; 0xf8
 8001754:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001758:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800175c:	fa91 f1a1 	rbit	r1, r1
 8001760:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001764:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001768:	fab1 f181 	clz	r1, r1
 800176c:	b2c9      	uxtb	r1, r1
 800176e:	408b      	lsls	r3, r1
 8001770:	4920      	ldr	r1, [pc, #128]	; (80017f4 <HAL_RCC_OscConfig+0x5e8>)
 8001772:	4313      	orrs	r3, r2
 8001774:	600b      	str	r3, [r1, #0]
 8001776:	e06c      	b.n	8001852 <HAL_RCC_OscConfig+0x646>
 8001778:	2301      	movs	r3, #1
 800177a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001782:	fa93 f3a3 	rbit	r3, r3
 8001786:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800178a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800178e:	fab3 f383 	clz	r3, r3
 8001792:	b2db      	uxtb	r3, r3
 8001794:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001798:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	461a      	mov	r2, r3
 80017a0:	2300      	movs	r3, #0
 80017a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a4:	f7ff fa92 	bl	8000ccc <HAL_GetTick>
 80017a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ac:	e00a      	b.n	80017c4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017ae:	f7ff fa8d 	bl	8000ccc <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d902      	bls.n	80017c4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	f000 bd5a 	b.w	8002278 <HAL_RCC_OscConfig+0x106c>
 80017c4:	2302      	movs	r3, #2
 80017c6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ca:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80017ce:	fa93 f3a3 	rbit	r3, r3
 80017d2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80017d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017da:	fab3 f383 	clz	r3, r3
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	095b      	lsrs	r3, r3, #5
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d104      	bne.n	80017f8 <HAL_RCC_OscConfig+0x5ec>
 80017ee:	4b01      	ldr	r3, [pc, #4]	; (80017f4 <HAL_RCC_OscConfig+0x5e8>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	e015      	b.n	8001820 <HAL_RCC_OscConfig+0x614>
 80017f4:	40021000 	.word	0x40021000
 80017f8:	2302      	movs	r3, #2
 80017fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001802:	fa93 f3a3 	rbit	r3, r3
 8001806:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800180a:	2302      	movs	r3, #2
 800180c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001810:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001814:	fa93 f3a3 	rbit	r3, r3
 8001818:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800181c:	4bc8      	ldr	r3, [pc, #800]	; (8001b40 <HAL_RCC_OscConfig+0x934>)
 800181e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001820:	2202      	movs	r2, #2
 8001822:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001826:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800182a:	fa92 f2a2 	rbit	r2, r2
 800182e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001832:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001836:	fab2 f282 	clz	r2, r2
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	f042 0220 	orr.w	r2, r2, #32
 8001840:	b2d2      	uxtb	r2, r2
 8001842:	f002 021f 	and.w	r2, r2, #31
 8001846:	2101      	movs	r1, #1
 8001848:	fa01 f202 	lsl.w	r2, r1, r2
 800184c:	4013      	ands	r3, r2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1ad      	bne.n	80017ae <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001856:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0308 	and.w	r3, r3, #8
 8001862:	2b00      	cmp	r3, #0
 8001864:	f000 8110 	beq.w	8001a88 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001868:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800186c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d079      	beq.n	800196c <HAL_RCC_OscConfig+0x760>
 8001878:	2301      	movs	r3, #1
 800187a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001882:	fa93 f3a3 	rbit	r3, r3
 8001886:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800188a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800188e:	fab3 f383 	clz	r3, r3
 8001892:	b2db      	uxtb	r3, r3
 8001894:	461a      	mov	r2, r3
 8001896:	4bab      	ldr	r3, [pc, #684]	; (8001b44 <HAL_RCC_OscConfig+0x938>)
 8001898:	4413      	add	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	461a      	mov	r2, r3
 800189e:	2301      	movs	r3, #1
 80018a0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a2:	f7ff fa13 	bl	8000ccc <HAL_GetTick>
 80018a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018aa:	e00a      	b.n	80018c2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018ac:	f7ff fa0e 	bl	8000ccc <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d902      	bls.n	80018c2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	f000 bcdb 	b.w	8002278 <HAL_RCC_OscConfig+0x106c>
 80018c2:	2302      	movs	r3, #2
 80018c4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80018cc:	fa93 f3a3 	rbit	r3, r3
 80018d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80018d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018d8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80018dc:	2202      	movs	r2, #2
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	fa93 f2a3 	rbit	r2, r3
 80018ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001900:	2202      	movs	r2, #2
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001908:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	fa93 f2a3 	rbit	r2, r3
 8001912:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001916:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800191a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800191c:	4b88      	ldr	r3, [pc, #544]	; (8001b40 <HAL_RCC_OscConfig+0x934>)
 800191e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001920:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001924:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001928:	2102      	movs	r1, #2
 800192a:	6019      	str	r1, [r3, #0]
 800192c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001930:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	fa93 f1a3 	rbit	r1, r3
 800193a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800193e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001942:	6019      	str	r1, [r3, #0]
  return result;
 8001944:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001948:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	fab3 f383 	clz	r3, r3
 8001952:	b2db      	uxtb	r3, r3
 8001954:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001958:	b2db      	uxtb	r3, r3
 800195a:	f003 031f 	and.w	r3, r3, #31
 800195e:	2101      	movs	r1, #1
 8001960:	fa01 f303 	lsl.w	r3, r1, r3
 8001964:	4013      	ands	r3, r2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d0a0      	beq.n	80018ac <HAL_RCC_OscConfig+0x6a0>
 800196a:	e08d      	b.n	8001a88 <HAL_RCC_OscConfig+0x87c>
 800196c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001970:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001974:	2201      	movs	r2, #1
 8001976:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001978:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800197c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	fa93 f2a3 	rbit	r2, r3
 8001986:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800198a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800198e:	601a      	str	r2, [r3, #0]
  return result;
 8001990:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001994:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001998:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800199a:	fab3 f383 	clz	r3, r3
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	461a      	mov	r2, r3
 80019a2:	4b68      	ldr	r3, [pc, #416]	; (8001b44 <HAL_RCC_OscConfig+0x938>)
 80019a4:	4413      	add	r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	461a      	mov	r2, r3
 80019aa:	2300      	movs	r3, #0
 80019ac:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ae:	f7ff f98d 	bl	8000ccc <HAL_GetTick>
 80019b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019b6:	e00a      	b.n	80019ce <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019b8:	f7ff f988 	bl	8000ccc <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d902      	bls.n	80019ce <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	f000 bc55 	b.w	8002278 <HAL_RCC_OscConfig+0x106c>
 80019ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80019d6:	2202      	movs	r2, #2
 80019d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019de:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	fa93 f2a3 	rbit	r2, r3
 80019e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ec:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80019fa:	2202      	movs	r2, #2
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a02:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	fa93 f2a3 	rbit	r2, r3
 8001a0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001a1e:	2202      	movs	r2, #2
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	fa93 f2a3 	rbit	r2, r3
 8001a30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a34:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001a38:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a3a:	4b41      	ldr	r3, [pc, #260]	; (8001b40 <HAL_RCC_OscConfig+0x934>)
 8001a3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a42:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001a46:	2102      	movs	r1, #2
 8001a48:	6019      	str	r1, [r3, #0]
 8001a4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a4e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	fa93 f1a3 	rbit	r1, r3
 8001a58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a5c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001a60:	6019      	str	r1, [r3, #0]
  return result;
 8001a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a66:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	fab3 f383 	clz	r3, r3
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	f003 031f 	and.w	r3, r3, #31
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a82:	4013      	ands	r3, r2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d197      	bne.n	80019b8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a8c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0304 	and.w	r3, r3, #4
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f000 81a1 	beq.w	8001de0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aa4:	4b26      	ldr	r3, [pc, #152]	; (8001b40 <HAL_RCC_OscConfig+0x934>)
 8001aa6:	69db      	ldr	r3, [r3, #28]
 8001aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d116      	bne.n	8001ade <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ab0:	4b23      	ldr	r3, [pc, #140]	; (8001b40 <HAL_RCC_OscConfig+0x934>)
 8001ab2:	69db      	ldr	r3, [r3, #28]
 8001ab4:	4a22      	ldr	r2, [pc, #136]	; (8001b40 <HAL_RCC_OscConfig+0x934>)
 8001ab6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aba:	61d3      	str	r3, [r2, #28]
 8001abc:	4b20      	ldr	r3, [pc, #128]	; (8001b40 <HAL_RCC_OscConfig+0x934>)
 8001abe:	69db      	ldr	r3, [r3, #28]
 8001ac0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001ac4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001ad6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ade:	4b1a      	ldr	r3, [pc, #104]	; (8001b48 <HAL_RCC_OscConfig+0x93c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d11a      	bne.n	8001b20 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aea:	4b17      	ldr	r3, [pc, #92]	; (8001b48 <HAL_RCC_OscConfig+0x93c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a16      	ldr	r2, [pc, #88]	; (8001b48 <HAL_RCC_OscConfig+0x93c>)
 8001af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001af6:	f7ff f8e9 	bl	8000ccc <HAL_GetTick>
 8001afa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001afe:	e009      	b.n	8001b14 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b00:	f7ff f8e4 	bl	8000ccc <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b64      	cmp	r3, #100	; 0x64
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e3b1      	b.n	8002278 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b14:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <HAL_RCC_OscConfig+0x93c>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d0ef      	beq.n	8001b00 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d10d      	bne.n	8001b4c <HAL_RCC_OscConfig+0x940>
 8001b30:	4b03      	ldr	r3, [pc, #12]	; (8001b40 <HAL_RCC_OscConfig+0x934>)
 8001b32:	6a1b      	ldr	r3, [r3, #32]
 8001b34:	4a02      	ldr	r2, [pc, #8]	; (8001b40 <HAL_RCC_OscConfig+0x934>)
 8001b36:	f043 0301 	orr.w	r3, r3, #1
 8001b3a:	6213      	str	r3, [r2, #32]
 8001b3c:	e03c      	b.n	8001bb8 <HAL_RCC_OscConfig+0x9ac>
 8001b3e:	bf00      	nop
 8001b40:	40021000 	.word	0x40021000
 8001b44:	10908120 	.word	0x10908120
 8001b48:	40007000 	.word	0x40007000
 8001b4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b50:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d10c      	bne.n	8001b76 <HAL_RCC_OscConfig+0x96a>
 8001b5c:	4bc1      	ldr	r3, [pc, #772]	; (8001e64 <HAL_RCC_OscConfig+0xc58>)
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	4ac0      	ldr	r2, [pc, #768]	; (8001e64 <HAL_RCC_OscConfig+0xc58>)
 8001b62:	f023 0301 	bic.w	r3, r3, #1
 8001b66:	6213      	str	r3, [r2, #32]
 8001b68:	4bbe      	ldr	r3, [pc, #760]	; (8001e64 <HAL_RCC_OscConfig+0xc58>)
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	4abd      	ldr	r2, [pc, #756]	; (8001e64 <HAL_RCC_OscConfig+0xc58>)
 8001b6e:	f023 0304 	bic.w	r3, r3, #4
 8001b72:	6213      	str	r3, [r2, #32]
 8001b74:	e020      	b.n	8001bb8 <HAL_RCC_OscConfig+0x9ac>
 8001b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	2b05      	cmp	r3, #5
 8001b84:	d10c      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x994>
 8001b86:	4bb7      	ldr	r3, [pc, #732]	; (8001e64 <HAL_RCC_OscConfig+0xc58>)
 8001b88:	6a1b      	ldr	r3, [r3, #32]
 8001b8a:	4ab6      	ldr	r2, [pc, #728]	; (8001e64 <HAL_RCC_OscConfig+0xc58>)
 8001b8c:	f043 0304 	orr.w	r3, r3, #4
 8001b90:	6213      	str	r3, [r2, #32]
 8001b92:	4bb4      	ldr	r3, [pc, #720]	; (8001e64 <HAL_RCC_OscConfig+0xc58>)
 8001b94:	6a1b      	ldr	r3, [r3, #32]
 8001b96:	4ab3      	ldr	r2, [pc, #716]	; (8001e64 <HAL_RCC_OscConfig+0xc58>)
 8001b98:	f043 0301 	orr.w	r3, r3, #1
 8001b9c:	6213      	str	r3, [r2, #32]
 8001b9e:	e00b      	b.n	8001bb8 <HAL_RCC_OscConfig+0x9ac>
 8001ba0:	4bb0      	ldr	r3, [pc, #704]	; (8001e64 <HAL_RCC_OscConfig+0xc58>)
 8001ba2:	6a1b      	ldr	r3, [r3, #32]
 8001ba4:	4aaf      	ldr	r2, [pc, #700]	; (8001e64 <HAL_RCC_OscConfig+0xc58>)
 8001ba6:	f023 0301 	bic.w	r3, r3, #1
 8001baa:	6213      	str	r3, [r2, #32]
 8001bac:	4bad      	ldr	r3, [pc, #692]	; (8001e64 <HAL_RCC_OscConfig+0xc58>)
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	4aac      	ldr	r2, [pc, #688]	; (8001e64 <HAL_RCC_OscConfig+0xc58>)
 8001bb2:	f023 0304 	bic.w	r3, r3, #4
 8001bb6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bbc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f000 8081 	beq.w	8001ccc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bca:	f7ff f87f 	bl	8000ccc <HAL_GetTick>
 8001bce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd2:	e00b      	b.n	8001bec <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bd4:	f7ff f87a 	bl	8000ccc <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e345      	b.n	8002278 <HAL_RCC_OscConfig+0x106c>
 8001bec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001bf4:	2202      	movs	r2, #2
 8001bf6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bfc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	fa93 f2a3 	rbit	r2, r3
 8001c06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c0a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c14:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001c18:	2202      	movs	r2, #2
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c20:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	fa93 f2a3 	rbit	r2, r3
 8001c2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c2e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001c32:	601a      	str	r2, [r3, #0]
  return result;
 8001c34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c38:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001c3c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c3e:	fab3 f383 	clz	r3, r3
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	095b      	lsrs	r3, r3, #5
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	f043 0302 	orr.w	r3, r3, #2
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d102      	bne.n	8001c58 <HAL_RCC_OscConfig+0xa4c>
 8001c52:	4b84      	ldr	r3, [pc, #528]	; (8001e64 <HAL_RCC_OscConfig+0xc58>)
 8001c54:	6a1b      	ldr	r3, [r3, #32]
 8001c56:	e013      	b.n	8001c80 <HAL_RCC_OscConfig+0xa74>
 8001c58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c5c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001c60:	2202      	movs	r2, #2
 8001c62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c68:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	fa93 f2a3 	rbit	r2, r3
 8001c72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c76:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	4b79      	ldr	r3, [pc, #484]	; (8001e64 <HAL_RCC_OscConfig+0xc58>)
 8001c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c80:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c84:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001c88:	2102      	movs	r1, #2
 8001c8a:	6011      	str	r1, [r2, #0]
 8001c8c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c90:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001c94:	6812      	ldr	r2, [r2, #0]
 8001c96:	fa92 f1a2 	rbit	r1, r2
 8001c9a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c9e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001ca2:	6011      	str	r1, [r2, #0]
  return result;
 8001ca4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ca8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001cac:	6812      	ldr	r2, [r2, #0]
 8001cae:	fab2 f282 	clz	r2, r2
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cb8:	b2d2      	uxtb	r2, r2
 8001cba:	f002 021f 	and.w	r2, r2, #31
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d084      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x9c8>
 8001cca:	e07f      	b.n	8001dcc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ccc:	f7fe fffe 	bl	8000ccc <HAL_GetTick>
 8001cd0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cd4:	e00b      	b.n	8001cee <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cd6:	f7fe fff9 	bl	8000ccc <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e2c4      	b.n	8002278 <HAL_RCC_OscConfig+0x106c>
 8001cee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cfe:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	fa93 f2a3 	rbit	r2, r3
 8001d08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d0c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d16:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001d1a:	2202      	movs	r2, #2
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d22:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	fa93 f2a3 	rbit	r2, r3
 8001d2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d30:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001d34:	601a      	str	r2, [r3, #0]
  return result;
 8001d36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d3a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001d3e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d40:	fab3 f383 	clz	r3, r3
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	095b      	lsrs	r3, r3, #5
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	f043 0302 	orr.w	r3, r3, #2
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d102      	bne.n	8001d5a <HAL_RCC_OscConfig+0xb4e>
 8001d54:	4b43      	ldr	r3, [pc, #268]	; (8001e64 <HAL_RCC_OscConfig+0xc58>)
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	e013      	b.n	8001d82 <HAL_RCC_OscConfig+0xb76>
 8001d5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d5e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001d62:	2202      	movs	r2, #2
 8001d64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d6a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	fa93 f2a3 	rbit	r2, r3
 8001d74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d78:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	4b39      	ldr	r3, [pc, #228]	; (8001e64 <HAL_RCC_OscConfig+0xc58>)
 8001d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d86:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001d8a:	2102      	movs	r1, #2
 8001d8c:	6011      	str	r1, [r2, #0]
 8001d8e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d92:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001d96:	6812      	ldr	r2, [r2, #0]
 8001d98:	fa92 f1a2 	rbit	r1, r2
 8001d9c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001da0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001da4:	6011      	str	r1, [r2, #0]
  return result;
 8001da6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001daa:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001dae:	6812      	ldr	r2, [r2, #0]
 8001db0:	fab2 f282 	clz	r2, r2
 8001db4:	b2d2      	uxtb	r2, r2
 8001db6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dba:	b2d2      	uxtb	r2, r2
 8001dbc:	f002 021f 	and.w	r2, r2, #31
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	fa01 f202 	lsl.w	r2, r1, r2
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d184      	bne.n	8001cd6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001dcc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d105      	bne.n	8001de0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dd4:	4b23      	ldr	r3, [pc, #140]	; (8001e64 <HAL_RCC_OscConfig+0xc58>)
 8001dd6:	69db      	ldr	r3, [r3, #28]
 8001dd8:	4a22      	ldr	r2, [pc, #136]	; (8001e64 <HAL_RCC_OscConfig+0xc58>)
 8001dda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dde:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001de0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	69db      	ldr	r3, [r3, #28]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f000 8242 	beq.w	8002276 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001df2:	4b1c      	ldr	r3, [pc, #112]	; (8001e64 <HAL_RCC_OscConfig+0xc58>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f003 030c 	and.w	r3, r3, #12
 8001dfa:	2b08      	cmp	r3, #8
 8001dfc:	f000 8213 	beq.w	8002226 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e04:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	69db      	ldr	r3, [r3, #28]
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	f040 8162 	bne.w	80020d6 <HAL_RCC_OscConfig+0xeca>
 8001e12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e16:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001e1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e24:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	fa93 f2a3 	rbit	r2, r3
 8001e2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e32:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001e36:	601a      	str	r2, [r3, #0]
  return result;
 8001e38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e3c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001e40:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e42:	fab3 f383 	clz	r3, r3
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e4c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	461a      	mov	r2, r3
 8001e54:	2300      	movs	r3, #0
 8001e56:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e58:	f7fe ff38 	bl	8000ccc <HAL_GetTick>
 8001e5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e60:	e00c      	b.n	8001e7c <HAL_RCC_OscConfig+0xc70>
 8001e62:	bf00      	nop
 8001e64:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e68:	f7fe ff30 	bl	8000ccc <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e1fd      	b.n	8002278 <HAL_RCC_OscConfig+0x106c>
 8001e7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e80:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001e84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e8e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	fa93 f2a3 	rbit	r2, r3
 8001e98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e9c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001ea0:	601a      	str	r2, [r3, #0]
  return result;
 8001ea2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001eaa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eac:	fab3 f383 	clz	r3, r3
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	095b      	lsrs	r3, r3, #5
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	f043 0301 	orr.w	r3, r3, #1
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d102      	bne.n	8001ec6 <HAL_RCC_OscConfig+0xcba>
 8001ec0:	4bb0      	ldr	r3, [pc, #704]	; (8002184 <HAL_RCC_OscConfig+0xf78>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	e027      	b.n	8001f16 <HAL_RCC_OscConfig+0xd0a>
 8001ec6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eca:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001ece:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ed2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	fa93 f2a3 	rbit	r2, r3
 8001ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ef0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001ef4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001efe:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	fa93 f2a3 	rbit	r2, r3
 8001f08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f0c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	4b9c      	ldr	r3, [pc, #624]	; (8002184 <HAL_RCC_OscConfig+0xf78>)
 8001f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f1a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001f1e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f22:	6011      	str	r1, [r2, #0]
 8001f24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f28:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001f2c:	6812      	ldr	r2, [r2, #0]
 8001f2e:	fa92 f1a2 	rbit	r1, r2
 8001f32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f36:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001f3a:	6011      	str	r1, [r2, #0]
  return result;
 8001f3c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f40:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001f44:	6812      	ldr	r2, [r2, #0]
 8001f46:	fab2 f282 	clz	r2, r2
 8001f4a:	b2d2      	uxtb	r2, r2
 8001f4c:	f042 0220 	orr.w	r2, r2, #32
 8001f50:	b2d2      	uxtb	r2, r2
 8001f52:	f002 021f 	and.w	r2, r2, #31
 8001f56:	2101      	movs	r1, #1
 8001f58:	fa01 f202 	lsl.w	r2, r1, r2
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d182      	bne.n	8001e68 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f62:	4b88      	ldr	r3, [pc, #544]	; (8002184 <HAL_RCC_OscConfig+0xf78>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001f76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6a1b      	ldr	r3, [r3, #32]
 8001f82:	430b      	orrs	r3, r1
 8001f84:	497f      	ldr	r1, [pc, #508]	; (8002184 <HAL_RCC_OscConfig+0xf78>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	604b      	str	r3, [r1, #4]
 8001f8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f8e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001f92:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f9c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	fa93 f2a3 	rbit	r2, r3
 8001fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001faa:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001fae:	601a      	str	r2, [r3, #0]
  return result;
 8001fb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fb4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001fb8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fba:	fab3 f383 	clz	r3, r3
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fc4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	461a      	mov	r2, r3
 8001fcc:	2301      	movs	r3, #1
 8001fce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd0:	f7fe fe7c 	bl	8000ccc <HAL_GetTick>
 8001fd4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fd8:	e009      	b.n	8001fee <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fda:	f7fe fe77 	bl	8000ccc <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e144      	b.n	8002278 <HAL_RCC_OscConfig+0x106c>
 8001fee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001ff6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ffa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002000:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	fa93 f2a3 	rbit	r2, r3
 800200a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800200e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002012:	601a      	str	r2, [r3, #0]
  return result;
 8002014:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002018:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800201c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800201e:	fab3 f383 	clz	r3, r3
 8002022:	b2db      	uxtb	r3, r3
 8002024:	095b      	lsrs	r3, r3, #5
 8002026:	b2db      	uxtb	r3, r3
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b01      	cmp	r3, #1
 8002030:	d102      	bne.n	8002038 <HAL_RCC_OscConfig+0xe2c>
 8002032:	4b54      	ldr	r3, [pc, #336]	; (8002184 <HAL_RCC_OscConfig+0xf78>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	e027      	b.n	8002088 <HAL_RCC_OscConfig+0xe7c>
 8002038:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800203c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002040:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002044:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002046:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800204a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	fa93 f2a3 	rbit	r2, r3
 8002054:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002058:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002062:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002066:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002070:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	fa93 f2a3 	rbit	r2, r3
 800207a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800207e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	4b3f      	ldr	r3, [pc, #252]	; (8002184 <HAL_RCC_OscConfig+0xf78>)
 8002086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002088:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800208c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002090:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002094:	6011      	str	r1, [r2, #0]
 8002096:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800209a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800209e:	6812      	ldr	r2, [r2, #0]
 80020a0:	fa92 f1a2 	rbit	r1, r2
 80020a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020a8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80020ac:	6011      	str	r1, [r2, #0]
  return result;
 80020ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020b2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80020b6:	6812      	ldr	r2, [r2, #0]
 80020b8:	fab2 f282 	clz	r2, r2
 80020bc:	b2d2      	uxtb	r2, r2
 80020be:	f042 0220 	orr.w	r2, r2, #32
 80020c2:	b2d2      	uxtb	r2, r2
 80020c4:	f002 021f 	and.w	r2, r2, #31
 80020c8:	2101      	movs	r1, #1
 80020ca:	fa01 f202 	lsl.w	r2, r1, r2
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d082      	beq.n	8001fda <HAL_RCC_OscConfig+0xdce>
 80020d4:	e0cf      	b.n	8002276 <HAL_RCC_OscConfig+0x106a>
 80020d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020da:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80020de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80020e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020e8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	fa93 f2a3 	rbit	r2, r3
 80020f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020f6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80020fa:	601a      	str	r2, [r3, #0]
  return result;
 80020fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002100:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002104:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002106:	fab3 f383 	clz	r3, r3
 800210a:	b2db      	uxtb	r3, r3
 800210c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002110:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	461a      	mov	r2, r3
 8002118:	2300      	movs	r3, #0
 800211a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211c:	f7fe fdd6 	bl	8000ccc <HAL_GetTick>
 8002120:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002124:	e009      	b.n	800213a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002126:	f7fe fdd1 	bl	8000ccc <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e09e      	b.n	8002278 <HAL_RCC_OscConfig+0x106c>
 800213a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800213e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002142:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002146:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002148:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800214c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	fa93 f2a3 	rbit	r2, r3
 8002156:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800215a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800215e:	601a      	str	r2, [r3, #0]
  return result;
 8002160:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002164:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002168:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800216a:	fab3 f383 	clz	r3, r3
 800216e:	b2db      	uxtb	r3, r3
 8002170:	095b      	lsrs	r3, r3, #5
 8002172:	b2db      	uxtb	r3, r3
 8002174:	f043 0301 	orr.w	r3, r3, #1
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b01      	cmp	r3, #1
 800217c:	d104      	bne.n	8002188 <HAL_RCC_OscConfig+0xf7c>
 800217e:	4b01      	ldr	r3, [pc, #4]	; (8002184 <HAL_RCC_OscConfig+0xf78>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	e029      	b.n	80021d8 <HAL_RCC_OscConfig+0xfcc>
 8002184:	40021000 	.word	0x40021000
 8002188:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800218c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002190:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002194:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002196:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800219a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	fa93 f2a3 	rbit	r2, r3
 80021a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80021b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	fa93 f2a3 	rbit	r2, r3
 80021ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ce:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	4b2b      	ldr	r3, [pc, #172]	; (8002284 <HAL_RCC_OscConfig+0x1078>)
 80021d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021dc:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80021e0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80021e4:	6011      	str	r1, [r2, #0]
 80021e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021ea:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80021ee:	6812      	ldr	r2, [r2, #0]
 80021f0:	fa92 f1a2 	rbit	r1, r2
 80021f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021f8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80021fc:	6011      	str	r1, [r2, #0]
  return result;
 80021fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002202:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002206:	6812      	ldr	r2, [r2, #0]
 8002208:	fab2 f282 	clz	r2, r2
 800220c:	b2d2      	uxtb	r2, r2
 800220e:	f042 0220 	orr.w	r2, r2, #32
 8002212:	b2d2      	uxtb	r2, r2
 8002214:	f002 021f 	and.w	r2, r2, #31
 8002218:	2101      	movs	r1, #1
 800221a:	fa01 f202 	lsl.w	r2, r1, r2
 800221e:	4013      	ands	r3, r2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d180      	bne.n	8002126 <HAL_RCC_OscConfig+0xf1a>
 8002224:	e027      	b.n	8002276 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002226:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800222a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d101      	bne.n	800223a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e01e      	b.n	8002278 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800223a:	4b12      	ldr	r3, [pc, #72]	; (8002284 <HAL_RCC_OscConfig+0x1078>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002242:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002246:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800224a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800224e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6a1b      	ldr	r3, [r3, #32]
 8002256:	429a      	cmp	r2, r3
 8002258:	d10b      	bne.n	8002272 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800225a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800225e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002262:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002266:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800226e:	429a      	cmp	r2, r3
 8002270:	d001      	beq.n	8002276 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e000      	b.n	8002278 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40021000 	.word	0x40021000

08002288 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b09e      	sub	sp, #120	; 0x78
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002292:	2300      	movs	r3, #0
 8002294:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e162      	b.n	8002566 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022a0:	4b90      	ldr	r3, [pc, #576]	; (80024e4 <HAL_RCC_ClockConfig+0x25c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0307 	and.w	r3, r3, #7
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d910      	bls.n	80022d0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ae:	4b8d      	ldr	r3, [pc, #564]	; (80024e4 <HAL_RCC_ClockConfig+0x25c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f023 0207 	bic.w	r2, r3, #7
 80022b6:	498b      	ldr	r1, [pc, #556]	; (80024e4 <HAL_RCC_ClockConfig+0x25c>)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022be:	4b89      	ldr	r3, [pc, #548]	; (80024e4 <HAL_RCC_ClockConfig+0x25c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d001      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e14a      	b.n	8002566 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d008      	beq.n	80022ee <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022dc:	4b82      	ldr	r3, [pc, #520]	; (80024e8 <HAL_RCC_ClockConfig+0x260>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	497f      	ldr	r1, [pc, #508]	; (80024e8 <HAL_RCC_ClockConfig+0x260>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f000 80dc 	beq.w	80024b4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d13c      	bne.n	800237e <HAL_RCC_ClockConfig+0xf6>
 8002304:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002308:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800230c:	fa93 f3a3 	rbit	r3, r3
 8002310:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002314:	fab3 f383 	clz	r3, r3
 8002318:	b2db      	uxtb	r3, r3
 800231a:	095b      	lsrs	r3, r3, #5
 800231c:	b2db      	uxtb	r3, r3
 800231e:	f043 0301 	orr.w	r3, r3, #1
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b01      	cmp	r3, #1
 8002326:	d102      	bne.n	800232e <HAL_RCC_ClockConfig+0xa6>
 8002328:	4b6f      	ldr	r3, [pc, #444]	; (80024e8 <HAL_RCC_ClockConfig+0x260>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	e00f      	b.n	800234e <HAL_RCC_ClockConfig+0xc6>
 800232e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002332:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002334:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002336:	fa93 f3a3 	rbit	r3, r3
 800233a:	667b      	str	r3, [r7, #100]	; 0x64
 800233c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002340:	663b      	str	r3, [r7, #96]	; 0x60
 8002342:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002344:	fa93 f3a3 	rbit	r3, r3
 8002348:	65fb      	str	r3, [r7, #92]	; 0x5c
 800234a:	4b67      	ldr	r3, [pc, #412]	; (80024e8 <HAL_RCC_ClockConfig+0x260>)
 800234c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002352:	65ba      	str	r2, [r7, #88]	; 0x58
 8002354:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002356:	fa92 f2a2 	rbit	r2, r2
 800235a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800235c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800235e:	fab2 f282 	clz	r2, r2
 8002362:	b2d2      	uxtb	r2, r2
 8002364:	f042 0220 	orr.w	r2, r2, #32
 8002368:	b2d2      	uxtb	r2, r2
 800236a:	f002 021f 	and.w	r2, r2, #31
 800236e:	2101      	movs	r1, #1
 8002370:	fa01 f202 	lsl.w	r2, r1, r2
 8002374:	4013      	ands	r3, r2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d17b      	bne.n	8002472 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e0f3      	b.n	8002566 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b02      	cmp	r3, #2
 8002384:	d13c      	bne.n	8002400 <HAL_RCC_ClockConfig+0x178>
 8002386:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800238a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800238e:	fa93 f3a3 	rbit	r3, r3
 8002392:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002394:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002396:	fab3 f383 	clz	r3, r3
 800239a:	b2db      	uxtb	r3, r3
 800239c:	095b      	lsrs	r3, r3, #5
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	f043 0301 	orr.w	r3, r3, #1
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d102      	bne.n	80023b0 <HAL_RCC_ClockConfig+0x128>
 80023aa:	4b4f      	ldr	r3, [pc, #316]	; (80024e8 <HAL_RCC_ClockConfig+0x260>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	e00f      	b.n	80023d0 <HAL_RCC_ClockConfig+0x148>
 80023b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023b4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023b8:	fa93 f3a3 	rbit	r3, r3
 80023bc:	647b      	str	r3, [r7, #68]	; 0x44
 80023be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023c2:	643b      	str	r3, [r7, #64]	; 0x40
 80023c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023c6:	fa93 f3a3 	rbit	r3, r3
 80023ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023cc:	4b46      	ldr	r3, [pc, #280]	; (80024e8 <HAL_RCC_ClockConfig+0x260>)
 80023ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023d4:	63ba      	str	r2, [r7, #56]	; 0x38
 80023d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023d8:	fa92 f2a2 	rbit	r2, r2
 80023dc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80023de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023e0:	fab2 f282 	clz	r2, r2
 80023e4:	b2d2      	uxtb	r2, r2
 80023e6:	f042 0220 	orr.w	r2, r2, #32
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	f002 021f 	and.w	r2, r2, #31
 80023f0:	2101      	movs	r1, #1
 80023f2:	fa01 f202 	lsl.w	r2, r1, r2
 80023f6:	4013      	ands	r3, r2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d13a      	bne.n	8002472 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e0b2      	b.n	8002566 <HAL_RCC_ClockConfig+0x2de>
 8002400:	2302      	movs	r3, #2
 8002402:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002406:	fa93 f3a3 	rbit	r3, r3
 800240a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800240c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800240e:	fab3 f383 	clz	r3, r3
 8002412:	b2db      	uxtb	r3, r3
 8002414:	095b      	lsrs	r3, r3, #5
 8002416:	b2db      	uxtb	r3, r3
 8002418:	f043 0301 	orr.w	r3, r3, #1
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b01      	cmp	r3, #1
 8002420:	d102      	bne.n	8002428 <HAL_RCC_ClockConfig+0x1a0>
 8002422:	4b31      	ldr	r3, [pc, #196]	; (80024e8 <HAL_RCC_ClockConfig+0x260>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	e00d      	b.n	8002444 <HAL_RCC_ClockConfig+0x1bc>
 8002428:	2302      	movs	r3, #2
 800242a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800242e:	fa93 f3a3 	rbit	r3, r3
 8002432:	627b      	str	r3, [r7, #36]	; 0x24
 8002434:	2302      	movs	r3, #2
 8002436:	623b      	str	r3, [r7, #32]
 8002438:	6a3b      	ldr	r3, [r7, #32]
 800243a:	fa93 f3a3 	rbit	r3, r3
 800243e:	61fb      	str	r3, [r7, #28]
 8002440:	4b29      	ldr	r3, [pc, #164]	; (80024e8 <HAL_RCC_ClockConfig+0x260>)
 8002442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002444:	2202      	movs	r2, #2
 8002446:	61ba      	str	r2, [r7, #24]
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	fa92 f2a2 	rbit	r2, r2
 800244e:	617a      	str	r2, [r7, #20]
  return result;
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	fab2 f282 	clz	r2, r2
 8002456:	b2d2      	uxtb	r2, r2
 8002458:	f042 0220 	orr.w	r2, r2, #32
 800245c:	b2d2      	uxtb	r2, r2
 800245e:	f002 021f 	and.w	r2, r2, #31
 8002462:	2101      	movs	r1, #1
 8002464:	fa01 f202 	lsl.w	r2, r1, r2
 8002468:	4013      	ands	r3, r2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e079      	b.n	8002566 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002472:	4b1d      	ldr	r3, [pc, #116]	; (80024e8 <HAL_RCC_ClockConfig+0x260>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f023 0203 	bic.w	r2, r3, #3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	491a      	ldr	r1, [pc, #104]	; (80024e8 <HAL_RCC_ClockConfig+0x260>)
 8002480:	4313      	orrs	r3, r2
 8002482:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002484:	f7fe fc22 	bl	8000ccc <HAL_GetTick>
 8002488:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800248a:	e00a      	b.n	80024a2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800248c:	f7fe fc1e 	bl	8000ccc <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	f241 3288 	movw	r2, #5000	; 0x1388
 800249a:	4293      	cmp	r3, r2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e061      	b.n	8002566 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a2:	4b11      	ldr	r3, [pc, #68]	; (80024e8 <HAL_RCC_ClockConfig+0x260>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f003 020c 	and.w	r2, r3, #12
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d1eb      	bne.n	800248c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024b4:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <HAL_RCC_ClockConfig+0x25c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0307 	and.w	r3, r3, #7
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d214      	bcs.n	80024ec <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c2:	4b08      	ldr	r3, [pc, #32]	; (80024e4 <HAL_RCC_ClockConfig+0x25c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f023 0207 	bic.w	r2, r3, #7
 80024ca:	4906      	ldr	r1, [pc, #24]	; (80024e4 <HAL_RCC_ClockConfig+0x25c>)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d2:	4b04      	ldr	r3, [pc, #16]	; (80024e4 <HAL_RCC_ClockConfig+0x25c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d005      	beq.n	80024ec <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e040      	b.n	8002566 <HAL_RCC_ClockConfig+0x2de>
 80024e4:	40022000 	.word	0x40022000
 80024e8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0304 	and.w	r3, r3, #4
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d008      	beq.n	800250a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024f8:	4b1d      	ldr	r3, [pc, #116]	; (8002570 <HAL_RCC_ClockConfig+0x2e8>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	491a      	ldr	r1, [pc, #104]	; (8002570 <HAL_RCC_ClockConfig+0x2e8>)
 8002506:	4313      	orrs	r3, r2
 8002508:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0308 	and.w	r3, r3, #8
 8002512:	2b00      	cmp	r3, #0
 8002514:	d009      	beq.n	800252a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002516:	4b16      	ldr	r3, [pc, #88]	; (8002570 <HAL_RCC_ClockConfig+0x2e8>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	4912      	ldr	r1, [pc, #72]	; (8002570 <HAL_RCC_ClockConfig+0x2e8>)
 8002526:	4313      	orrs	r3, r2
 8002528:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800252a:	f000 f829 	bl	8002580 <HAL_RCC_GetSysClockFreq>
 800252e:	4601      	mov	r1, r0
 8002530:	4b0f      	ldr	r3, [pc, #60]	; (8002570 <HAL_RCC_ClockConfig+0x2e8>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002538:	22f0      	movs	r2, #240	; 0xf0
 800253a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	fa92 f2a2 	rbit	r2, r2
 8002542:	60fa      	str	r2, [r7, #12]
  return result;
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	fab2 f282 	clz	r2, r2
 800254a:	b2d2      	uxtb	r2, r2
 800254c:	40d3      	lsrs	r3, r2
 800254e:	4a09      	ldr	r2, [pc, #36]	; (8002574 <HAL_RCC_ClockConfig+0x2ec>)
 8002550:	5cd3      	ldrb	r3, [r2, r3]
 8002552:	fa21 f303 	lsr.w	r3, r1, r3
 8002556:	4a08      	ldr	r2, [pc, #32]	; (8002578 <HAL_RCC_ClockConfig+0x2f0>)
 8002558:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800255a:	4b08      	ldr	r3, [pc, #32]	; (800257c <HAL_RCC_ClockConfig+0x2f4>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f7fe fb70 	bl	8000c44 <HAL_InitTick>
  
  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3778      	adds	r7, #120	; 0x78
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40021000 	.word	0x40021000
 8002574:	08006150 	.word	0x08006150
 8002578:	20000038 	.word	0x20000038
 800257c:	2000003c 	.word	0x2000003c

08002580 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002580:	b480      	push	{r7}
 8002582:	b08b      	sub	sp, #44	; 0x2c
 8002584:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002586:	2300      	movs	r3, #0
 8002588:	61fb      	str	r3, [r7, #28]
 800258a:	2300      	movs	r3, #0
 800258c:	61bb      	str	r3, [r7, #24]
 800258e:	2300      	movs	r3, #0
 8002590:	627b      	str	r3, [r7, #36]	; 0x24
 8002592:	2300      	movs	r3, #0
 8002594:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002596:	2300      	movs	r3, #0
 8002598:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800259a:	4b29      	ldr	r3, [pc, #164]	; (8002640 <HAL_RCC_GetSysClockFreq+0xc0>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	f003 030c 	and.w	r3, r3, #12
 80025a6:	2b04      	cmp	r3, #4
 80025a8:	d002      	beq.n	80025b0 <HAL_RCC_GetSysClockFreq+0x30>
 80025aa:	2b08      	cmp	r3, #8
 80025ac:	d003      	beq.n	80025b6 <HAL_RCC_GetSysClockFreq+0x36>
 80025ae:	e03c      	b.n	800262a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025b0:	4b24      	ldr	r3, [pc, #144]	; (8002644 <HAL_RCC_GetSysClockFreq+0xc4>)
 80025b2:	623b      	str	r3, [r7, #32]
      break;
 80025b4:	e03c      	b.n	8002630 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80025bc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80025c0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	fa92 f2a2 	rbit	r2, r2
 80025c8:	607a      	str	r2, [r7, #4]
  return result;
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	fab2 f282 	clz	r2, r2
 80025d0:	b2d2      	uxtb	r2, r2
 80025d2:	40d3      	lsrs	r3, r2
 80025d4:	4a1c      	ldr	r2, [pc, #112]	; (8002648 <HAL_RCC_GetSysClockFreq+0xc8>)
 80025d6:	5cd3      	ldrb	r3, [r2, r3]
 80025d8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80025da:	4b19      	ldr	r3, [pc, #100]	; (8002640 <HAL_RCC_GetSysClockFreq+0xc0>)
 80025dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025de:	f003 030f 	and.w	r3, r3, #15
 80025e2:	220f      	movs	r2, #15
 80025e4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	fa92 f2a2 	rbit	r2, r2
 80025ec:	60fa      	str	r2, [r7, #12]
  return result;
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	fab2 f282 	clz	r2, r2
 80025f4:	b2d2      	uxtb	r2, r2
 80025f6:	40d3      	lsrs	r3, r2
 80025f8:	4a14      	ldr	r2, [pc, #80]	; (800264c <HAL_RCC_GetSysClockFreq+0xcc>)
 80025fa:	5cd3      	ldrb	r3, [r2, r3]
 80025fc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d008      	beq.n	800261a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002608:	4a0e      	ldr	r2, [pc, #56]	; (8002644 <HAL_RCC_GetSysClockFreq+0xc4>)
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	fb02 f303 	mul.w	r3, r2, r3
 8002616:	627b      	str	r3, [r7, #36]	; 0x24
 8002618:	e004      	b.n	8002624 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	4a0c      	ldr	r2, [pc, #48]	; (8002650 <HAL_RCC_GetSysClockFreq+0xd0>)
 800261e:	fb02 f303 	mul.w	r3, r2, r3
 8002622:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002626:	623b      	str	r3, [r7, #32]
      break;
 8002628:	e002      	b.n	8002630 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800262a:	4b06      	ldr	r3, [pc, #24]	; (8002644 <HAL_RCC_GetSysClockFreq+0xc4>)
 800262c:	623b      	str	r3, [r7, #32]
      break;
 800262e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002630:	6a3b      	ldr	r3, [r7, #32]
}
 8002632:	4618      	mov	r0, r3
 8002634:	372c      	adds	r7, #44	; 0x2c
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	40021000 	.word	0x40021000
 8002644:	007a1200 	.word	0x007a1200
 8002648:	08006168 	.word	0x08006168
 800264c:	08006178 	.word	0x08006178
 8002650:	003d0900 	.word	0x003d0900

08002654 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002658:	4b03      	ldr	r3, [pc, #12]	; (8002668 <HAL_RCC_GetHCLKFreq+0x14>)
 800265a:	681b      	ldr	r3, [r3, #0]
}
 800265c:	4618      	mov	r0, r3
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	20000038 	.word	0x20000038

0800266c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002672:	f7ff ffef 	bl	8002654 <HAL_RCC_GetHCLKFreq>
 8002676:	4601      	mov	r1, r0
 8002678:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002680:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002684:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	fa92 f2a2 	rbit	r2, r2
 800268c:	603a      	str	r2, [r7, #0]
  return result;
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	fab2 f282 	clz	r2, r2
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	40d3      	lsrs	r3, r2
 8002698:	4a04      	ldr	r2, [pc, #16]	; (80026ac <HAL_RCC_GetPCLK1Freq+0x40>)
 800269a:	5cd3      	ldrb	r3, [r2, r3]
 800269c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80026a0:	4618      	mov	r0, r3
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40021000 	.word	0x40021000
 80026ac:	08006160 	.word	0x08006160

080026b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80026b6:	f7ff ffcd 	bl	8002654 <HAL_RCC_GetHCLKFreq>
 80026ba:	4601      	mov	r1, r0
 80026bc:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <HAL_RCC_GetPCLK2Freq+0x3c>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80026c4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80026c8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	fa92 f2a2 	rbit	r2, r2
 80026d0:	603a      	str	r2, [r7, #0]
  return result;
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	fab2 f282 	clz	r2, r2
 80026d8:	b2d2      	uxtb	r2, r2
 80026da:	40d3      	lsrs	r3, r2
 80026dc:	4a04      	ldr	r2, [pc, #16]	; (80026f0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80026de:	5cd3      	ldrb	r3, [r2, r3]
 80026e0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80026e4:	4618      	mov	r0, r3
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	40021000 	.word	0x40021000
 80026f0:	08006160 	.word	0x08006160

080026f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b092      	sub	sp, #72	; 0x48
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026fc:	2300      	movs	r3, #0
 80026fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002700:	2300      	movs	r3, #0
 8002702:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002704:	2300      	movs	r3, #0
 8002706:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002712:	2b00      	cmp	r3, #0
 8002714:	f000 80cd 	beq.w	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002718:	4b86      	ldr	r3, [pc, #536]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800271a:	69db      	ldr	r3, [r3, #28]
 800271c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d10e      	bne.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002724:	4b83      	ldr	r3, [pc, #524]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002726:	69db      	ldr	r3, [r3, #28]
 8002728:	4a82      	ldr	r2, [pc, #520]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800272a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800272e:	61d3      	str	r3, [r2, #28]
 8002730:	4b80      	ldr	r3, [pc, #512]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002732:	69db      	ldr	r3, [r3, #28]
 8002734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002738:	60bb      	str	r3, [r7, #8]
 800273a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800273c:	2301      	movs	r3, #1
 800273e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002742:	4b7d      	ldr	r3, [pc, #500]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274a:	2b00      	cmp	r3, #0
 800274c:	d118      	bne.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800274e:	4b7a      	ldr	r3, [pc, #488]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a79      	ldr	r2, [pc, #484]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002758:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800275a:	f7fe fab7 	bl	8000ccc <HAL_GetTick>
 800275e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002760:	e008      	b.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002762:	f7fe fab3 	bl	8000ccc <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b64      	cmp	r3, #100	; 0x64
 800276e:	d901      	bls.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e0db      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002774:	4b70      	ldr	r3, [pc, #448]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277c:	2b00      	cmp	r3, #0
 800277e:	d0f0      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002780:	4b6c      	ldr	r3, [pc, #432]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002788:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800278a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800278c:	2b00      	cmp	r3, #0
 800278e:	d07d      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002798:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800279a:	429a      	cmp	r2, r3
 800279c:	d076      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800279e:	4b65      	ldr	r3, [pc, #404]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027ac:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b0:	fa93 f3a3 	rbit	r3, r3
 80027b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80027b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027b8:	fab3 f383 	clz	r3, r3
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	461a      	mov	r2, r3
 80027c0:	4b5e      	ldr	r3, [pc, #376]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80027c2:	4413      	add	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	461a      	mov	r2, r3
 80027c8:	2301      	movs	r3, #1
 80027ca:	6013      	str	r3, [r2, #0]
 80027cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d4:	fa93 f3a3 	rbit	r3, r3
 80027d8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80027da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027dc:	fab3 f383 	clz	r3, r3
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	461a      	mov	r2, r3
 80027e4:	4b55      	ldr	r3, [pc, #340]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80027e6:	4413      	add	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	461a      	mov	r2, r3
 80027ec:	2300      	movs	r3, #0
 80027ee:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80027f0:	4a50      	ldr	r2, [pc, #320]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80027f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027f4:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80027f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d045      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002800:	f7fe fa64 	bl	8000ccc <HAL_GetTick>
 8002804:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002806:	e00a      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002808:	f7fe fa60 	bl	8000ccc <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	f241 3288 	movw	r2, #5000	; 0x1388
 8002816:	4293      	cmp	r3, r2
 8002818:	d901      	bls.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e086      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x238>
 800281e:	2302      	movs	r3, #2
 8002820:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002824:	fa93 f3a3 	rbit	r3, r3
 8002828:	627b      	str	r3, [r7, #36]	; 0x24
 800282a:	2302      	movs	r3, #2
 800282c:	623b      	str	r3, [r7, #32]
 800282e:	6a3b      	ldr	r3, [r7, #32]
 8002830:	fa93 f3a3 	rbit	r3, r3
 8002834:	61fb      	str	r3, [r7, #28]
  return result;
 8002836:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002838:	fab3 f383 	clz	r3, r3
 800283c:	b2db      	uxtb	r3, r3
 800283e:	095b      	lsrs	r3, r3, #5
 8002840:	b2db      	uxtb	r3, r3
 8002842:	f043 0302 	orr.w	r3, r3, #2
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d102      	bne.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800284c:	4b39      	ldr	r3, [pc, #228]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800284e:	6a1b      	ldr	r3, [r3, #32]
 8002850:	e007      	b.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002852:	2302      	movs	r3, #2
 8002854:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	fa93 f3a3 	rbit	r3, r3
 800285c:	617b      	str	r3, [r7, #20]
 800285e:	4b35      	ldr	r3, [pc, #212]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	2202      	movs	r2, #2
 8002864:	613a      	str	r2, [r7, #16]
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	fa92 f2a2 	rbit	r2, r2
 800286c:	60fa      	str	r2, [r7, #12]
  return result;
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	fab2 f282 	clz	r2, r2
 8002874:	b2d2      	uxtb	r2, r2
 8002876:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	f002 021f 	and.w	r2, r2, #31
 8002880:	2101      	movs	r1, #1
 8002882:	fa01 f202 	lsl.w	r2, r1, r2
 8002886:	4013      	ands	r3, r2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d0bd      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800288c:	4b29      	ldr	r3, [pc, #164]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	4926      	ldr	r1, [pc, #152]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800289a:	4313      	orrs	r3, r2
 800289c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800289e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d105      	bne.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028a6:	4b23      	ldr	r3, [pc, #140]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	4a22      	ldr	r2, [pc, #136]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80028ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028b0:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d008      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028be:	4b1d      	ldr	r3, [pc, #116]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	f023 0203 	bic.w	r2, r3, #3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	491a      	ldr	r1, [pc, #104]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0320 	and.w	r3, r3, #32
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d008      	beq.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028dc:	4b15      	ldr	r3, [pc, #84]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80028de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e0:	f023 0210 	bic.w	r2, r3, #16
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	4912      	ldr	r1, [pc, #72]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d008      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80028fa:	4b0e      	ldr	r3, [pc, #56]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80028fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fe:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	490b      	ldr	r1, [pc, #44]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002908:	4313      	orrs	r3, r2
 800290a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d008      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002918:	4b06      	ldr	r3, [pc, #24]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800291a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	695b      	ldr	r3, [r3, #20]
 8002924:	4903      	ldr	r1, [pc, #12]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002926:	4313      	orrs	r3, r2
 8002928:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3748      	adds	r7, #72	; 0x48
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40021000 	.word	0x40021000
 8002938:	40007000 	.word	0x40007000
 800293c:	10908100 	.word	0x10908100

08002940 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e073      	b.n	8002a3e <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	7f5b      	ldrb	r3, [r3, #29]
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	d105      	bne.n	800296c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f7fd feee 	bl	8000748 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2202      	movs	r2, #2
 8002970:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	f003 0310 	and.w	r3, r3, #16
 800297c:	2b10      	cmp	r3, #16
 800297e:	d055      	beq.n	8002a2c <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	22ca      	movs	r2, #202	; 0xca
 8002986:	625a      	str	r2, [r3, #36]	; 0x24
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2253      	movs	r2, #83	; 0x53
 800298e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 f9fb 	bl	8002d8c <RTC_EnterInitMode>
 8002996:	4603      	mov	r3, r0
 8002998:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800299a:	7bfb      	ldrb	r3, [r7, #15]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d12c      	bne.n	80029fa <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	6812      	ldr	r2, [r2, #0]
 80029aa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80029ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029b2:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6899      	ldr	r1, [r3, #8]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685a      	ldr	r2, [r3, #4]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	431a      	orrs	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	431a      	orrs	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	430a      	orrs	r2, r1
 80029d0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	68d2      	ldr	r2, [r2, #12]
 80029da:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6919      	ldr	r1, [r3, #16]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	041a      	lsls	r2, r3, #16
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	430a      	orrs	r2, r1
 80029ee:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 fa02 	bl	8002dfa <RTC_ExitInitMode>
 80029f6:	4603      	mov	r3, r0
 80029f8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80029fa:	7bfb      	ldrb	r3, [r7, #15]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d110      	bne.n	8002a22 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a0e:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	699a      	ldr	r2, [r3, #24]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	22ff      	movs	r2, #255	; 0xff
 8002a28:	625a      	str	r2, [r3, #36]	; 0x24
 8002a2a:	e001      	b.n	8002a30 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002a30:	7bfb      	ldrb	r3, [r7, #15]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d102      	bne.n	8002a3c <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002a46:	b590      	push	{r4, r7, lr}
 8002a48:	b087      	sub	sp, #28
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	60f8      	str	r0, [r7, #12]
 8002a4e:	60b9      	str	r1, [r7, #8]
 8002a50:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002a52:	2300      	movs	r3, #0
 8002a54:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	7f1b      	ldrb	r3, [r3, #28]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d101      	bne.n	8002a62 <HAL_RTC_SetTime+0x1c>
 8002a5e:	2302      	movs	r3, #2
 8002a60:	e087      	b.n	8002b72 <HAL_RTC_SetTime+0x12c>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2201      	movs	r2, #1
 8002a66:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d126      	bne.n	8002ac2 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d102      	bne.n	8002a88 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	2200      	movs	r2, #0
 8002a86:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f000 f9d9 	bl	8002e44 <RTC_ByteToBcd2>
 8002a92:	4603      	mov	r3, r0
 8002a94:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	785b      	ldrb	r3, [r3, #1]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f000 f9d2 	bl	8002e44 <RTC_ByteToBcd2>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002aa4:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	789b      	ldrb	r3, [r3, #2]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 f9ca 	bl	8002e44 <RTC_ByteToBcd2>
 8002ab0:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002ab2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	78db      	ldrb	r3, [r3, #3]
 8002aba:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002abc:	4313      	orrs	r3, r2
 8002abe:	617b      	str	r3, [r7, #20]
 8002ac0:	e018      	b.n	8002af4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d102      	bne.n	8002ad6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	785b      	ldrb	r3, [r3, #1]
 8002ae0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002ae2:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002ae4:	68ba      	ldr	r2, [r7, #8]
 8002ae6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002ae8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	78db      	ldrb	r3, [r3, #3]
 8002aee:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002af0:	4313      	orrs	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	22ca      	movs	r2, #202	; 0xca
 8002afa:	625a      	str	r2, [r3, #36]	; 0x24
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2253      	movs	r2, #83	; 0x53
 8002b02:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f000 f941 	bl	8002d8c <RTC_EnterInitMode>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002b0e:	7cfb      	ldrb	r3, [r7, #19]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d120      	bne.n	8002b56 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002b1e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002b22:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689a      	ldr	r2, [r3, #8]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b32:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6899      	ldr	r1, [r3, #8]
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	68da      	ldr	r2, [r3, #12]
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	431a      	orrs	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f000 f954 	bl	8002dfa <RTC_ExitInitMode>
 8002b52:	4603      	mov	r3, r0
 8002b54:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002b56:	7cfb      	ldrb	r3, [r7, #19]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d102      	bne.n	8002b62 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	22ff      	movs	r2, #255	; 0xff
 8002b68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	771a      	strb	r2, [r3, #28]

  return status;
 8002b70:	7cfb      	ldrb	r3, [r7, #19]
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	371c      	adds	r7, #28
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd90      	pop	{r4, r7, pc}

08002b7a <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b086      	sub	sp, #24
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	60f8      	str	r0, [r7, #12]
 8002b82:	60b9      	str	r1, [r7, #8]
 8002b84:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002b86:	2300      	movs	r3, #0
 8002b88:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002bac:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002bb0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	0c1b      	lsrs	r3, r3, #16
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bbc:	b2da      	uxtb	r2, r3
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	0a1b      	lsrs	r3, r3, #8
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bda:	b2da      	uxtb	r2, r3
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	0d9b      	lsrs	r3, r3, #22
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	b2da      	uxtb	r2, r3
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d11a      	bne.n	8002c2c <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f000 f940 	bl	8002e80 <RTC_Bcd2ToByte>
 8002c00:	4603      	mov	r3, r0
 8002c02:	461a      	mov	r2, r3
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	785b      	ldrb	r3, [r3, #1]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f000 f937 	bl	8002e80 <RTC_Bcd2ToByte>
 8002c12:	4603      	mov	r3, r0
 8002c14:	461a      	mov	r2, r3
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	789b      	ldrb	r3, [r3, #2]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f000 f92e 	bl	8002e80 <RTC_Bcd2ToByte>
 8002c24:	4603      	mov	r3, r0
 8002c26:	461a      	mov	r2, r3
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3718      	adds	r7, #24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002c36:	b590      	push	{r4, r7, lr}
 8002c38:	b087      	sub	sp, #28
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	60f8      	str	r0, [r7, #12]
 8002c3e:	60b9      	str	r1, [r7, #8]
 8002c40:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002c42:	2300      	movs	r3, #0
 8002c44:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	7f1b      	ldrb	r3, [r3, #28]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d101      	bne.n	8002c52 <HAL_RTC_SetDate+0x1c>
 8002c4e:	2302      	movs	r3, #2
 8002c50:	e071      	b.n	8002d36 <HAL_RTC_SetDate+0x100>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2201      	movs	r2, #1
 8002c56:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d10e      	bne.n	8002c82 <HAL_RTC_SetDate+0x4c>
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	785b      	ldrb	r3, [r3, #1]
 8002c68:	f003 0310 	and.w	r3, r3, #16
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d008      	beq.n	8002c82 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	785b      	ldrb	r3, [r3, #1]
 8002c74:	f023 0310 	bic.w	r3, r3, #16
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	330a      	adds	r3, #10
 8002c7c:	b2da      	uxtb	r2, r3
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d11c      	bne.n	8002cc2 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	78db      	ldrb	r3, [r3, #3]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f000 f8d9 	bl	8002e44 <RTC_ByteToBcd2>
 8002c92:	4603      	mov	r3, r0
 8002c94:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	785b      	ldrb	r3, [r3, #1]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 f8d2 	bl	8002e44 <RTC_ByteToBcd2>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002ca4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	789b      	ldrb	r3, [r3, #2]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f000 f8ca 	bl	8002e44 <RTC_ByteToBcd2>
 8002cb0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002cb2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	617b      	str	r3, [r7, #20]
 8002cc0:	e00e      	b.n	8002ce0 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	78db      	ldrb	r3, [r3, #3]
 8002cc6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	785b      	ldrb	r3, [r3, #1]
 8002ccc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002cce:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002cd0:	68ba      	ldr	r2, [r7, #8]
 8002cd2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002cd4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	22ca      	movs	r2, #202	; 0xca
 8002ce6:	625a      	str	r2, [r3, #36]	; 0x24
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2253      	movs	r2, #83	; 0x53
 8002cee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f000 f84b 	bl	8002d8c <RTC_EnterInitMode>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002cfa:	7cfb      	ldrb	r3, [r7, #19]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10c      	bne.n	8002d1a <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002d0a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002d0e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f000 f872 	bl	8002dfa <RTC_ExitInitMode>
 8002d16:	4603      	mov	r3, r0
 8002d18:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002d1a:	7cfb      	ldrb	r3, [r7, #19]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d102      	bne.n	8002d26 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2201      	movs	r2, #1
 8002d24:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	22ff      	movs	r2, #255	; 0xff
 8002d2c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	771a      	strb	r2, [r3, #28]

  return status;
 8002d34:	7cfb      	ldrb	r3, [r7, #19]
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	371c      	adds	r7, #28
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd90      	pop	{r4, r7, pc}
	...

08002d40 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a0d      	ldr	r2, [pc, #52]	; (8002d88 <HAL_RTC_WaitForSynchro+0x48>)
 8002d52:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d54:	f7fd ffba 	bl	8000ccc <HAL_GetTick>
 8002d58:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002d5a:	e009      	b.n	8002d70 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002d5c:	f7fd ffb6 	bl	8000ccc <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d6a:	d901      	bls.n	8002d70 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e007      	b.n	8002d80 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	f003 0320 	and.w	r3, r3, #32
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d0ee      	beq.n	8002d5c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3710      	adds	r7, #16
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	00017f5f 	.word	0x00017f5f

08002d8c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d94:	2300      	movs	r3, #0
 8002d96:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d122      	bne.n	8002df0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68da      	ldr	r2, [r3, #12]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002db8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002dba:	f7fd ff87 	bl	8000ccc <HAL_GetTick>
 8002dbe:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002dc0:	e00c      	b.n	8002ddc <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002dc2:	f7fd ff83 	bl	8000ccc <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dd0:	d904      	bls.n	8002ddc <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2204      	movs	r2, #4
 8002dd6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d102      	bne.n	8002df0 <RTC_EnterInitMode+0x64>
 8002dea:	7bfb      	ldrb	r3, [r7, #15]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d1e8      	bne.n	8002dc2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b084      	sub	sp, #16
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e02:	2300      	movs	r3, #0
 8002e04:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68da      	ldr	r2, [r3, #12]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e14:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f003 0320 	and.w	r3, r3, #32
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d10a      	bne.n	8002e3a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f7ff ff8b 	bl	8002d40 <HAL_RTC_WaitForSynchro>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d004      	beq.n	8002e3a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2204      	movs	r2, #4
 8002e34:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3710      	adds	r7, #16
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8002e52:	e005      	b.n	8002e60 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	3301      	adds	r3, #1
 8002e58:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8002e5a:	79fb      	ldrb	r3, [r7, #7]
 8002e5c:	3b0a      	subs	r3, #10
 8002e5e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8002e60:	79fb      	ldrb	r3, [r7, #7]
 8002e62:	2b09      	cmp	r3, #9
 8002e64:	d8f6      	bhi.n	8002e54 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	011b      	lsls	r3, r3, #4
 8002e6c:	b2da      	uxtb	r2, r3
 8002e6e:	79fb      	ldrb	r3, [r7, #7]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	b2db      	uxtb	r3, r3
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3714      	adds	r7, #20
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	4603      	mov	r3, r0
 8002e88:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8002e8e:	79fb      	ldrb	r3, [r7, #7]
 8002e90:	091b      	lsrs	r3, r3, #4
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	461a      	mov	r2, r3
 8002e96:	4613      	mov	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4413      	add	r3, r2
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	b2da      	uxtb	r2, r3
 8002ea4:	79fb      	ldrb	r3, [r7, #7]
 8002ea6:	f003 030f 	and.w	r3, r3, #15
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	4413      	add	r3, r2
 8002eae:	b2db      	uxtb	r3, r3
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3714      	adds	r7, #20
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e095      	b.n	8002ffa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d108      	bne.n	8002ee8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ede:	d009      	beq.n	8002ef4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	61da      	str	r2, [r3, #28]
 8002ee6:	e005      	b.n	8002ef4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d106      	bne.n	8002f14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f7fd fc7e 	bl	8000810 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2202      	movs	r2, #2
 8002f18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f2a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f34:	d902      	bls.n	8002f3c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002f36:	2300      	movs	r3, #0
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	e002      	b.n	8002f42 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002f3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f40:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002f4a:	d007      	beq.n	8002f5c <HAL_SPI_Init+0xa0>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f54:	d002      	beq.n	8002f5c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002f6c:	431a      	orrs	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	431a      	orrs	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	f003 0301 	and.w	r3, r3, #1
 8002f80:	431a      	orrs	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	69db      	ldr	r3, [r3, #28]
 8002f90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f94:	431a      	orrs	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f9e:	ea42 0103 	orr.w	r1, r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	0c1b      	lsrs	r3, r3, #16
 8002fb8:	f003 0204 	and.w	r2, r3, #4
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	f003 0310 	and.w	r3, r3, #16
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fca:	f003 0308 	and.w	r3, r3, #8
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002fd8:	ea42 0103 	orr.w	r1, r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b088      	sub	sp, #32
 8003006:	af00      	add	r7, sp, #0
 8003008:	60f8      	str	r0, [r7, #12]
 800300a:	60b9      	str	r1, [r7, #8]
 800300c:	603b      	str	r3, [r7, #0]
 800300e:	4613      	mov	r3, r2
 8003010:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003012:	2300      	movs	r3, #0
 8003014:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800301c:	2b01      	cmp	r3, #1
 800301e:	d101      	bne.n	8003024 <HAL_SPI_Transmit+0x22>
 8003020:	2302      	movs	r3, #2
 8003022:	e15f      	b.n	80032e4 <HAL_SPI_Transmit+0x2e2>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800302c:	f7fd fe4e 	bl	8000ccc <HAL_GetTick>
 8003030:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003032:	88fb      	ldrh	r3, [r7, #6]
 8003034:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b01      	cmp	r3, #1
 8003040:	d002      	beq.n	8003048 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003042:	2302      	movs	r3, #2
 8003044:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003046:	e148      	b.n	80032da <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d002      	beq.n	8003054 <HAL_SPI_Transmit+0x52>
 800304e:	88fb      	ldrh	r3, [r7, #6]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d102      	bne.n	800305a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003058:	e13f      	b.n	80032da <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2203      	movs	r2, #3
 800305e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	68ba      	ldr	r2, [r7, #8]
 800306c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	88fa      	ldrh	r2, [r7, #6]
 8003072:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	88fa      	ldrh	r2, [r7, #6]
 8003078:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030a4:	d10f      	bne.n	80030c6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030c4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d0:	2b40      	cmp	r3, #64	; 0x40
 80030d2:	d007      	beq.n	80030e4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030ec:	d94f      	bls.n	800318e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d002      	beq.n	80030fc <HAL_SPI_Transmit+0xfa>
 80030f6:	8afb      	ldrh	r3, [r7, #22]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d142      	bne.n	8003182 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003100:	881a      	ldrh	r2, [r3, #0]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310c:	1c9a      	adds	r2, r3, #2
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003116:	b29b      	uxth	r3, r3
 8003118:	3b01      	subs	r3, #1
 800311a:	b29a      	uxth	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003120:	e02f      	b.n	8003182 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b02      	cmp	r3, #2
 800312e:	d112      	bne.n	8003156 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003134:	881a      	ldrh	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003140:	1c9a      	adds	r2, r3, #2
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800314a:	b29b      	uxth	r3, r3
 800314c:	3b01      	subs	r3, #1
 800314e:	b29a      	uxth	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003154:	e015      	b.n	8003182 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003156:	f7fd fdb9 	bl	8000ccc <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	429a      	cmp	r2, r3
 8003164:	d803      	bhi.n	800316e <HAL_SPI_Transmit+0x16c>
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800316c:	d102      	bne.n	8003174 <HAL_SPI_Transmit+0x172>
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d106      	bne.n	8003182 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003180:	e0ab      	b.n	80032da <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003186:	b29b      	uxth	r3, r3
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1ca      	bne.n	8003122 <HAL_SPI_Transmit+0x120>
 800318c:	e080      	b.n	8003290 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d002      	beq.n	800319c <HAL_SPI_Transmit+0x19a>
 8003196:	8afb      	ldrh	r3, [r7, #22]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d174      	bne.n	8003286 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d912      	bls.n	80031cc <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031aa:	881a      	ldrh	r2, [r3, #0]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b6:	1c9a      	adds	r2, r3, #2
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	3b02      	subs	r3, #2
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80031ca:	e05c      	b.n	8003286 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	330c      	adds	r3, #12
 80031d6:	7812      	ldrb	r2, [r2, #0]
 80031d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031de:	1c5a      	adds	r2, r3, #1
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	3b01      	subs	r3, #1
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80031f2:	e048      	b.n	8003286 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d12b      	bne.n	800325a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003206:	b29b      	uxth	r3, r3
 8003208:	2b01      	cmp	r3, #1
 800320a:	d912      	bls.n	8003232 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003210:	881a      	ldrh	r2, [r3, #0]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321c:	1c9a      	adds	r2, r3, #2
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003226:	b29b      	uxth	r3, r3
 8003228:	3b02      	subs	r3, #2
 800322a:	b29a      	uxth	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003230:	e029      	b.n	8003286 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	330c      	adds	r3, #12
 800323c:	7812      	ldrb	r2, [r2, #0]
 800323e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003244:	1c5a      	adds	r2, r3, #1
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800324e:	b29b      	uxth	r3, r3
 8003250:	3b01      	subs	r3, #1
 8003252:	b29a      	uxth	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003258:	e015      	b.n	8003286 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800325a:	f7fd fd37 	bl	8000ccc <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	429a      	cmp	r2, r3
 8003268:	d803      	bhi.n	8003272 <HAL_SPI_Transmit+0x270>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003270:	d102      	bne.n	8003278 <HAL_SPI_Transmit+0x276>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d106      	bne.n	8003286 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003284:	e029      	b.n	80032da <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800328a:	b29b      	uxth	r3, r3
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1b1      	bne.n	80031f4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	6839      	ldr	r1, [r7, #0]
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f000 fcf9 	bl	8003c8c <SPI_EndRxTxTransaction>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d002      	beq.n	80032a6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2220      	movs	r2, #32
 80032a4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10a      	bne.n	80032c4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032ae:	2300      	movs	r3, #0
 80032b0:	613b      	str	r3, [r7, #16]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	613b      	str	r3, [r7, #16]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	613b      	str	r3, [r7, #16]
 80032c2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d002      	beq.n	80032d2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	77fb      	strb	r3, [r7, #31]
 80032d0:	e003      	b.n	80032da <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80032e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3720      	adds	r7, #32
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b088      	sub	sp, #32
 80032f0:	af02      	add	r7, sp, #8
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	603b      	str	r3, [r7, #0]
 80032f8:	4613      	mov	r3, r2
 80032fa:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80032fc:	2300      	movs	r3, #0
 80032fe:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b01      	cmp	r3, #1
 800330a:	d002      	beq.n	8003312 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800330c:	2302      	movs	r3, #2
 800330e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003310:	e11a      	b.n	8003548 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800331a:	d112      	bne.n	8003342 <HAL_SPI_Receive+0x56>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d10e      	bne.n	8003342 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2204      	movs	r2, #4
 8003328:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800332c:	88fa      	ldrh	r2, [r7, #6]
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	9300      	str	r3, [sp, #0]
 8003332:	4613      	mov	r3, r2
 8003334:	68ba      	ldr	r2, [r7, #8]
 8003336:	68b9      	ldr	r1, [r7, #8]
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f000 f90e 	bl	800355a <HAL_SPI_TransmitReceive>
 800333e:	4603      	mov	r3, r0
 8003340:	e107      	b.n	8003552 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003348:	2b01      	cmp	r3, #1
 800334a:	d101      	bne.n	8003350 <HAL_SPI_Receive+0x64>
 800334c:	2302      	movs	r3, #2
 800334e:	e100      	b.n	8003552 <HAL_SPI_Receive+0x266>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003358:	f7fd fcb8 	bl	8000ccc <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d002      	beq.n	800336a <HAL_SPI_Receive+0x7e>
 8003364:	88fb      	ldrh	r3, [r7, #6]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d102      	bne.n	8003370 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800336e:	e0eb      	b.n	8003548 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2204      	movs	r2, #4
 8003374:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	68ba      	ldr	r2, [r7, #8]
 8003382:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	88fa      	ldrh	r2, [r7, #6]
 8003388:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	88fa      	ldrh	r2, [r7, #6]
 8003390:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80033ba:	d908      	bls.n	80033ce <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	685a      	ldr	r2, [r3, #4]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80033ca:	605a      	str	r2, [r3, #4]
 80033cc:	e007      	b.n	80033de <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80033dc:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033e6:	d10f      	bne.n	8003408 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033f6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003406:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003412:	2b40      	cmp	r3, #64	; 0x40
 8003414:	d007      	beq.n	8003426 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003424:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800342e:	d86f      	bhi.n	8003510 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003430:	e034      	b.n	800349c <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	2b01      	cmp	r3, #1
 800343e:	d117      	bne.n	8003470 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f103 020c 	add.w	r2, r3, #12
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344c:	7812      	ldrb	r2, [r2, #0]
 800344e:	b2d2      	uxtb	r2, r2
 8003450:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	1c5a      	adds	r2, r3, #1
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003462:	b29b      	uxth	r3, r3
 8003464:	3b01      	subs	r3, #1
 8003466:	b29a      	uxth	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800346e:	e015      	b.n	800349c <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003470:	f7fd fc2c 	bl	8000ccc <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	429a      	cmp	r2, r3
 800347e:	d803      	bhi.n	8003488 <HAL_SPI_Receive+0x19c>
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003486:	d102      	bne.n	800348e <HAL_SPI_Receive+0x1a2>
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d106      	bne.n	800349c <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800349a:	e055      	b.n	8003548 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1c4      	bne.n	8003432 <HAL_SPI_Receive+0x146>
 80034a8:	e038      	b.n	800351c <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d115      	bne.n	80034e4 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68da      	ldr	r2, [r3, #12]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	b292      	uxth	r2, r2
 80034c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ca:	1c9a      	adds	r2, r3, #2
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	3b01      	subs	r3, #1
 80034da:	b29a      	uxth	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80034e2:	e015      	b.n	8003510 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034e4:	f7fd fbf2 	bl	8000ccc <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d803      	bhi.n	80034fc <HAL_SPI_Receive+0x210>
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034fa:	d102      	bne.n	8003502 <HAL_SPI_Receive+0x216>
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d106      	bne.n	8003510 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800350e:	e01b      	b.n	8003548 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003516:	b29b      	uxth	r3, r3
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1c6      	bne.n	80034aa <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	6839      	ldr	r1, [r7, #0]
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f000 fb5b 	bl	8003bdc <SPI_EndRxTransaction>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d002      	beq.n	8003532 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2220      	movs	r2, #32
 8003530:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003536:	2b00      	cmp	r3, #0
 8003538:	d002      	beq.n	8003540 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	75fb      	strb	r3, [r7, #23]
 800353e:	e003      	b.n	8003548 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003550:	7dfb      	ldrb	r3, [r7, #23]
}
 8003552:	4618      	mov	r0, r3
 8003554:	3718      	adds	r7, #24
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b08a      	sub	sp, #40	; 0x28
 800355e:	af00      	add	r7, sp, #0
 8003560:	60f8      	str	r0, [r7, #12]
 8003562:	60b9      	str	r1, [r7, #8]
 8003564:	607a      	str	r2, [r7, #4]
 8003566:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003568:	2301      	movs	r3, #1
 800356a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800356c:	2300      	movs	r3, #0
 800356e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003578:	2b01      	cmp	r3, #1
 800357a:	d101      	bne.n	8003580 <HAL_SPI_TransmitReceive+0x26>
 800357c:	2302      	movs	r3, #2
 800357e:	e20a      	b.n	8003996 <HAL_SPI_TransmitReceive+0x43c>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003588:	f7fd fba0 	bl	8000ccc <HAL_GetTick>
 800358c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003594:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800359c:	887b      	ldrh	r3, [r7, #2]
 800359e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80035a0:	887b      	ldrh	r3, [r7, #2]
 80035a2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80035a4:	7efb      	ldrb	r3, [r7, #27]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d00e      	beq.n	80035c8 <HAL_SPI_TransmitReceive+0x6e>
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035b0:	d106      	bne.n	80035c0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d102      	bne.n	80035c0 <HAL_SPI_TransmitReceive+0x66>
 80035ba:	7efb      	ldrb	r3, [r7, #27]
 80035bc:	2b04      	cmp	r3, #4
 80035be:	d003      	beq.n	80035c8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80035c0:	2302      	movs	r3, #2
 80035c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80035c6:	e1e0      	b.n	800398a <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d005      	beq.n	80035da <HAL_SPI_TransmitReceive+0x80>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d002      	beq.n	80035da <HAL_SPI_TransmitReceive+0x80>
 80035d4:	887b      	ldrh	r3, [r7, #2]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d103      	bne.n	80035e2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80035e0:	e1d3      	b.n	800398a <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b04      	cmp	r3, #4
 80035ec:	d003      	beq.n	80035f6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2205      	movs	r2, #5
 80035f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	887a      	ldrh	r2, [r7, #2]
 8003606:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	887a      	ldrh	r2, [r7, #2]
 800360e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	887a      	ldrh	r2, [r7, #2]
 800361c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	887a      	ldrh	r2, [r7, #2]
 8003622:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003638:	d802      	bhi.n	8003640 <HAL_SPI_TransmitReceive+0xe6>
 800363a:	8a3b      	ldrh	r3, [r7, #16]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d908      	bls.n	8003652 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800364e:	605a      	str	r2, [r3, #4]
 8003650:	e007      	b.n	8003662 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003660:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800366c:	2b40      	cmp	r3, #64	; 0x40
 800366e:	d007      	beq.n	8003680 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800367e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003688:	f240 8081 	bls.w	800378e <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d002      	beq.n	800369a <HAL_SPI_TransmitReceive+0x140>
 8003694:	8a7b      	ldrh	r3, [r7, #18]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d16d      	bne.n	8003776 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369e:	881a      	ldrh	r2, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036aa:	1c9a      	adds	r2, r3, #2
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	3b01      	subs	r3, #1
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036be:	e05a      	b.n	8003776 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d11b      	bne.n	8003706 <HAL_SPI_TransmitReceive+0x1ac>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d016      	beq.n	8003706 <HAL_SPI_TransmitReceive+0x1ac>
 80036d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d113      	bne.n	8003706 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e2:	881a      	ldrh	r2, [r3, #0]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ee:	1c9a      	adds	r2, r3, #2
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	3b01      	subs	r3, #1
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003702:	2300      	movs	r3, #0
 8003704:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f003 0301 	and.w	r3, r3, #1
 8003710:	2b01      	cmp	r3, #1
 8003712:	d11c      	bne.n	800374e <HAL_SPI_TransmitReceive+0x1f4>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800371a:	b29b      	uxth	r3, r3
 800371c:	2b00      	cmp	r3, #0
 800371e:	d016      	beq.n	800374e <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68da      	ldr	r2, [r3, #12]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372a:	b292      	uxth	r2, r2
 800372c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	1c9a      	adds	r2, r3, #2
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800373e:	b29b      	uxth	r3, r3
 8003740:	3b01      	subs	r3, #1
 8003742:	b29a      	uxth	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800374a:	2301      	movs	r3, #1
 800374c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800374e:	f7fd fabd 	bl	8000ccc <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800375a:	429a      	cmp	r2, r3
 800375c:	d80b      	bhi.n	8003776 <HAL_SPI_TransmitReceive+0x21c>
 800375e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003764:	d007      	beq.n	8003776 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8003774:	e109      	b.n	800398a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800377a:	b29b      	uxth	r3, r3
 800377c:	2b00      	cmp	r3, #0
 800377e:	d19f      	bne.n	80036c0 <HAL_SPI_TransmitReceive+0x166>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003786:	b29b      	uxth	r3, r3
 8003788:	2b00      	cmp	r3, #0
 800378a:	d199      	bne.n	80036c0 <HAL_SPI_TransmitReceive+0x166>
 800378c:	e0e3      	b.n	8003956 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_SPI_TransmitReceive+0x244>
 8003796:	8a7b      	ldrh	r3, [r7, #18]
 8003798:	2b01      	cmp	r3, #1
 800379a:	f040 80cf 	bne.w	800393c <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d912      	bls.n	80037ce <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ac:	881a      	ldrh	r2, [r3, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b8:	1c9a      	adds	r2, r3, #2
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	3b02      	subs	r3, #2
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80037cc:	e0b6      	b.n	800393c <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	330c      	adds	r3, #12
 80037d8:	7812      	ldrb	r2, [r2, #0]
 80037da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e0:	1c5a      	adds	r2, r3, #1
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	3b01      	subs	r3, #1
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037f4:	e0a2      	b.n	800393c <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b02      	cmp	r3, #2
 8003802:	d134      	bne.n	800386e <HAL_SPI_TransmitReceive+0x314>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003808:	b29b      	uxth	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d02f      	beq.n	800386e <HAL_SPI_TransmitReceive+0x314>
 800380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003810:	2b01      	cmp	r3, #1
 8003812:	d12c      	bne.n	800386e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003818:	b29b      	uxth	r3, r3
 800381a:	2b01      	cmp	r3, #1
 800381c:	d912      	bls.n	8003844 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003822:	881a      	ldrh	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382e:	1c9a      	adds	r2, r3, #2
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003838:	b29b      	uxth	r3, r3
 800383a:	3b02      	subs	r3, #2
 800383c:	b29a      	uxth	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003842:	e012      	b.n	800386a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	330c      	adds	r3, #12
 800384e:	7812      	ldrb	r2, [r2, #0]
 8003850:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003856:	1c5a      	adds	r2, r3, #1
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003860:	b29b      	uxth	r3, r3
 8003862:	3b01      	subs	r3, #1
 8003864:	b29a      	uxth	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800386a:	2300      	movs	r3, #0
 800386c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b01      	cmp	r3, #1
 800387a:	d148      	bne.n	800390e <HAL_SPI_TransmitReceive+0x3b4>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003882:	b29b      	uxth	r3, r3
 8003884:	2b00      	cmp	r3, #0
 8003886:	d042      	beq.n	800390e <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800388e:	b29b      	uxth	r3, r3
 8003890:	2b01      	cmp	r3, #1
 8003892:	d923      	bls.n	80038dc <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68da      	ldr	r2, [r3, #12]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389e:	b292      	uxth	r2, r2
 80038a0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	1c9a      	adds	r2, r3, #2
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	3b02      	subs	r3, #2
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d81f      	bhi.n	800390a <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	685a      	ldr	r2, [r3, #4]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80038d8:	605a      	str	r2, [r3, #4]
 80038da:	e016      	b.n	800390a <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f103 020c 	add.w	r2, r3, #12
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e8:	7812      	ldrb	r2, [r2, #0]
 80038ea:	b2d2      	uxtb	r2, r2
 80038ec:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	1c5a      	adds	r2, r3, #1
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038fe:	b29b      	uxth	r3, r3
 8003900:	3b01      	subs	r3, #1
 8003902:	b29a      	uxth	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800390a:	2301      	movs	r3, #1
 800390c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800390e:	f7fd f9dd 	bl	8000ccc <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800391a:	429a      	cmp	r2, r3
 800391c:	d803      	bhi.n	8003926 <HAL_SPI_TransmitReceive+0x3cc>
 800391e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003924:	d102      	bne.n	800392c <HAL_SPI_TransmitReceive+0x3d2>
 8003926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003928:	2b00      	cmp	r3, #0
 800392a:	d107      	bne.n	800393c <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800393a:	e026      	b.n	800398a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003940:	b29b      	uxth	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	f47f af57 	bne.w	80037f6 <HAL_SPI_TransmitReceive+0x29c>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800394e:	b29b      	uxth	r3, r3
 8003950:	2b00      	cmp	r3, #0
 8003952:	f47f af50 	bne.w	80037f6 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003956:	69fa      	ldr	r2, [r7, #28]
 8003958:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f000 f996 	bl	8003c8c <SPI_EndRxTxTransaction>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d005      	beq.n	8003972 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2220      	movs	r2, #32
 8003970:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003976:	2b00      	cmp	r3, #0
 8003978:	d003      	beq.n	8003982 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003980:	e003      	b.n	800398a <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003992:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003996:	4618      	mov	r0, r3
 8003998:	3728      	adds	r7, #40	; 0x28
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
	...

080039a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b088      	sub	sp, #32
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	603b      	str	r3, [r7, #0]
 80039ac:	4613      	mov	r3, r2
 80039ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80039b0:	f7fd f98c 	bl	8000ccc <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b8:	1a9b      	subs	r3, r3, r2
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	4413      	add	r3, r2
 80039be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80039c0:	f7fd f984 	bl	8000ccc <HAL_GetTick>
 80039c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80039c6:	4b39      	ldr	r3, [pc, #228]	; (8003aac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	015b      	lsls	r3, r3, #5
 80039cc:	0d1b      	lsrs	r3, r3, #20
 80039ce:	69fa      	ldr	r2, [r7, #28]
 80039d0:	fb02 f303 	mul.w	r3, r2, r3
 80039d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039d6:	e054      	b.n	8003a82 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039de:	d050      	beq.n	8003a82 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80039e0:	f7fd f974 	bl	8000ccc <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	69fa      	ldr	r2, [r7, #28]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d902      	bls.n	80039f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d13d      	bne.n	8003a72 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	685a      	ldr	r2, [r3, #4]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a0e:	d111      	bne.n	8003a34 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a18:	d004      	beq.n	8003a24 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a22:	d107      	bne.n	8003a34 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a3c:	d10f      	bne.n	8003a5e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a4c:	601a      	str	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e017      	b.n	8003aa2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d101      	bne.n	8003a7c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	68ba      	ldr	r2, [r7, #8]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	bf0c      	ite	eq
 8003a92:	2301      	moveq	r3, #1
 8003a94:	2300      	movne	r3, #0
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	461a      	mov	r2, r3
 8003a9a:	79fb      	ldrb	r3, [r7, #7]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d19b      	bne.n	80039d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3720      	adds	r7, #32
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	20000038 	.word	0x20000038

08003ab0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b08a      	sub	sp, #40	; 0x28
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
 8003abc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003ac2:	f7fd f903 	bl	8000ccc <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aca:	1a9b      	subs	r3, r3, r2
 8003acc:	683a      	ldr	r2, [r7, #0]
 8003ace:	4413      	add	r3, r2
 8003ad0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003ad2:	f7fd f8fb 	bl	8000ccc <HAL_GetTick>
 8003ad6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	330c      	adds	r3, #12
 8003ade:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003ae0:	4b3d      	ldr	r3, [pc, #244]	; (8003bd8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4413      	add	r3, r2
 8003aea:	00da      	lsls	r2, r3, #3
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	0d1b      	lsrs	r3, r3, #20
 8003af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003af2:	fb02 f303 	mul.w	r3, r2, r3
 8003af6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003af8:	e060      	b.n	8003bbc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003b00:	d107      	bne.n	8003b12 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d104      	bne.n	8003b12 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003b10:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b18:	d050      	beq.n	8003bbc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b1a:	f7fd f8d7 	bl	8000ccc <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	6a3b      	ldr	r3, [r7, #32]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d902      	bls.n	8003b30 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d13d      	bne.n	8003bac <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	685a      	ldr	r2, [r3, #4]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b3e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b48:	d111      	bne.n	8003b6e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b52:	d004      	beq.n	8003b5e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b5c:	d107      	bne.n	8003b6e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b6c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b76:	d10f      	bne.n	8003b98 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b96:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e010      	b.n	8003bce <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689a      	ldr	r2, [r3, #8]
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d196      	bne.n	8003afa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3728      	adds	r7, #40	; 0x28
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	20000038 	.word	0x20000038

08003bdc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af02      	add	r7, sp, #8
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bf0:	d111      	bne.n	8003c16 <SPI_EndRxTransaction+0x3a>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bfa:	d004      	beq.n	8003c06 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c04:	d107      	bne.n	8003c16 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c14:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	9300      	str	r3, [sp, #0]
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	2180      	movs	r1, #128	; 0x80
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f7ff febd 	bl	80039a0 <SPI_WaitFlagStateUntilTimeout>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d007      	beq.n	8003c3c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c30:	f043 0220 	orr.w	r2, r3, #32
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e023      	b.n	8003c84 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c44:	d11d      	bne.n	8003c82 <SPI_EndRxTransaction+0xa6>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c4e:	d004      	beq.n	8003c5a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c58:	d113      	bne.n	8003c82 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f7ff ff22 	bl	8003ab0 <SPI_WaitFifoStateUntilTimeout>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d007      	beq.n	8003c82 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c76:	f043 0220 	orr.w	r2, r3, #32
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e000      	b.n	8003c84 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3710      	adds	r7, #16
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b086      	sub	sp, #24
 8003c90:	af02      	add	r7, sp, #8
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	9300      	str	r3, [sp, #0]
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003ca4:	68f8      	ldr	r0, [r7, #12]
 8003ca6:	f7ff ff03 	bl	8003ab0 <SPI_WaitFifoStateUntilTimeout>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d007      	beq.n	8003cc0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cb4:	f043 0220 	orr.w	r2, r3, #32
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e027      	b.n	8003d10 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	2180      	movs	r1, #128	; 0x80
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f7ff fe68 	bl	80039a0 <SPI_WaitFlagStateUntilTimeout>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d007      	beq.n	8003ce6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cda:	f043 0220 	orr.w	r2, r3, #32
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e014      	b.n	8003d10 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f7ff fedc 	bl	8003ab0 <SPI_WaitFifoStateUntilTimeout>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d007      	beq.n	8003d0e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d02:	f043 0220 	orr.w	r2, r3, #32
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e000      	b.n	8003d10 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e040      	b.n	8003dac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d106      	bne.n	8003d40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7fc ff00 	bl	8000b40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2224      	movs	r2, #36	; 0x24
 8003d44:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f022 0201 	bic.w	r2, r2, #1
 8003d54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f8b6 	bl	8003ec8 <UART_SetConfig>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d101      	bne.n	8003d66 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e022      	b.n	8003dac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d002      	beq.n	8003d74 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 f9e0 	bl	8004134 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	685a      	ldr	r2, [r3, #4]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	689a      	ldr	r2, [r3, #8]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f042 0201 	orr.w	r2, r2, #1
 8003da2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 fa67 	bl	8004278 <UART_CheckIdleState>
 8003daa:	4603      	mov	r3, r0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3708      	adds	r7, #8
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b08a      	sub	sp, #40	; 0x28
 8003db8:	af02      	add	r7, sp, #8
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	603b      	str	r3, [r7, #0]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dc8:	2b20      	cmp	r3, #32
 8003dca:	d178      	bne.n	8003ebe <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d002      	beq.n	8003dd8 <HAL_UART_Transmit+0x24>
 8003dd2:	88fb      	ldrh	r3, [r7, #6]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d101      	bne.n	8003ddc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e071      	b.n	8003ec0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2221      	movs	r2, #33	; 0x21
 8003de8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dea:	f7fc ff6f 	bl	8000ccc <HAL_GetTick>
 8003dee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	88fa      	ldrh	r2, [r7, #6]
 8003df4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	88fa      	ldrh	r2, [r7, #6]
 8003dfc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e08:	d108      	bne.n	8003e1c <HAL_UART_Transmit+0x68>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d104      	bne.n	8003e1c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003e12:	2300      	movs	r3, #0
 8003e14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	61bb      	str	r3, [r7, #24]
 8003e1a:	e003      	b.n	8003e24 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e20:	2300      	movs	r3, #0
 8003e22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e24:	e030      	b.n	8003e88 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	2180      	movs	r1, #128	; 0x80
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f000 fac9 	bl	80043c8 <UART_WaitOnFlagUntilTimeout>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d004      	beq.n	8003e46 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2220      	movs	r2, #32
 8003e40:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e03c      	b.n	8003ec0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10b      	bne.n	8003e64 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	881a      	ldrh	r2, [r3, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e58:	b292      	uxth	r2, r2
 8003e5a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	3302      	adds	r3, #2
 8003e60:	61bb      	str	r3, [r7, #24]
 8003e62:	e008      	b.n	8003e76 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	781a      	ldrb	r2, [r3, #0]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	b292      	uxth	r2, r2
 8003e6e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	3301      	adds	r3, #1
 8003e74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1c8      	bne.n	8003e26 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	9300      	str	r3, [sp, #0]
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	2140      	movs	r1, #64	; 0x40
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f000 fa92 	bl	80043c8 <UART_WaitOnFlagUntilTimeout>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d004      	beq.n	8003eb4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2220      	movs	r2, #32
 8003eae:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e005      	b.n	8003ec0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	e000      	b.n	8003ec0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003ebe:	2302      	movs	r3, #2
  }
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3720      	adds	r7, #32
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b088      	sub	sp, #32
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689a      	ldr	r2, [r3, #8]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	431a      	orrs	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	69db      	ldr	r3, [r3, #28]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	4b8a      	ldr	r3, [pc, #552]	; (800411c <UART_SetConfig+0x254>)
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	6812      	ldr	r2, [r2, #0]
 8003efa:	6979      	ldr	r1, [r7, #20]
 8003efc:	430b      	orrs	r3, r1
 8003efe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68da      	ldr	r2, [r3, #12]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a78      	ldr	r2, [pc, #480]	; (8004120 <UART_SetConfig+0x258>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d120      	bne.n	8003f86 <UART_SetConfig+0xbe>
 8003f44:	4b77      	ldr	r3, [pc, #476]	; (8004124 <UART_SetConfig+0x25c>)
 8003f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f48:	f003 0303 	and.w	r3, r3, #3
 8003f4c:	2b03      	cmp	r3, #3
 8003f4e:	d817      	bhi.n	8003f80 <UART_SetConfig+0xb8>
 8003f50:	a201      	add	r2, pc, #4	; (adr r2, 8003f58 <UART_SetConfig+0x90>)
 8003f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f56:	bf00      	nop
 8003f58:	08003f69 	.word	0x08003f69
 8003f5c:	08003f75 	.word	0x08003f75
 8003f60:	08003f7b 	.word	0x08003f7b
 8003f64:	08003f6f 	.word	0x08003f6f
 8003f68:	2300      	movs	r3, #0
 8003f6a:	77fb      	strb	r3, [r7, #31]
 8003f6c:	e01d      	b.n	8003faa <UART_SetConfig+0xe2>
 8003f6e:	2302      	movs	r3, #2
 8003f70:	77fb      	strb	r3, [r7, #31]
 8003f72:	e01a      	b.n	8003faa <UART_SetConfig+0xe2>
 8003f74:	2304      	movs	r3, #4
 8003f76:	77fb      	strb	r3, [r7, #31]
 8003f78:	e017      	b.n	8003faa <UART_SetConfig+0xe2>
 8003f7a:	2308      	movs	r3, #8
 8003f7c:	77fb      	strb	r3, [r7, #31]
 8003f7e:	e014      	b.n	8003faa <UART_SetConfig+0xe2>
 8003f80:	2310      	movs	r3, #16
 8003f82:	77fb      	strb	r3, [r7, #31]
 8003f84:	e011      	b.n	8003faa <UART_SetConfig+0xe2>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a67      	ldr	r2, [pc, #412]	; (8004128 <UART_SetConfig+0x260>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d102      	bne.n	8003f96 <UART_SetConfig+0xce>
 8003f90:	2300      	movs	r3, #0
 8003f92:	77fb      	strb	r3, [r7, #31]
 8003f94:	e009      	b.n	8003faa <UART_SetConfig+0xe2>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a64      	ldr	r2, [pc, #400]	; (800412c <UART_SetConfig+0x264>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d102      	bne.n	8003fa6 <UART_SetConfig+0xde>
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	77fb      	strb	r3, [r7, #31]
 8003fa4:	e001      	b.n	8003faa <UART_SetConfig+0xe2>
 8003fa6:	2310      	movs	r3, #16
 8003fa8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fb2:	d15a      	bne.n	800406a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003fb4:	7ffb      	ldrb	r3, [r7, #31]
 8003fb6:	2b08      	cmp	r3, #8
 8003fb8:	d827      	bhi.n	800400a <UART_SetConfig+0x142>
 8003fba:	a201      	add	r2, pc, #4	; (adr r2, 8003fc0 <UART_SetConfig+0xf8>)
 8003fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc0:	08003fe5 	.word	0x08003fe5
 8003fc4:	08003fed 	.word	0x08003fed
 8003fc8:	08003ff5 	.word	0x08003ff5
 8003fcc:	0800400b 	.word	0x0800400b
 8003fd0:	08003ffb 	.word	0x08003ffb
 8003fd4:	0800400b 	.word	0x0800400b
 8003fd8:	0800400b 	.word	0x0800400b
 8003fdc:	0800400b 	.word	0x0800400b
 8003fe0:	08004003 	.word	0x08004003
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fe4:	f7fe fb42 	bl	800266c <HAL_RCC_GetPCLK1Freq>
 8003fe8:	61b8      	str	r0, [r7, #24]
        break;
 8003fea:	e013      	b.n	8004014 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fec:	f7fe fb60 	bl	80026b0 <HAL_RCC_GetPCLK2Freq>
 8003ff0:	61b8      	str	r0, [r7, #24]
        break;
 8003ff2:	e00f      	b.n	8004014 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ff4:	4b4e      	ldr	r3, [pc, #312]	; (8004130 <UART_SetConfig+0x268>)
 8003ff6:	61bb      	str	r3, [r7, #24]
        break;
 8003ff8:	e00c      	b.n	8004014 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ffa:	f7fe fac1 	bl	8002580 <HAL_RCC_GetSysClockFreq>
 8003ffe:	61b8      	str	r0, [r7, #24]
        break;
 8004000:	e008      	b.n	8004014 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004002:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004006:	61bb      	str	r3, [r7, #24]
        break;
 8004008:	e004      	b.n	8004014 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800400a:	2300      	movs	r3, #0
 800400c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	77bb      	strb	r3, [r7, #30]
        break;
 8004012:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d074      	beq.n	8004104 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	005a      	lsls	r2, r3, #1
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	085b      	lsrs	r3, r3, #1
 8004024:	441a      	add	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	fbb2 f3f3 	udiv	r3, r2, r3
 800402e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	2b0f      	cmp	r3, #15
 8004034:	d916      	bls.n	8004064 <UART_SetConfig+0x19c>
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800403c:	d212      	bcs.n	8004064 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	b29b      	uxth	r3, r3
 8004042:	f023 030f 	bic.w	r3, r3, #15
 8004046:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	085b      	lsrs	r3, r3, #1
 800404c:	b29b      	uxth	r3, r3
 800404e:	f003 0307 	and.w	r3, r3, #7
 8004052:	b29a      	uxth	r2, r3
 8004054:	89fb      	ldrh	r3, [r7, #14]
 8004056:	4313      	orrs	r3, r2
 8004058:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	89fa      	ldrh	r2, [r7, #14]
 8004060:	60da      	str	r2, [r3, #12]
 8004062:	e04f      	b.n	8004104 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	77bb      	strb	r3, [r7, #30]
 8004068:	e04c      	b.n	8004104 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800406a:	7ffb      	ldrb	r3, [r7, #31]
 800406c:	2b08      	cmp	r3, #8
 800406e:	d828      	bhi.n	80040c2 <UART_SetConfig+0x1fa>
 8004070:	a201      	add	r2, pc, #4	; (adr r2, 8004078 <UART_SetConfig+0x1b0>)
 8004072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004076:	bf00      	nop
 8004078:	0800409d 	.word	0x0800409d
 800407c:	080040a5 	.word	0x080040a5
 8004080:	080040ad 	.word	0x080040ad
 8004084:	080040c3 	.word	0x080040c3
 8004088:	080040b3 	.word	0x080040b3
 800408c:	080040c3 	.word	0x080040c3
 8004090:	080040c3 	.word	0x080040c3
 8004094:	080040c3 	.word	0x080040c3
 8004098:	080040bb 	.word	0x080040bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800409c:	f7fe fae6 	bl	800266c <HAL_RCC_GetPCLK1Freq>
 80040a0:	61b8      	str	r0, [r7, #24]
        break;
 80040a2:	e013      	b.n	80040cc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040a4:	f7fe fb04 	bl	80026b0 <HAL_RCC_GetPCLK2Freq>
 80040a8:	61b8      	str	r0, [r7, #24]
        break;
 80040aa:	e00f      	b.n	80040cc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040ac:	4b20      	ldr	r3, [pc, #128]	; (8004130 <UART_SetConfig+0x268>)
 80040ae:	61bb      	str	r3, [r7, #24]
        break;
 80040b0:	e00c      	b.n	80040cc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040b2:	f7fe fa65 	bl	8002580 <HAL_RCC_GetSysClockFreq>
 80040b6:	61b8      	str	r0, [r7, #24]
        break;
 80040b8:	e008      	b.n	80040cc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040be:	61bb      	str	r3, [r7, #24]
        break;
 80040c0:	e004      	b.n	80040cc <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80040c2:	2300      	movs	r3, #0
 80040c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	77bb      	strb	r3, [r7, #30]
        break;
 80040ca:	bf00      	nop
    }

    if (pclk != 0U)
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d018      	beq.n	8004104 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	085a      	lsrs	r2, r3, #1
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	441a      	add	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	2b0f      	cmp	r3, #15
 80040ea:	d909      	bls.n	8004100 <UART_SetConfig+0x238>
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040f2:	d205      	bcs.n	8004100 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	60da      	str	r2, [r3, #12]
 80040fe:	e001      	b.n	8004104 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004110:	7fbb      	ldrb	r3, [r7, #30]
}
 8004112:	4618      	mov	r0, r3
 8004114:	3720      	adds	r7, #32
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	efff69f3 	.word	0xefff69f3
 8004120:	40013800 	.word	0x40013800
 8004124:	40021000 	.word	0x40021000
 8004128:	40004400 	.word	0x40004400
 800412c:	40004800 	.word	0x40004800
 8004130:	007a1200 	.word	0x007a1200

08004134 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00a      	beq.n	800415e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	430a      	orrs	r2, r1
 800415c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00a      	beq.n	8004180 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	430a      	orrs	r2, r1
 800417e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004184:	f003 0304 	and.w	r3, r3, #4
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00a      	beq.n	80041a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a6:	f003 0308 	and.w	r3, r3, #8
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00a      	beq.n	80041c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	430a      	orrs	r2, r1
 80041c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c8:	f003 0310 	and.w	r3, r3, #16
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00a      	beq.n	80041e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	430a      	orrs	r2, r1
 80041e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ea:	f003 0320 	and.w	r3, r3, #32
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00a      	beq.n	8004208 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	430a      	orrs	r2, r1
 8004206:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004210:	2b00      	cmp	r3, #0
 8004212:	d01a      	beq.n	800424a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	430a      	orrs	r2, r1
 8004228:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004232:	d10a      	bne.n	800424a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	430a      	orrs	r2, r1
 8004248:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00a      	beq.n	800426c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	430a      	orrs	r2, r1
 800426a:	605a      	str	r2, [r3, #4]
  }
}
 800426c:	bf00      	nop
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b098      	sub	sp, #96	; 0x60
 800427c:	af02      	add	r7, sp, #8
 800427e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004288:	f7fc fd20 	bl	8000ccc <HAL_GetTick>
 800428c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0308 	and.w	r3, r3, #8
 8004298:	2b08      	cmp	r3, #8
 800429a:	d12e      	bne.n	80042fa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800429c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042a0:	9300      	str	r3, [sp, #0]
 80042a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042a4:	2200      	movs	r2, #0
 80042a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f88c 	bl	80043c8 <UART_WaitOnFlagUntilTimeout>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d021      	beq.n	80042fa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042be:	e853 3f00 	ldrex	r3, [r3]
 80042c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80042c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042ca:	653b      	str	r3, [r7, #80]	; 0x50
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	461a      	mov	r2, r3
 80042d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042d4:	647b      	str	r3, [r7, #68]	; 0x44
 80042d6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042dc:	e841 2300 	strex	r3, r2, [r1]
 80042e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1e6      	bne.n	80042b6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2220      	movs	r2, #32
 80042ec:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e062      	b.n	80043c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0304 	and.w	r3, r3, #4
 8004304:	2b04      	cmp	r3, #4
 8004306:	d149      	bne.n	800439c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004308:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004310:	2200      	movs	r2, #0
 8004312:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f856 	bl	80043c8 <UART_WaitOnFlagUntilTimeout>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d03c      	beq.n	800439c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432a:	e853 3f00 	ldrex	r3, [r3]
 800432e:	623b      	str	r3, [r7, #32]
   return(result);
 8004330:	6a3b      	ldr	r3, [r7, #32]
 8004332:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004336:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	461a      	mov	r2, r3
 800433e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004340:	633b      	str	r3, [r7, #48]	; 0x30
 8004342:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004344:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004346:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004348:	e841 2300 	strex	r3, r2, [r1]
 800434c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800434e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1e6      	bne.n	8004322 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	3308      	adds	r3, #8
 800435a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	e853 3f00 	ldrex	r3, [r3]
 8004362:	60fb      	str	r3, [r7, #12]
   return(result);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f023 0301 	bic.w	r3, r3, #1
 800436a:	64bb      	str	r3, [r7, #72]	; 0x48
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	3308      	adds	r3, #8
 8004372:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004374:	61fa      	str	r2, [r7, #28]
 8004376:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004378:	69b9      	ldr	r1, [r7, #24]
 800437a:	69fa      	ldr	r2, [r7, #28]
 800437c:	e841 2300 	strex	r3, r2, [r1]
 8004380:	617b      	str	r3, [r7, #20]
   return(result);
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1e5      	bne.n	8004354 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2220      	movs	r2, #32
 800438c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e011      	b.n	80043c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2220      	movs	r2, #32
 80043a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2220      	movs	r2, #32
 80043a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3758      	adds	r7, #88	; 0x58
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	603b      	str	r3, [r7, #0]
 80043d4:	4613      	mov	r3, r2
 80043d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043d8:	e049      	b.n	800446e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e0:	d045      	beq.n	800446e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043e2:	f7fc fc73 	bl	8000ccc <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	69ba      	ldr	r2, [r7, #24]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d302      	bcc.n	80043f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d101      	bne.n	80043fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e048      	b.n	800448e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0304 	and.w	r3, r3, #4
 8004406:	2b00      	cmp	r3, #0
 8004408:	d031      	beq.n	800446e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	69db      	ldr	r3, [r3, #28]
 8004410:	f003 0308 	and.w	r3, r3, #8
 8004414:	2b08      	cmp	r3, #8
 8004416:	d110      	bne.n	800443a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2208      	movs	r2, #8
 800441e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	f000 f838 	bl	8004496 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2208      	movs	r2, #8
 800442a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e029      	b.n	800448e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	69db      	ldr	r3, [r3, #28]
 8004440:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004444:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004448:	d111      	bne.n	800446e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004452:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f000 f81e 	bl	8004496 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2220      	movs	r2, #32
 800445e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e00f      	b.n	800448e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	69da      	ldr	r2, [r3, #28]
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	4013      	ands	r3, r2
 8004478:	68ba      	ldr	r2, [r7, #8]
 800447a:	429a      	cmp	r2, r3
 800447c:	bf0c      	ite	eq
 800447e:	2301      	moveq	r3, #1
 8004480:	2300      	movne	r3, #0
 8004482:	b2db      	uxtb	r3, r3
 8004484:	461a      	mov	r2, r3
 8004486:	79fb      	ldrb	r3, [r7, #7]
 8004488:	429a      	cmp	r2, r3
 800448a:	d0a6      	beq.n	80043da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3710      	adds	r7, #16
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004496:	b480      	push	{r7}
 8004498:	b095      	sub	sp, #84	; 0x54
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044a6:	e853 3f00 	ldrex	r3, [r3]
 80044aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	461a      	mov	r2, r3
 80044ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044bc:	643b      	str	r3, [r7, #64]	; 0x40
 80044be:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044c4:	e841 2300 	strex	r3, r2, [r1]
 80044c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1e6      	bne.n	800449e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	3308      	adds	r3, #8
 80044d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d8:	6a3b      	ldr	r3, [r7, #32]
 80044da:	e853 3f00 	ldrex	r3, [r3]
 80044de:	61fb      	str	r3, [r7, #28]
   return(result);
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	f023 0301 	bic.w	r3, r3, #1
 80044e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	3308      	adds	r3, #8
 80044ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044f8:	e841 2300 	strex	r3, r2, [r1]
 80044fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1e5      	bne.n	80044d0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004508:	2b01      	cmp	r3, #1
 800450a:	d118      	bne.n	800453e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	e853 3f00 	ldrex	r3, [r3]
 8004518:	60bb      	str	r3, [r7, #8]
   return(result);
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	f023 0310 	bic.w	r3, r3, #16
 8004520:	647b      	str	r3, [r7, #68]	; 0x44
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	461a      	mov	r2, r3
 8004528:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800452a:	61bb      	str	r3, [r7, #24]
 800452c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452e:	6979      	ldr	r1, [r7, #20]
 8004530:	69ba      	ldr	r2, [r7, #24]
 8004532:	e841 2300 	strex	r3, r2, [r1]
 8004536:	613b      	str	r3, [r7, #16]
   return(result);
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1e6      	bne.n	800450c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2220      	movs	r2, #32
 8004542:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004552:	bf00      	nop
 8004554:	3754      	adds	r7, #84	; 0x54
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
	...

08004560 <MFRC522_PCD_Write>:
  * @param 	reg_addr register address
  * @param 	value byte to write
  * @retval None
  */
void MFRC522_PCD_Write(uint8_t reg_addr, uint8_t value)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	4603      	mov	r3, r0
 8004568:	460a      	mov	r2, r1
 800456a:	71fb      	strb	r3, [r7, #7]
 800456c:	4613      	mov	r3, r2
 800456e:	71bb      	strb	r3, [r7, #6]
	// Set the chip select line so we can start transferring
	HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8004570:	2200      	movs	r2, #0
 8004572:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004576:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800457a:	f7fc fe2f 	bl	80011dc <HAL_GPIO_WritePin>

	// Prepare address for write mode
	uint8_t addr = (((reg_addr << 1) & 0x7E));
 800457e:	79fb      	ldrb	r3, [r7, #7]
 8004580:	005b      	lsls	r3, r3, #1
 8004582:	b2db      	uxtb	r3, r3
 8004584:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8004588:	b2db      	uxtb	r3, r3
 800458a:	73fb      	strb	r3, [r7, #15]

	HAL_SPI_Transmit(&hspi1, &addr, 1, 250);
 800458c:	f107 010f 	add.w	r1, r7, #15
 8004590:	23fa      	movs	r3, #250	; 0xfa
 8004592:	2201      	movs	r2, #1
 8004594:	4809      	ldr	r0, [pc, #36]	; (80045bc <MFRC522_PCD_Write+0x5c>)
 8004596:	f7fe fd34 	bl	8003002 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &value, 1, 250);
 800459a:	1db9      	adds	r1, r7, #6
 800459c:	23fa      	movs	r3, #250	; 0xfa
 800459e:	2201      	movs	r2, #1
 80045a0:	4806      	ldr	r0, [pc, #24]	; (80045bc <MFRC522_PCD_Write+0x5c>)
 80045a2:	f7fe fd2e 	bl	8003002 <HAL_SPI_Transmit>

	// Clear the select line - release the slave
	HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 80045a6:	2201      	movs	r2, #1
 80045a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80045ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80045b0:	f7fc fe14 	bl	80011dc <HAL_GPIO_WritePin>
}
 80045b4:	bf00      	nop
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	20000218 	.word	0x20000218

080045c0 <MFRC522_PCD_Read>:
  * @brief 	Read a byte from the specified register in the MFRC522 reader/writer IC.
  * @note 	Communication is done through the SPI interface.
  * @param 	reg_addr register address
  * @retval value value that was read from the specified register
  */
uint8_t MFRC522_PCD_Read(uint8_t reg_addr) {
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	4603      	mov	r3, r0
 80045c8:	71fb      	strb	r3, [r7, #7]

	uint8_t value;

	// Prepare address for read mode
	uint8_t addr = (((reg_addr << 1) & 0x7E) | 0x80);
 80045ca:	79fb      	ldrb	r3, [r7, #7]
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	b25b      	sxtb	r3, r3
 80045d0:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80045d4:	b25b      	sxtb	r3, r3
 80045d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80045da:	b25b      	sxtb	r3, r3
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	73bb      	strb	r3, [r7, #14]

	// Set the select line so we can start transferring - select slave
	HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80045e0:	2200      	movs	r2, #0
 80045e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80045e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80045ea:	f7fc fdf7 	bl	80011dc <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &addr, 1, 250);
 80045ee:	f107 010e 	add.w	r1, r7, #14
 80045f2:	23fa      	movs	r3, #250	; 0xfa
 80045f4:	2201      	movs	r2, #1
 80045f6:	480b      	ldr	r0, [pc, #44]	; (8004624 <MFRC522_PCD_Read+0x64>)
 80045f8:	f7fe fd03 	bl	8003002 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &value, 1, 250);
 80045fc:	f107 010f 	add.w	r1, r7, #15
 8004600:	23fa      	movs	r3, #250	; 0xfa
 8004602:	2201      	movs	r2, #1
 8004604:	4807      	ldr	r0, [pc, #28]	; (8004624 <MFRC522_PCD_Read+0x64>)
 8004606:	f7fe fe71 	bl	80032ec <HAL_SPI_Receive>

	// Clear the select line - release slave
	HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 800460a:	2201      	movs	r2, #1
 800460c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004610:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004614:	f7fc fde2 	bl	80011dc <HAL_GPIO_WritePin>
	return (uint8_t) value;
 8004618:	7bfb      	ldrb	r3, [r7, #15]
}
 800461a:	4618      	mov	r0, r3
 800461c:	3710      	adds	r7, #16
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	20000218 	.word	0x20000218

08004628 <MFRC522_PCD_SetBitMask>:
  * @param 	reg register address
  * @param 	mask the bits to set
  * @retval none
  */
void MFRC522_PCD_SetBitMask(uint8_t reg, uint8_t mask)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	4603      	mov	r3, r0
 8004630:	460a      	mov	r2, r1
 8004632:	71fb      	strb	r3, [r7, #7]
 8004634:	4613      	mov	r3, r2
 8004636:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp;
    tmp = MFRC522_PCD_Read(reg);
 8004638:	79fb      	ldrb	r3, [r7, #7]
 800463a:	4618      	mov	r0, r3
 800463c:	f7ff ffc0 	bl	80045c0 <MFRC522_PCD_Read>
 8004640:	4603      	mov	r3, r0
 8004642:	73fb      	strb	r3, [r7, #15]
    MFRC522_PCD_Write(reg, tmp | mask);  // Set bit mask
 8004644:	7bfa      	ldrb	r2, [r7, #15]
 8004646:	79bb      	ldrb	r3, [r7, #6]
 8004648:	4313      	orrs	r3, r2
 800464a:	b2da      	uxtb	r2, r3
 800464c:	79fb      	ldrb	r3, [r7, #7]
 800464e:	4611      	mov	r1, r2
 8004650:	4618      	mov	r0, r3
 8004652:	f7ff ff85 	bl	8004560 <MFRC522_PCD_Write>
}
 8004656:	bf00      	nop
 8004658:	3710      	adds	r7, #16
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <MFRC522_PCD_ClearBitMask>:
  * @param 	reg register address
  * @param 	mask the bits to clear
  * @retval none
  */
void MFRC522_PCD_ClearBitMask(uint8_t reg, uint8_t mask)
{
 800465e:	b580      	push	{r7, lr}
 8004660:	b084      	sub	sp, #16
 8004662:	af00      	add	r7, sp, #0
 8004664:	4603      	mov	r3, r0
 8004666:	460a      	mov	r2, r1
 8004668:	71fb      	strb	r3, [r7, #7]
 800466a:	4613      	mov	r3, r2
 800466c:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp;
    tmp = MFRC522_PCD_Read(reg);
 800466e:	79fb      	ldrb	r3, [r7, #7]
 8004670:	4618      	mov	r0, r3
 8004672:	f7ff ffa5 	bl	80045c0 <MFRC522_PCD_Read>
 8004676:	4603      	mov	r3, r0
 8004678:	73fb      	strb	r3, [r7, #15]
    MFRC522_PCD_Write(reg, tmp & (~mask));  // Clear bit mask
 800467a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800467e:	43db      	mvns	r3, r3
 8004680:	b25a      	sxtb	r2, r3
 8004682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004686:	4013      	ands	r3, r2
 8004688:	b25b      	sxtb	r3, r3
 800468a:	b2da      	uxtb	r2, r3
 800468c:	79fb      	ldrb	r3, [r7, #7]
 800468e:	4611      	mov	r1, r2
 8004690:	4618      	mov	r0, r3
 8004692:	f7ff ff65 	bl	8004560 <MFRC522_PCD_Write>
}
 8004696:	bf00      	nop
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <MFRC522_PCD_Init>:

/**
  * @brief 	Initializes the MFRC522 reader/writer IC.
  */
void MFRC522_PCD_Init()
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	af00      	add	r7, sp, #0
	/* Performs a soft reset */
	MFRC522_PCD_SoftReset();
 80046a2:	f000 f828 	bl	80046f6 <MFRC522_PCD_SoftReset>

	/* Reset baud rates */
	MFRC522_PCD_Write(TX_MODE_REG, 0x00);
 80046a6:	2100      	movs	r1, #0
 80046a8:	2012      	movs	r0, #18
 80046aa:	f7ff ff59 	bl	8004560 <MFRC522_PCD_Write>
	MFRC522_PCD_Write(RX_MODE_REG, 0x00);
 80046ae:	2100      	movs	r1, #0
 80046b0:	2013      	movs	r0, #19
 80046b2:	f7ff ff55 	bl	8004560 <MFRC522_PCD_Write>
	MFRC522_PCD_Write(MOD_WIDTH_REG, 0x26);
 80046b6:	2126      	movs	r1, #38	; 0x26
 80046b8:	2024      	movs	r0, #36	; 0x24
 80046ba:	f7ff ff51 	bl	8004560 <MFRC522_PCD_Write>

	/* When communicating with a PICC we need a timeout if something goes wrong. */
	// f_timer = 13.56 MHz / (2*TPreScaler+1) where TPreScaler = [TPrescaler_Hi:TPrescaler_Lo].
	// TPrescaler_Hi are the four low bits in TModeReg. TPrescaler_Lo is TPrescalerReg.
	MFRC522_PCD_Write(T_MODE_REG, 0x80);			// TAuto=1; timer starts automatically at the end of the transmission in all communication modes at all speeds
 80046be:	2180      	movs	r1, #128	; 0x80
 80046c0:	202a      	movs	r0, #42	; 0x2a
 80046c2:	f7ff ff4d 	bl	8004560 <MFRC522_PCD_Write>
	MFRC522_PCD_Write(T_PRESCALER_REG, 0xA9);		// TPreScaler = TModeReg[3..0]:TPrescalerReg, ie 0x0A9 = 169 => f_timer=40kHz, ie a timer period of 25μs.
 80046c6:	21a9      	movs	r1, #169	; 0xa9
 80046c8:	202b      	movs	r0, #43	; 0x2b
 80046ca:	f7ff ff49 	bl	8004560 <MFRC522_PCD_Write>
	MFRC522_PCD_Write(T_RELOAD_REG_HIGH, 0x03);		// Reload timer with 0x3E8 = 1000, ie 25ms before timeout.
 80046ce:	2103      	movs	r1, #3
 80046d0:	202c      	movs	r0, #44	; 0x2c
 80046d2:	f7ff ff45 	bl	8004560 <MFRC522_PCD_Write>
	MFRC522_PCD_Write(T_RELOAD_REG_LOW, 0xE8);
 80046d6:	21e8      	movs	r1, #232	; 0xe8
 80046d8:	202d      	movs	r0, #45	; 0x2d
 80046da:	f7ff ff41 	bl	8004560 <MFRC522_PCD_Write>

	MFRC522_PCD_Write(TX_ASK_REG, 0x40);			// Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting
 80046de:	2140      	movs	r1, #64	; 0x40
 80046e0:	2015      	movs	r0, #21
 80046e2:	f7ff ff3d 	bl	8004560 <MFRC522_PCD_Write>
	MFRC522_PCD_Write(MODE_REG, 0x3D);				// Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (ISO 14443-3 part 6.2.4)
 80046e6:	213d      	movs	r1, #61	; 0x3d
 80046e8:	2011      	movs	r0, #17
 80046ea:	f7ff ff39 	bl	8004560 <MFRC522_PCD_Write>

	/* Turn antenna on */
	MFRC522_PCD_AntennaOn();
 80046ee:	f000 f80a 	bl	8004706 <MFRC522_PCD_AntennaOn>
}
 80046f2:	bf00      	nop
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <MFRC522_PCD_SoftReset>:

/**
  * @brief 	Performs a soft reset on the MFRC522 reader/writer IC.
  */
void MFRC522_PCD_SoftReset(void)
{
 80046f6:	b580      	push	{r7, lr}
 80046f8:	af00      	add	r7, sp, #0
	MFRC522_PCD_Write(COMMAND_REG, PCD_SOFT_RESET);
 80046fa:	210f      	movs	r1, #15
 80046fc:	2001      	movs	r0, #1
 80046fe:	f7ff ff2f 	bl	8004560 <MFRC522_PCD_Write>
}
 8004702:	bf00      	nop
 8004704:	bd80      	pop	{r7, pc}

08004706 <MFRC522_PCD_AntennaOn>:

/**
  * @brief 	Turns the antenna on by enabling pins Tx1RFEn and Tx2RFEn.
  * @note 	After a reset these pins are disabled.
  */
void MFRC522_PCD_AntennaOn(void) {
 8004706:	b580      	push	{r7, lr}
 8004708:	af00      	add	r7, sp, #0
	MFRC522_PCD_SetBitMask(TX_CONTROL_REG, 0x03);
 800470a:	2103      	movs	r1, #3
 800470c:	2014      	movs	r0, #20
 800470e:	f7ff ff8b 	bl	8004628 <MFRC522_PCD_SetBitMask>
}
 8004712:	bf00      	nop
 8004714:	bd80      	pop	{r7, pc}

08004716 <MFRC522_PICC_Anticollision>:
  * @note	Shows all known firmware versions.
  * @param	p_ser_num returns 4 bytes of the card's serial number, the first 5 bytes for the checksum byte
  * @retval	STATUS_OK on success, STATUS_ERROR otherwise
  */
uint8_t MFRC522_PICC_Anticollision(uint8_t *p_ser_num)
{
 8004716:	b580      	push	{r7, lr}
 8004718:	b086      	sub	sp, #24
 800471a:	af02      	add	r7, sp, #8
 800471c:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t i;
	uint8_t ser_num_check = 0;
 800471e:	2300      	movs	r3, #0
 8004720:	737b      	strb	r3, [r7, #13]
	uint32_t un_len;

	//ClearBitMask(Status2Reg, 0x08);		//TempSensclear
	//ClearBitMask(CollReg,0x80);			//ValuesAfterColl
	MFRC522_PCD_Write(BIT_FRAMING_REG, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8004722:	2100      	movs	r1, #0
 8004724:	200d      	movs	r0, #13
 8004726:	f7ff ff1b 	bl	8004560 <MFRC522_PCD_Write>

	p_ser_num[0] = PICC_CMD_SEL_CL1;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2293      	movs	r2, #147	; 0x93
 800472e:	701a      	strb	r2, [r3, #0]
	p_ser_num[1] = 0x20;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	3301      	adds	r3, #1
 8004734:	2220      	movs	r2, #32
 8004736:	701a      	strb	r2, [r3, #0]
	status = MFRC522_PICC_ToCard(PCD_TRANSCEIVE, p_ser_num, 2, p_ser_num, &un_len);
 8004738:	f107 0308 	add.w	r3, r7, #8
 800473c:	9300      	str	r3, [sp, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2202      	movs	r2, #2
 8004742:	6879      	ldr	r1, [r7, #4]
 8004744:	200c      	movs	r0, #12
 8004746:	f000 f848 	bl	80047da <MFRC522_PICC_ToCard>
 800474a:	4603      	mov	r3, r0
 800474c:	73fb      	strb	r3, [r7, #15]

	if (status == STATUS_OK)
 800474e:	7bfb      	ldrb	r3, [r7, #15]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d118      	bne.n	8004786 <MFRC522_PICC_Anticollision+0x70>
	{
		//Check card serial number
		for (i = 0; i < 4; i++)
 8004754:	2300      	movs	r3, #0
 8004756:	73bb      	strb	r3, [r7, #14]
 8004758:	e009      	b.n	800476e <MFRC522_PICC_Anticollision+0x58>
		{
			ser_num_check ^= p_ser_num[i];
 800475a:	7bbb      	ldrb	r3, [r7, #14]
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	4413      	add	r3, r2
 8004760:	781a      	ldrb	r2, [r3, #0]
 8004762:	7b7b      	ldrb	r3, [r7, #13]
 8004764:	4053      	eors	r3, r2
 8004766:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++)
 8004768:	7bbb      	ldrb	r3, [r7, #14]
 800476a:	3301      	adds	r3, #1
 800476c:	73bb      	strb	r3, [r7, #14]
 800476e:	7bbb      	ldrb	r3, [r7, #14]
 8004770:	2b03      	cmp	r3, #3
 8004772:	d9f2      	bls.n	800475a <MFRC522_PICC_Anticollision+0x44>
		}
		if (ser_num_check != p_ser_num[i])
 8004774:	7bbb      	ldrb	r3, [r7, #14]
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	4413      	add	r3, r2
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	7b7a      	ldrb	r2, [r7, #13]
 800477e:	429a      	cmp	r2, r3
 8004780:	d001      	beq.n	8004786 <MFRC522_PICC_Anticollision+0x70>
		{
			status = STATUS_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	73fb      	strb	r3, [r7, #15]
		}
  }

  return status;
 8004786:	7bfb      	ldrb	r3, [r7, #15]
}
 8004788:	4618      	mov	r0, r3
 800478a:	3710      	adds	r7, #16
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <MFRC522_PICC_RequestA>:
 *    			0x0800 = Mifare_Pro(X)
 *    			0x4403 = Mifare_DESFire
 * @retval STATUS_OK on success, STATUS_ERROR otherwise.
 */
uint8_t MFRC522_PICC_RequestA(uint8_t req_mode, uint8_t *tag_type)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af02      	add	r7, sp, #8
 8004796:	4603      	mov	r3, r0
 8004798:	6039      	str	r1, [r7, #0]
 800479a:	71fb      	strb	r3, [r7, #7]
  uint8_t status;
  uint32_t back_bits; // The received data bits

  MFRC522_PCD_Write(BIT_FRAMING_REG, 0x07);   // TxLastBists = BitFramingReg[2..0]
 800479c:	2107      	movs	r1, #7
 800479e:	200d      	movs	r0, #13
 80047a0:	f7ff fede 	bl	8004560 <MFRC522_PCD_Write>

  tag_type[0] = req_mode;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	79fa      	ldrb	r2, [r7, #7]
 80047a8:	701a      	strb	r2, [r3, #0]

  status = MFRC522_PICC_ToCard(PCD_TRANSCEIVE, tag_type, 1, tag_type, &back_bits);
 80047aa:	f107 0308 	add.w	r3, r7, #8
 80047ae:	9300      	str	r3, [sp, #0]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	2201      	movs	r2, #1
 80047b4:	6839      	ldr	r1, [r7, #0]
 80047b6:	200c      	movs	r0, #12
 80047b8:	f000 f80f 	bl	80047da <MFRC522_PICC_ToCard>
 80047bc:	4603      	mov	r3, r0
 80047be:	73fb      	strb	r3, [r7, #15]
  if ((status != STATUS_OK) || (back_bits != 0x10)) {
 80047c0:	7bfb      	ldrb	r3, [r7, #15]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d102      	bne.n	80047cc <MFRC522_PICC_RequestA+0x3c>
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	2b10      	cmp	r3, #16
 80047ca:	d001      	beq.n	80047d0 <MFRC522_PICC_RequestA+0x40>
    status = STATUS_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80047d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <MFRC522_PICC_ToCard>:
 * @param back_data pointer to received data,
 * @param back_len return data bit length
 * @retval STATUS_OK on succecss, STATUS_ERROR otherwise
 */
uint8_t MFRC522_PICC_ToCard(uint8_t command, uint8_t *send_data, uint8_t send_len, uint8_t *back_data, uint8_t *back_len)
{
 80047da:	b590      	push	{r4, r7, lr}
 80047dc:	b089      	sub	sp, #36	; 0x24
 80047de:	af00      	add	r7, sp, #0
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607b      	str	r3, [r7, #4]
 80047e4:	4603      	mov	r3, r0
 80047e6:	73fb      	strb	r3, [r7, #15]
 80047e8:	4613      	mov	r3, r2
 80047ea:	73bb      	strb	r3, [r7, #14]
  uint8_t status = STATUS_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	77fb      	strb	r3, [r7, #31]
  uint8_t irq_en = 0x00;
 80047f0:	2300      	movs	r3, #0
 80047f2:	77bb      	strb	r3, [r7, #30]
  uint8_t wait_irq = 0x00;
 80047f4:	2300      	movs	r3, #0
 80047f6:	777b      	strb	r3, [r7, #29]
  uint8_t last_bits;
  uint8_t n;
  uint32_t i;

  switch (command)
 80047f8:	7bfb      	ldrb	r3, [r7, #15]
 80047fa:	2b0c      	cmp	r3, #12
 80047fc:	d006      	beq.n	800480c <MFRC522_PICC_ToCard+0x32>
 80047fe:	2b0e      	cmp	r3, #14
 8004800:	d109      	bne.n	8004816 <MFRC522_PICC_ToCard+0x3c>
  {
  	  case PCD_MF_AUTHENT:	// Certification cards close
      {
			irq_en = 0x12;
 8004802:	2312      	movs	r3, #18
 8004804:	77bb      	strb	r3, [r7, #30]
			wait_irq = 0x10;
 8004806:	2310      	movs	r3, #16
 8004808:	777b      	strb	r3, [r7, #29]
			break;
 800480a:	e005      	b.n	8004818 <MFRC522_PICC_ToCard+0x3e>
      }
  	  case PCD_TRANSCEIVE:  // Transmit FIFO data
      {
			irq_en = 0x77;
 800480c:	2377      	movs	r3, #119	; 0x77
 800480e:	77bb      	strb	r3, [r7, #30]
			wait_irq = 0x30;
 8004810:	2330      	movs	r3, #48	; 0x30
 8004812:	777b      	strb	r3, [r7, #29]
			break;
 8004814:	e000      	b.n	8004818 <MFRC522_PICC_ToCard+0x3e>
      }
  	  default:
  		  break;
 8004816:	bf00      	nop
  }

  MFRC522_PCD_Write(COM_I_EN_REG, irq_en|0x80); // Interrupt request
 8004818:	7fbb      	ldrb	r3, [r7, #30]
 800481a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800481e:	b2db      	uxtb	r3, r3
 8004820:	4619      	mov	r1, r3
 8004822:	2002      	movs	r0, #2
 8004824:	f7ff fe9c 	bl	8004560 <MFRC522_PCD_Write>
  MFRC522_PCD_ClearBitMask(COM_IRQ_REG, 0x80);  // Clear all interrupt request bit
 8004828:	2180      	movs	r1, #128	; 0x80
 800482a:	2004      	movs	r0, #4
 800482c:	f7ff ff17 	bl	800465e <MFRC522_PCD_ClearBitMask>
  MFRC522_PCD_SetBitMask(FIFO_LEVEL_REG, 0x80); // FlushBuffer=1, FIFO Initialization
 8004830:	2180      	movs	r1, #128	; 0x80
 8004832:	200a      	movs	r0, #10
 8004834:	f7ff fef8 	bl	8004628 <MFRC522_PCD_SetBitMask>

  MFRC522_PCD_Write(COMMAND_REG, PCD_IDLE); // NO action; Cancel the current command
 8004838:	2100      	movs	r1, #0
 800483a:	2001      	movs	r0, #1
 800483c:	f7ff fe90 	bl	8004560 <MFRC522_PCD_Write>

  // Writing data to the FIFO
  for (i =0; i < send_len; i++)
 8004840:	2300      	movs	r3, #0
 8004842:	61bb      	str	r3, [r7, #24]
 8004844:	e00a      	b.n	800485c <MFRC522_PICC_ToCard+0x82>
  {
	  MFRC522_PCD_Write(FIFO_DATA_REG, send_data[i]);
 8004846:	68ba      	ldr	r2, [r7, #8]
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	4413      	add	r3, r2
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	4619      	mov	r1, r3
 8004850:	2009      	movs	r0, #9
 8004852:	f7ff fe85 	bl	8004560 <MFRC522_PCD_Write>
  for (i =0; i < send_len; i++)
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	3301      	adds	r3, #1
 800485a:	61bb      	str	r3, [r7, #24]
 800485c:	7bbb      	ldrb	r3, [r7, #14]
 800485e:	69ba      	ldr	r2, [r7, #24]
 8004860:	429a      	cmp	r2, r3
 8004862:	d3f0      	bcc.n	8004846 <MFRC522_PICC_ToCard+0x6c>
  }

  // Execute the command
  MFRC522_PCD_Write(COMMAND_REG, command);
 8004864:	7bfb      	ldrb	r3, [r7, #15]
 8004866:	4619      	mov	r1, r3
 8004868:	2001      	movs	r0, #1
 800486a:	f7ff fe79 	bl	8004560 <MFRC522_PCD_Write>
  if (command == PCD_TRANSCEIVE)
 800486e:	7bfb      	ldrb	r3, [r7, #15]
 8004870:	2b0c      	cmp	r3, #12
 8004872:	d103      	bne.n	800487c <MFRC522_PICC_ToCard+0xa2>
  {
    MFRC522_PCD_SetBitMask(BIT_FRAMING_REG, 0x80);      // StartSend=1,transmission of data starts
 8004874:	2180      	movs	r1, #128	; 0x80
 8004876:	200d      	movs	r0, #13
 8004878:	f7ff fed6 	bl	8004628 <MFRC522_PCD_SetBitMask>
  }

  // Waiting to receive data to complete
  i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 800487c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004880:	61bb      	str	r3, [r7, #24]
  do
  {
    // CommIrqReg[7..0]
    // Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
    n = MFRC522_PCD_Read(COM_IRQ_REG);
 8004882:	2004      	movs	r0, #4
 8004884:	f7ff fe9c 	bl	80045c0 <MFRC522_PCD_Read>
 8004888:	4603      	mov	r3, r0
 800488a:	773b      	strb	r3, [r7, #28]
    i--;
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	3b01      	subs	r3, #1
 8004890:	61bb      	str	r3, [r7, #24]
  }
  while ((i != 0) && !(n & 0x01) && !(n & wait_irq));
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00a      	beq.n	80048ae <MFRC522_PICC_ToCard+0xd4>
 8004898:	7f3b      	ldrb	r3, [r7, #28]
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d105      	bne.n	80048ae <MFRC522_PICC_ToCard+0xd4>
 80048a2:	7f3a      	ldrb	r2, [r7, #28]
 80048a4:	7f7b      	ldrb	r3, [r7, #29]
 80048a6:	4013      	ands	r3, r2
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d0e9      	beq.n	8004882 <MFRC522_PICC_ToCard+0xa8>

  MFRC522_PCD_ClearBitMask(BIT_FRAMING_REG, 0x80);      // StartSend=0
 80048ae:	2180      	movs	r1, #128	; 0x80
 80048b0:	200d      	movs	r0, #13
 80048b2:	f7ff fed4 	bl	800465e <MFRC522_PCD_ClearBitMask>

  if (i != 0)
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d054      	beq.n	8004966 <MFRC522_PICC_ToCard+0x18c>
  {
	  if(!(MFRC522_PCD_Read(ERROR_REG) & 0x1B))  // BufferOvfl Collerr CRCErr ProtecolErr
 80048bc:	2006      	movs	r0, #6
 80048be:	f7ff fe7f 	bl	80045c0 <MFRC522_PCD_Read>
 80048c2:	4603      	mov	r3, r0
 80048c4:	f003 031b 	and.w	r3, r3, #27
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d14a      	bne.n	8004962 <MFRC522_PICC_ToCard+0x188>
	  {
		  status = STATUS_OK;
 80048cc:	2300      	movs	r3, #0
 80048ce:	77fb      	strb	r3, [r7, #31]
		  if (n & irq_en & 0x01)
 80048d0:	7f3a      	ldrb	r2, [r7, #28]
 80048d2:	7fbb      	ldrb	r3, [r7, #30]
 80048d4:	4013      	ands	r3, r2
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	f003 0301 	and.w	r3, r3, #1
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d001      	beq.n	80048e4 <MFRC522_PICC_ToCard+0x10a>
		  {
			status = STATUS_ERROR;             // ??
 80048e0:	2301      	movs	r3, #1
 80048e2:	77fb      	strb	r3, [r7, #31]
		  }

		  if (command == PCD_TRANSCEIVE)
 80048e4:	7bfb      	ldrb	r3, [r7, #15]
 80048e6:	2b0c      	cmp	r3, #12
 80048e8:	d13d      	bne.n	8004966 <MFRC522_PICC_ToCard+0x18c>
		  {
			  n = MFRC522_PCD_Read(FIFO_LEVEL_REG);
 80048ea:	200a      	movs	r0, #10
 80048ec:	f7ff fe68 	bl	80045c0 <MFRC522_PCD_Read>
 80048f0:	4603      	mov	r3, r0
 80048f2:	773b      	strb	r3, [r7, #28]
			  last_bits = MFRC522_PCD_Read(CONTROL_REG) & 0x07;
 80048f4:	200c      	movs	r0, #12
 80048f6:	f7ff fe63 	bl	80045c0 <MFRC522_PCD_Read>
 80048fa:	4603      	mov	r3, r0
 80048fc:	f003 0307 	and.w	r3, r3, #7
 8004900:	75fb      	strb	r3, [r7, #23]

			  if (last_bits)
 8004902:	7dfb      	ldrb	r3, [r7, #23]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00a      	beq.n	800491e <MFRC522_PICC_ToCard+0x144>
			  {
				  *back_len = (n-1)*8 + last_bits;
 8004908:	7f3b      	ldrb	r3, [r7, #28]
 800490a:	3b01      	subs	r3, #1
 800490c:	b2db      	uxtb	r3, r3
 800490e:	00db      	lsls	r3, r3, #3
 8004910:	b2da      	uxtb	r2, r3
 8004912:	7dfb      	ldrb	r3, [r7, #23]
 8004914:	4413      	add	r3, r2
 8004916:	b2da      	uxtb	r2, r3
 8004918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491a:	701a      	strb	r2, [r3, #0]
 800491c:	e004      	b.n	8004928 <MFRC522_PICC_ToCard+0x14e>
			  }
			  else
			  {
				  *back_len = n*8;
 800491e:	7f3b      	ldrb	r3, [r7, #28]
 8004920:	00db      	lsls	r3, r3, #3
 8004922:	b2da      	uxtb	r2, r3
 8004924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004926:	701a      	strb	r2, [r3, #0]
			  }

			  if (n == 0)
 8004928:	7f3b      	ldrb	r3, [r7, #28]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d101      	bne.n	8004932 <MFRC522_PICC_ToCard+0x158>
			  {
				  n = 1;
 800492e:	2301      	movs	r3, #1
 8004930:	773b      	strb	r3, [r7, #28]
			  }
			  if (n > MAX_LEN)
 8004932:	7f3b      	ldrb	r3, [r7, #28]
 8004934:	2b10      	cmp	r3, #16
 8004936:	d901      	bls.n	800493c <MFRC522_PICC_ToCard+0x162>
			  {
				  n = MAX_LEN;
 8004938:	2310      	movs	r3, #16
 800493a:	773b      	strb	r3, [r7, #28]
			  }

			  // Reading the received data in FIFO
			  for (i = 0; i < n; i++)
 800493c:	2300      	movs	r3, #0
 800493e:	61bb      	str	r3, [r7, #24]
 8004940:	e00a      	b.n	8004958 <MFRC522_PICC_ToCard+0x17e>
			  {
				  back_data[i] = MFRC522_PCD_Read(FIFO_DATA_REG);
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	18d4      	adds	r4, r2, r3
 8004948:	2009      	movs	r0, #9
 800494a:	f7ff fe39 	bl	80045c0 <MFRC522_PCD_Read>
 800494e:	4603      	mov	r3, r0
 8004950:	7023      	strb	r3, [r4, #0]
			  for (i = 0; i < n; i++)
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	3301      	adds	r3, #1
 8004956:	61bb      	str	r3, [r7, #24]
 8004958:	7f3b      	ldrb	r3, [r7, #28]
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	429a      	cmp	r2, r3
 800495e:	d3f0      	bcc.n	8004942 <MFRC522_PICC_ToCard+0x168>
 8004960:	e001      	b.n	8004966 <MFRC522_PICC_ToCard+0x18c>
		  }
	  }
	  else
	  {
		  //printf("~~~ buffer overflow, collerr, crcerr, or protecolerr\r\n");
		  status = STATUS_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	77fb      	strb	r3, [r7, #31]
  else
  {
    //printf("~~~ request timed out\r\n");
  }

  return status;
 8004966:	7ffb      	ldrb	r3, [r7, #31]
}
 8004968:	4618      	mov	r0, r3
 800496a:	3724      	adds	r7, #36	; 0x24
 800496c:	46bd      	mov	sp, r7
 800496e:	bd90      	pop	{r4, r7, pc}

08004970 <MFRC522_PCD_GetVersion>:
  * @note	Shows all known firmware versions.
  * @param	buf pointer to data buffer to store the returned string.
  * @param	buf_size size of the data buffer
  * @retval	none
  */
void MFRC522_PCD_GetVersion(uint8_t* buf, uint8_t buf_size) {
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	460b      	mov	r3, r1
 800497a:	70fb      	strb	r3, [r7, #3]
	uint8_t ver = MFRC522_PCD_Read(VERSION_REG);
 800497c:	2037      	movs	r0, #55	; 0x37
 800497e:	f7ff fe1f 	bl	80045c0 <MFRC522_PCD_Read>
 8004982:	4603      	mov	r3, r0
 8004984:	73fb      	strb	r3, [r7, #15]

	switch(ver)
 8004986:	7bfb      	ldrb	r3, [r7, #15]
 8004988:	2b92      	cmp	r3, #146	; 0x92
 800498a:	dc4d      	bgt.n	8004a28 <MFRC522_PCD_GetVersion+0xb8>
 800498c:	2b88      	cmp	r3, #136	; 0x88
 800498e:	da04      	bge.n	800499a <MFRC522_PCD_GetVersion+0x2a>
 8004990:	2b01      	cmp	r3, #1
 8004992:	d042      	beq.n	8004a1a <MFRC522_PCD_GetVersion+0xaa>
 8004994:	2b12      	cmp	r3, #18
 8004996:	d039      	beq.n	8004a0c <MFRC522_PCD_GetVersion+0x9c>
 8004998:	e046      	b.n	8004a28 <MFRC522_PCD_GetVersion+0xb8>
 800499a:	3b88      	subs	r3, #136	; 0x88
 800499c:	2b0a      	cmp	r3, #10
 800499e:	d843      	bhi.n	8004a28 <MFRC522_PCD_GetVersion+0xb8>
 80049a0:	a201      	add	r2, pc, #4	; (adr r2, 80049a8 <MFRC522_PCD_GetVersion+0x38>)
 80049a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a6:	bf00      	nop
 80049a8:	080049d5 	.word	0x080049d5
 80049ac:	08004a29 	.word	0x08004a29
 80049b0:	08004a29 	.word	0x08004a29
 80049b4:	08004a29 	.word	0x08004a29
 80049b8:	08004a29 	.word	0x08004a29
 80049bc:	08004a29 	.word	0x08004a29
 80049c0:	08004a29 	.word	0x08004a29
 80049c4:	08004a29 	.word	0x08004a29
 80049c8:	080049e3 	.word	0x080049e3
 80049cc:	080049f1 	.word	0x080049f1
 80049d0:	080049ff 	.word	0x080049ff
	{
		case 0x88:
			snprintf(buf, buf_size, "Firmware Version: 0x%x = (clone)", ver);
 80049d4:	78f9      	ldrb	r1, [r7, #3]
 80049d6:	7bfb      	ldrb	r3, [r7, #15]
 80049d8:	4a19      	ldr	r2, [pc, #100]	; (8004a40 <MFRC522_PCD_GetVersion+0xd0>)
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 f990 	bl	8004d00 <sniprintf>
			//return buf;
			break;
 80049e0:	e029      	b.n	8004a36 <MFRC522_PCD_GetVersion+0xc6>
		case 0x90:
			snprintf(buf, buf_size, "Firmware Version: 0x%x = v0.0", ver);
 80049e2:	78f9      	ldrb	r1, [r7, #3]
 80049e4:	7bfb      	ldrb	r3, [r7, #15]
 80049e6:	4a17      	ldr	r2, [pc, #92]	; (8004a44 <MFRC522_PCD_GetVersion+0xd4>)
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 f989 	bl	8004d00 <sniprintf>
			//return buf;
			break;
 80049ee:	e022      	b.n	8004a36 <MFRC522_PCD_GetVersion+0xc6>
		case 0x91:
			snprintf(buf, buf_size, "Firmware Version: 0x%x = v1.0", ver);
 80049f0:	78f9      	ldrb	r1, [r7, #3]
 80049f2:	7bfb      	ldrb	r3, [r7, #15]
 80049f4:	4a14      	ldr	r2, [pc, #80]	; (8004a48 <MFRC522_PCD_GetVersion+0xd8>)
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 f982 	bl	8004d00 <sniprintf>
			//return buf;
			break;
 80049fc:	e01b      	b.n	8004a36 <MFRC522_PCD_GetVersion+0xc6>
		case 0x92:
			snprintf(buf, buf_size, "Firmware Version: 0x%x = v2.0", ver);
 80049fe:	78f9      	ldrb	r1, [r7, #3]
 8004a00:	7bfb      	ldrb	r3, [r7, #15]
 8004a02:	4a12      	ldr	r2, [pc, #72]	; (8004a4c <MFRC522_PCD_GetVersion+0xdc>)
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 f97b 	bl	8004d00 <sniprintf>
			//return buf;
			break;
 8004a0a:	e014      	b.n	8004a36 <MFRC522_PCD_GetVersion+0xc6>
		case 0x12:
			snprintf(buf, buf_size, "Firmware Version: 0x%x = counterfeit chip", ver);
 8004a0c:	78f9      	ldrb	r1, [r7, #3]
 8004a0e:	7bfb      	ldrb	r3, [r7, #15]
 8004a10:	4a0f      	ldr	r2, [pc, #60]	; (8004a50 <MFRC522_PCD_GetVersion+0xe0>)
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f974 	bl	8004d00 <sniprintf>
			//return buf;
			break;
 8004a18:	e00d      	b.n	8004a36 <MFRC522_PCD_GetVersion+0xc6>
		case (0x00 || 0xFF):
			snprintf(buf, buf_size, "WARNING: Communication failure, is the MFRC522 properly connected?");
 8004a1a:	78fb      	ldrb	r3, [r7, #3]
 8004a1c:	4a0d      	ldr	r2, [pc, #52]	; (8004a54 <MFRC522_PCD_GetVersion+0xe4>)
 8004a1e:	4619      	mov	r1, r3
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 f96d 	bl	8004d00 <sniprintf>
			//return buf;
			break;
 8004a26:	e006      	b.n	8004a36 <MFRC522_PCD_GetVersion+0xc6>
		default:
			snprintf(buf, buf_size, "Firmware Version: 0x%x = unknown", ver);
 8004a28:	78f9      	ldrb	r1, [r7, #3]
 8004a2a:	7bfb      	ldrb	r3, [r7, #15]
 8004a2c:	4a0a      	ldr	r2, [pc, #40]	; (8004a58 <MFRC522_PCD_GetVersion+0xe8>)
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f966 	bl	8004d00 <sniprintf>
			//return buf;
			break;
 8004a34:	bf00      	nop
	}
}
 8004a36:	bf00      	nop
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	08006038 	.word	0x08006038
 8004a44:	0800605c 	.word	0x0800605c
 8004a48:	0800607c 	.word	0x0800607c
 8004a4c:	0800609c 	.word	0x0800609c
 8004a50:	080060bc 	.word	0x080060bc
 8004a54:	080060e8 	.word	0x080060e8
 8004a58:	0800612c 	.word	0x0800612c

08004a5c <atoi>:
 8004a5c:	220a      	movs	r2, #10
 8004a5e:	2100      	movs	r1, #0
 8004a60:	f000 b882 	b.w	8004b68 <strtol>

08004a64 <_strtol_l.constprop.0>:
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a6a:	d001      	beq.n	8004a70 <_strtol_l.constprop.0+0xc>
 8004a6c:	2b24      	cmp	r3, #36	; 0x24
 8004a6e:	d906      	bls.n	8004a7e <_strtol_l.constprop.0+0x1a>
 8004a70:	f000 fa7a 	bl	8004f68 <__errno>
 8004a74:	2316      	movs	r3, #22
 8004a76:	6003      	str	r3, [r0, #0]
 8004a78:	2000      	movs	r0, #0
 8004a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a7e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004b64 <_strtol_l.constprop.0+0x100>
 8004a82:	460d      	mov	r5, r1
 8004a84:	462e      	mov	r6, r5
 8004a86:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004a8a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8004a8e:	f017 0708 	ands.w	r7, r7, #8
 8004a92:	d1f7      	bne.n	8004a84 <_strtol_l.constprop.0+0x20>
 8004a94:	2c2d      	cmp	r4, #45	; 0x2d
 8004a96:	d132      	bne.n	8004afe <_strtol_l.constprop.0+0x9a>
 8004a98:	782c      	ldrb	r4, [r5, #0]
 8004a9a:	2701      	movs	r7, #1
 8004a9c:	1cb5      	adds	r5, r6, #2
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d05b      	beq.n	8004b5a <_strtol_l.constprop.0+0xf6>
 8004aa2:	2b10      	cmp	r3, #16
 8004aa4:	d109      	bne.n	8004aba <_strtol_l.constprop.0+0x56>
 8004aa6:	2c30      	cmp	r4, #48	; 0x30
 8004aa8:	d107      	bne.n	8004aba <_strtol_l.constprop.0+0x56>
 8004aaa:	782c      	ldrb	r4, [r5, #0]
 8004aac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004ab0:	2c58      	cmp	r4, #88	; 0x58
 8004ab2:	d14d      	bne.n	8004b50 <_strtol_l.constprop.0+0xec>
 8004ab4:	786c      	ldrb	r4, [r5, #1]
 8004ab6:	2310      	movs	r3, #16
 8004ab8:	3502      	adds	r5, #2
 8004aba:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004abe:	f108 38ff 	add.w	r8, r8, #4294967295
 8004ac2:	f04f 0e00 	mov.w	lr, #0
 8004ac6:	fbb8 f9f3 	udiv	r9, r8, r3
 8004aca:	4676      	mov	r6, lr
 8004acc:	fb03 8a19 	mls	sl, r3, r9, r8
 8004ad0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004ad4:	f1bc 0f09 	cmp.w	ip, #9
 8004ad8:	d816      	bhi.n	8004b08 <_strtol_l.constprop.0+0xa4>
 8004ada:	4664      	mov	r4, ip
 8004adc:	42a3      	cmp	r3, r4
 8004ade:	dd24      	ble.n	8004b2a <_strtol_l.constprop.0+0xc6>
 8004ae0:	f1be 3fff 	cmp.w	lr, #4294967295
 8004ae4:	d008      	beq.n	8004af8 <_strtol_l.constprop.0+0x94>
 8004ae6:	45b1      	cmp	r9, r6
 8004ae8:	d31c      	bcc.n	8004b24 <_strtol_l.constprop.0+0xc0>
 8004aea:	d101      	bne.n	8004af0 <_strtol_l.constprop.0+0x8c>
 8004aec:	45a2      	cmp	sl, r4
 8004aee:	db19      	blt.n	8004b24 <_strtol_l.constprop.0+0xc0>
 8004af0:	fb06 4603 	mla	r6, r6, r3, r4
 8004af4:	f04f 0e01 	mov.w	lr, #1
 8004af8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004afc:	e7e8      	b.n	8004ad0 <_strtol_l.constprop.0+0x6c>
 8004afe:	2c2b      	cmp	r4, #43	; 0x2b
 8004b00:	bf04      	itt	eq
 8004b02:	782c      	ldrbeq	r4, [r5, #0]
 8004b04:	1cb5      	addeq	r5, r6, #2
 8004b06:	e7ca      	b.n	8004a9e <_strtol_l.constprop.0+0x3a>
 8004b08:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004b0c:	f1bc 0f19 	cmp.w	ip, #25
 8004b10:	d801      	bhi.n	8004b16 <_strtol_l.constprop.0+0xb2>
 8004b12:	3c37      	subs	r4, #55	; 0x37
 8004b14:	e7e2      	b.n	8004adc <_strtol_l.constprop.0+0x78>
 8004b16:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004b1a:	f1bc 0f19 	cmp.w	ip, #25
 8004b1e:	d804      	bhi.n	8004b2a <_strtol_l.constprop.0+0xc6>
 8004b20:	3c57      	subs	r4, #87	; 0x57
 8004b22:	e7db      	b.n	8004adc <_strtol_l.constprop.0+0x78>
 8004b24:	f04f 3eff 	mov.w	lr, #4294967295
 8004b28:	e7e6      	b.n	8004af8 <_strtol_l.constprop.0+0x94>
 8004b2a:	f1be 3fff 	cmp.w	lr, #4294967295
 8004b2e:	d105      	bne.n	8004b3c <_strtol_l.constprop.0+0xd8>
 8004b30:	2322      	movs	r3, #34	; 0x22
 8004b32:	6003      	str	r3, [r0, #0]
 8004b34:	4646      	mov	r6, r8
 8004b36:	b942      	cbnz	r2, 8004b4a <_strtol_l.constprop.0+0xe6>
 8004b38:	4630      	mov	r0, r6
 8004b3a:	e79e      	b.n	8004a7a <_strtol_l.constprop.0+0x16>
 8004b3c:	b107      	cbz	r7, 8004b40 <_strtol_l.constprop.0+0xdc>
 8004b3e:	4276      	negs	r6, r6
 8004b40:	2a00      	cmp	r2, #0
 8004b42:	d0f9      	beq.n	8004b38 <_strtol_l.constprop.0+0xd4>
 8004b44:	f1be 0f00 	cmp.w	lr, #0
 8004b48:	d000      	beq.n	8004b4c <_strtol_l.constprop.0+0xe8>
 8004b4a:	1e69      	subs	r1, r5, #1
 8004b4c:	6011      	str	r1, [r2, #0]
 8004b4e:	e7f3      	b.n	8004b38 <_strtol_l.constprop.0+0xd4>
 8004b50:	2430      	movs	r4, #48	; 0x30
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1b1      	bne.n	8004aba <_strtol_l.constprop.0+0x56>
 8004b56:	2308      	movs	r3, #8
 8004b58:	e7af      	b.n	8004aba <_strtol_l.constprop.0+0x56>
 8004b5a:	2c30      	cmp	r4, #48	; 0x30
 8004b5c:	d0a5      	beq.n	8004aaa <_strtol_l.constprop.0+0x46>
 8004b5e:	230a      	movs	r3, #10
 8004b60:	e7ab      	b.n	8004aba <_strtol_l.constprop.0+0x56>
 8004b62:	bf00      	nop
 8004b64:	08006189 	.word	0x08006189

08004b68 <strtol>:
 8004b68:	4613      	mov	r3, r2
 8004b6a:	460a      	mov	r2, r1
 8004b6c:	4601      	mov	r1, r0
 8004b6e:	4802      	ldr	r0, [pc, #8]	; (8004b78 <strtol+0x10>)
 8004b70:	6800      	ldr	r0, [r0, #0]
 8004b72:	f7ff bf77 	b.w	8004a64 <_strtol_l.constprop.0>
 8004b76:	bf00      	nop
 8004b78:	2000009c 	.word	0x2000009c

08004b7c <std>:
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	b510      	push	{r4, lr}
 8004b80:	4604      	mov	r4, r0
 8004b82:	e9c0 3300 	strd	r3, r3, [r0]
 8004b86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b8a:	6083      	str	r3, [r0, #8]
 8004b8c:	8181      	strh	r1, [r0, #12]
 8004b8e:	6643      	str	r3, [r0, #100]	; 0x64
 8004b90:	81c2      	strh	r2, [r0, #14]
 8004b92:	6183      	str	r3, [r0, #24]
 8004b94:	4619      	mov	r1, r3
 8004b96:	2208      	movs	r2, #8
 8004b98:	305c      	adds	r0, #92	; 0x5c
 8004b9a:	f000 f928 	bl	8004dee <memset>
 8004b9e:	4b0d      	ldr	r3, [pc, #52]	; (8004bd4 <std+0x58>)
 8004ba0:	6263      	str	r3, [r4, #36]	; 0x24
 8004ba2:	4b0d      	ldr	r3, [pc, #52]	; (8004bd8 <std+0x5c>)
 8004ba4:	62a3      	str	r3, [r4, #40]	; 0x28
 8004ba6:	4b0d      	ldr	r3, [pc, #52]	; (8004bdc <std+0x60>)
 8004ba8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004baa:	4b0d      	ldr	r3, [pc, #52]	; (8004be0 <std+0x64>)
 8004bac:	6323      	str	r3, [r4, #48]	; 0x30
 8004bae:	4b0d      	ldr	r3, [pc, #52]	; (8004be4 <std+0x68>)
 8004bb0:	6224      	str	r4, [r4, #32]
 8004bb2:	429c      	cmp	r4, r3
 8004bb4:	d006      	beq.n	8004bc4 <std+0x48>
 8004bb6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004bba:	4294      	cmp	r4, r2
 8004bbc:	d002      	beq.n	8004bc4 <std+0x48>
 8004bbe:	33d0      	adds	r3, #208	; 0xd0
 8004bc0:	429c      	cmp	r4, r3
 8004bc2:	d105      	bne.n	8004bd0 <std+0x54>
 8004bc4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bcc:	f000 b9f6 	b.w	8004fbc <__retarget_lock_init_recursive>
 8004bd0:	bd10      	pop	{r4, pc}
 8004bd2:	bf00      	nop
 8004bd4:	08004d69 	.word	0x08004d69
 8004bd8:	08004d8b 	.word	0x08004d8b
 8004bdc:	08004dc3 	.word	0x08004dc3
 8004be0:	08004de7 	.word	0x08004de7
 8004be4:	2000030c 	.word	0x2000030c

08004be8 <stdio_exit_handler>:
 8004be8:	4a02      	ldr	r2, [pc, #8]	; (8004bf4 <stdio_exit_handler+0xc>)
 8004bea:	4903      	ldr	r1, [pc, #12]	; (8004bf8 <stdio_exit_handler+0x10>)
 8004bec:	4803      	ldr	r0, [pc, #12]	; (8004bfc <stdio_exit_handler+0x14>)
 8004bee:	f000 b869 	b.w	8004cc4 <_fwalk_sglue>
 8004bf2:	bf00      	nop
 8004bf4:	20000044 	.word	0x20000044
 8004bf8:	080058dd 	.word	0x080058dd
 8004bfc:	20000050 	.word	0x20000050

08004c00 <cleanup_stdio>:
 8004c00:	6841      	ldr	r1, [r0, #4]
 8004c02:	4b0c      	ldr	r3, [pc, #48]	; (8004c34 <cleanup_stdio+0x34>)
 8004c04:	4299      	cmp	r1, r3
 8004c06:	b510      	push	{r4, lr}
 8004c08:	4604      	mov	r4, r0
 8004c0a:	d001      	beq.n	8004c10 <cleanup_stdio+0x10>
 8004c0c:	f000 fe66 	bl	80058dc <_fflush_r>
 8004c10:	68a1      	ldr	r1, [r4, #8]
 8004c12:	4b09      	ldr	r3, [pc, #36]	; (8004c38 <cleanup_stdio+0x38>)
 8004c14:	4299      	cmp	r1, r3
 8004c16:	d002      	beq.n	8004c1e <cleanup_stdio+0x1e>
 8004c18:	4620      	mov	r0, r4
 8004c1a:	f000 fe5f 	bl	80058dc <_fflush_r>
 8004c1e:	68e1      	ldr	r1, [r4, #12]
 8004c20:	4b06      	ldr	r3, [pc, #24]	; (8004c3c <cleanup_stdio+0x3c>)
 8004c22:	4299      	cmp	r1, r3
 8004c24:	d004      	beq.n	8004c30 <cleanup_stdio+0x30>
 8004c26:	4620      	mov	r0, r4
 8004c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c2c:	f000 be56 	b.w	80058dc <_fflush_r>
 8004c30:	bd10      	pop	{r4, pc}
 8004c32:	bf00      	nop
 8004c34:	2000030c 	.word	0x2000030c
 8004c38:	20000374 	.word	0x20000374
 8004c3c:	200003dc 	.word	0x200003dc

08004c40 <global_stdio_init.part.0>:
 8004c40:	b510      	push	{r4, lr}
 8004c42:	4b0b      	ldr	r3, [pc, #44]	; (8004c70 <global_stdio_init.part.0+0x30>)
 8004c44:	4c0b      	ldr	r4, [pc, #44]	; (8004c74 <global_stdio_init.part.0+0x34>)
 8004c46:	4a0c      	ldr	r2, [pc, #48]	; (8004c78 <global_stdio_init.part.0+0x38>)
 8004c48:	601a      	str	r2, [r3, #0]
 8004c4a:	4620      	mov	r0, r4
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	2104      	movs	r1, #4
 8004c50:	f7ff ff94 	bl	8004b7c <std>
 8004c54:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004c58:	2201      	movs	r2, #1
 8004c5a:	2109      	movs	r1, #9
 8004c5c:	f7ff ff8e 	bl	8004b7c <std>
 8004c60:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004c64:	2202      	movs	r2, #2
 8004c66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c6a:	2112      	movs	r1, #18
 8004c6c:	f7ff bf86 	b.w	8004b7c <std>
 8004c70:	20000444 	.word	0x20000444
 8004c74:	2000030c 	.word	0x2000030c
 8004c78:	08004be9 	.word	0x08004be9

08004c7c <__sfp_lock_acquire>:
 8004c7c:	4801      	ldr	r0, [pc, #4]	; (8004c84 <__sfp_lock_acquire+0x8>)
 8004c7e:	f000 b99e 	b.w	8004fbe <__retarget_lock_acquire_recursive>
 8004c82:	bf00      	nop
 8004c84:	2000044d 	.word	0x2000044d

08004c88 <__sfp_lock_release>:
 8004c88:	4801      	ldr	r0, [pc, #4]	; (8004c90 <__sfp_lock_release+0x8>)
 8004c8a:	f000 b999 	b.w	8004fc0 <__retarget_lock_release_recursive>
 8004c8e:	bf00      	nop
 8004c90:	2000044d 	.word	0x2000044d

08004c94 <__sinit>:
 8004c94:	b510      	push	{r4, lr}
 8004c96:	4604      	mov	r4, r0
 8004c98:	f7ff fff0 	bl	8004c7c <__sfp_lock_acquire>
 8004c9c:	6a23      	ldr	r3, [r4, #32]
 8004c9e:	b11b      	cbz	r3, 8004ca8 <__sinit+0x14>
 8004ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ca4:	f7ff bff0 	b.w	8004c88 <__sfp_lock_release>
 8004ca8:	4b04      	ldr	r3, [pc, #16]	; (8004cbc <__sinit+0x28>)
 8004caa:	6223      	str	r3, [r4, #32]
 8004cac:	4b04      	ldr	r3, [pc, #16]	; (8004cc0 <__sinit+0x2c>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d1f5      	bne.n	8004ca0 <__sinit+0xc>
 8004cb4:	f7ff ffc4 	bl	8004c40 <global_stdio_init.part.0>
 8004cb8:	e7f2      	b.n	8004ca0 <__sinit+0xc>
 8004cba:	bf00      	nop
 8004cbc:	08004c01 	.word	0x08004c01
 8004cc0:	20000444 	.word	0x20000444

08004cc4 <_fwalk_sglue>:
 8004cc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cc8:	4607      	mov	r7, r0
 8004cca:	4688      	mov	r8, r1
 8004ccc:	4614      	mov	r4, r2
 8004cce:	2600      	movs	r6, #0
 8004cd0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004cd4:	f1b9 0901 	subs.w	r9, r9, #1
 8004cd8:	d505      	bpl.n	8004ce6 <_fwalk_sglue+0x22>
 8004cda:	6824      	ldr	r4, [r4, #0]
 8004cdc:	2c00      	cmp	r4, #0
 8004cde:	d1f7      	bne.n	8004cd0 <_fwalk_sglue+0xc>
 8004ce0:	4630      	mov	r0, r6
 8004ce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ce6:	89ab      	ldrh	r3, [r5, #12]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d907      	bls.n	8004cfc <_fwalk_sglue+0x38>
 8004cec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	d003      	beq.n	8004cfc <_fwalk_sglue+0x38>
 8004cf4:	4629      	mov	r1, r5
 8004cf6:	4638      	mov	r0, r7
 8004cf8:	47c0      	blx	r8
 8004cfa:	4306      	orrs	r6, r0
 8004cfc:	3568      	adds	r5, #104	; 0x68
 8004cfe:	e7e9      	b.n	8004cd4 <_fwalk_sglue+0x10>

08004d00 <sniprintf>:
 8004d00:	b40c      	push	{r2, r3}
 8004d02:	b530      	push	{r4, r5, lr}
 8004d04:	4b17      	ldr	r3, [pc, #92]	; (8004d64 <sniprintf+0x64>)
 8004d06:	1e0c      	subs	r4, r1, #0
 8004d08:	681d      	ldr	r5, [r3, #0]
 8004d0a:	b09d      	sub	sp, #116	; 0x74
 8004d0c:	da08      	bge.n	8004d20 <sniprintf+0x20>
 8004d0e:	238b      	movs	r3, #139	; 0x8b
 8004d10:	602b      	str	r3, [r5, #0]
 8004d12:	f04f 30ff 	mov.w	r0, #4294967295
 8004d16:	b01d      	add	sp, #116	; 0x74
 8004d18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d1c:	b002      	add	sp, #8
 8004d1e:	4770      	bx	lr
 8004d20:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004d24:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004d28:	bf14      	ite	ne
 8004d2a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004d2e:	4623      	moveq	r3, r4
 8004d30:	9304      	str	r3, [sp, #16]
 8004d32:	9307      	str	r3, [sp, #28]
 8004d34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d38:	9002      	str	r0, [sp, #8]
 8004d3a:	9006      	str	r0, [sp, #24]
 8004d3c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004d40:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004d42:	ab21      	add	r3, sp, #132	; 0x84
 8004d44:	a902      	add	r1, sp, #8
 8004d46:	4628      	mov	r0, r5
 8004d48:	9301      	str	r3, [sp, #4]
 8004d4a:	f000 fab3 	bl	80052b4 <_svfiprintf_r>
 8004d4e:	1c43      	adds	r3, r0, #1
 8004d50:	bfbc      	itt	lt
 8004d52:	238b      	movlt	r3, #139	; 0x8b
 8004d54:	602b      	strlt	r3, [r5, #0]
 8004d56:	2c00      	cmp	r4, #0
 8004d58:	d0dd      	beq.n	8004d16 <sniprintf+0x16>
 8004d5a:	9b02      	ldr	r3, [sp, #8]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	701a      	strb	r2, [r3, #0]
 8004d60:	e7d9      	b.n	8004d16 <sniprintf+0x16>
 8004d62:	bf00      	nop
 8004d64:	2000009c 	.word	0x2000009c

08004d68 <__sread>:
 8004d68:	b510      	push	{r4, lr}
 8004d6a:	460c      	mov	r4, r1
 8004d6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d70:	f000 f8d6 	bl	8004f20 <_read_r>
 8004d74:	2800      	cmp	r0, #0
 8004d76:	bfab      	itete	ge
 8004d78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004d7a:	89a3      	ldrhlt	r3, [r4, #12]
 8004d7c:	181b      	addge	r3, r3, r0
 8004d7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004d82:	bfac      	ite	ge
 8004d84:	6563      	strge	r3, [r4, #84]	; 0x54
 8004d86:	81a3      	strhlt	r3, [r4, #12]
 8004d88:	bd10      	pop	{r4, pc}

08004d8a <__swrite>:
 8004d8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d8e:	461f      	mov	r7, r3
 8004d90:	898b      	ldrh	r3, [r1, #12]
 8004d92:	05db      	lsls	r3, r3, #23
 8004d94:	4605      	mov	r5, r0
 8004d96:	460c      	mov	r4, r1
 8004d98:	4616      	mov	r6, r2
 8004d9a:	d505      	bpl.n	8004da8 <__swrite+0x1e>
 8004d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004da0:	2302      	movs	r3, #2
 8004da2:	2200      	movs	r2, #0
 8004da4:	f000 f8aa 	bl	8004efc <_lseek_r>
 8004da8:	89a3      	ldrh	r3, [r4, #12]
 8004daa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004dae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004db2:	81a3      	strh	r3, [r4, #12]
 8004db4:	4632      	mov	r2, r6
 8004db6:	463b      	mov	r3, r7
 8004db8:	4628      	mov	r0, r5
 8004dba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004dbe:	f000 b8c1 	b.w	8004f44 <_write_r>

08004dc2 <__sseek>:
 8004dc2:	b510      	push	{r4, lr}
 8004dc4:	460c      	mov	r4, r1
 8004dc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dca:	f000 f897 	bl	8004efc <_lseek_r>
 8004dce:	1c43      	adds	r3, r0, #1
 8004dd0:	89a3      	ldrh	r3, [r4, #12]
 8004dd2:	bf15      	itete	ne
 8004dd4:	6560      	strne	r0, [r4, #84]	; 0x54
 8004dd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004dda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004dde:	81a3      	strheq	r3, [r4, #12]
 8004de0:	bf18      	it	ne
 8004de2:	81a3      	strhne	r3, [r4, #12]
 8004de4:	bd10      	pop	{r4, pc}

08004de6 <__sclose>:
 8004de6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dea:	f000 b877 	b.w	8004edc <_close_r>

08004dee <memset>:
 8004dee:	4402      	add	r2, r0
 8004df0:	4603      	mov	r3, r0
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d100      	bne.n	8004df8 <memset+0xa>
 8004df6:	4770      	bx	lr
 8004df8:	f803 1b01 	strb.w	r1, [r3], #1
 8004dfc:	e7f9      	b.n	8004df2 <memset+0x4>

08004dfe <strncmp>:
 8004dfe:	b510      	push	{r4, lr}
 8004e00:	b16a      	cbz	r2, 8004e1e <strncmp+0x20>
 8004e02:	3901      	subs	r1, #1
 8004e04:	1884      	adds	r4, r0, r2
 8004e06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e0a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d103      	bne.n	8004e1a <strncmp+0x1c>
 8004e12:	42a0      	cmp	r0, r4
 8004e14:	d001      	beq.n	8004e1a <strncmp+0x1c>
 8004e16:	2a00      	cmp	r2, #0
 8004e18:	d1f5      	bne.n	8004e06 <strncmp+0x8>
 8004e1a:	1ad0      	subs	r0, r2, r3
 8004e1c:	bd10      	pop	{r4, pc}
 8004e1e:	4610      	mov	r0, r2
 8004e20:	e7fc      	b.n	8004e1c <strncmp+0x1e>
	...

08004e24 <strtok>:
 8004e24:	4b16      	ldr	r3, [pc, #88]	; (8004e80 <strtok+0x5c>)
 8004e26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e28:	681e      	ldr	r6, [r3, #0]
 8004e2a:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8004e2c:	4605      	mov	r5, r0
 8004e2e:	b9fc      	cbnz	r4, 8004e70 <strtok+0x4c>
 8004e30:	2050      	movs	r0, #80	; 0x50
 8004e32:	9101      	str	r1, [sp, #4]
 8004e34:	f000 f930 	bl	8005098 <malloc>
 8004e38:	9901      	ldr	r1, [sp, #4]
 8004e3a:	6470      	str	r0, [r6, #68]	; 0x44
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	b920      	cbnz	r0, 8004e4a <strtok+0x26>
 8004e40:	4b10      	ldr	r3, [pc, #64]	; (8004e84 <strtok+0x60>)
 8004e42:	4811      	ldr	r0, [pc, #68]	; (8004e88 <strtok+0x64>)
 8004e44:	215b      	movs	r1, #91	; 0x5b
 8004e46:	f000 f8bd 	bl	8004fc4 <__assert_func>
 8004e4a:	e9c0 4400 	strd	r4, r4, [r0]
 8004e4e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004e52:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004e56:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8004e5a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8004e5e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8004e62:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8004e66:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8004e6a:	6184      	str	r4, [r0, #24]
 8004e6c:	7704      	strb	r4, [r0, #28]
 8004e6e:	6244      	str	r4, [r0, #36]	; 0x24
 8004e70:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8004e72:	2301      	movs	r3, #1
 8004e74:	4628      	mov	r0, r5
 8004e76:	b002      	add	sp, #8
 8004e78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004e7c:	f000 b806 	b.w	8004e8c <__strtok_r>
 8004e80:	2000009c 	.word	0x2000009c
 8004e84:	08006289 	.word	0x08006289
 8004e88:	080062a0 	.word	0x080062a0

08004e8c <__strtok_r>:
 8004e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e8e:	b908      	cbnz	r0, 8004e94 <__strtok_r+0x8>
 8004e90:	6810      	ldr	r0, [r2, #0]
 8004e92:	b188      	cbz	r0, 8004eb8 <__strtok_r+0x2c>
 8004e94:	4604      	mov	r4, r0
 8004e96:	4620      	mov	r0, r4
 8004e98:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004e9c:	460f      	mov	r7, r1
 8004e9e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004ea2:	b91e      	cbnz	r6, 8004eac <__strtok_r+0x20>
 8004ea4:	b965      	cbnz	r5, 8004ec0 <__strtok_r+0x34>
 8004ea6:	6015      	str	r5, [r2, #0]
 8004ea8:	4628      	mov	r0, r5
 8004eaa:	e005      	b.n	8004eb8 <__strtok_r+0x2c>
 8004eac:	42b5      	cmp	r5, r6
 8004eae:	d1f6      	bne.n	8004e9e <__strtok_r+0x12>
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d1f0      	bne.n	8004e96 <__strtok_r+0xa>
 8004eb4:	6014      	str	r4, [r2, #0]
 8004eb6:	7003      	strb	r3, [r0, #0]
 8004eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004eba:	461c      	mov	r4, r3
 8004ebc:	e00c      	b.n	8004ed8 <__strtok_r+0x4c>
 8004ebe:	b915      	cbnz	r5, 8004ec6 <__strtok_r+0x3a>
 8004ec0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004ec4:	460e      	mov	r6, r1
 8004ec6:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004eca:	42ab      	cmp	r3, r5
 8004ecc:	d1f7      	bne.n	8004ebe <__strtok_r+0x32>
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d0f3      	beq.n	8004eba <__strtok_r+0x2e>
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004ed8:	6014      	str	r4, [r2, #0]
 8004eda:	e7ed      	b.n	8004eb8 <__strtok_r+0x2c>

08004edc <_close_r>:
 8004edc:	b538      	push	{r3, r4, r5, lr}
 8004ede:	4d06      	ldr	r5, [pc, #24]	; (8004ef8 <_close_r+0x1c>)
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	4604      	mov	r4, r0
 8004ee4:	4608      	mov	r0, r1
 8004ee6:	602b      	str	r3, [r5, #0]
 8004ee8:	f7fb fd7d 	bl	80009e6 <_close>
 8004eec:	1c43      	adds	r3, r0, #1
 8004eee:	d102      	bne.n	8004ef6 <_close_r+0x1a>
 8004ef0:	682b      	ldr	r3, [r5, #0]
 8004ef2:	b103      	cbz	r3, 8004ef6 <_close_r+0x1a>
 8004ef4:	6023      	str	r3, [r4, #0]
 8004ef6:	bd38      	pop	{r3, r4, r5, pc}
 8004ef8:	20000448 	.word	0x20000448

08004efc <_lseek_r>:
 8004efc:	b538      	push	{r3, r4, r5, lr}
 8004efe:	4d07      	ldr	r5, [pc, #28]	; (8004f1c <_lseek_r+0x20>)
 8004f00:	4604      	mov	r4, r0
 8004f02:	4608      	mov	r0, r1
 8004f04:	4611      	mov	r1, r2
 8004f06:	2200      	movs	r2, #0
 8004f08:	602a      	str	r2, [r5, #0]
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	f7fb fd92 	bl	8000a34 <_lseek>
 8004f10:	1c43      	adds	r3, r0, #1
 8004f12:	d102      	bne.n	8004f1a <_lseek_r+0x1e>
 8004f14:	682b      	ldr	r3, [r5, #0]
 8004f16:	b103      	cbz	r3, 8004f1a <_lseek_r+0x1e>
 8004f18:	6023      	str	r3, [r4, #0]
 8004f1a:	bd38      	pop	{r3, r4, r5, pc}
 8004f1c:	20000448 	.word	0x20000448

08004f20 <_read_r>:
 8004f20:	b538      	push	{r3, r4, r5, lr}
 8004f22:	4d07      	ldr	r5, [pc, #28]	; (8004f40 <_read_r+0x20>)
 8004f24:	4604      	mov	r4, r0
 8004f26:	4608      	mov	r0, r1
 8004f28:	4611      	mov	r1, r2
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	602a      	str	r2, [r5, #0]
 8004f2e:	461a      	mov	r2, r3
 8004f30:	f7fb fd20 	bl	8000974 <_read>
 8004f34:	1c43      	adds	r3, r0, #1
 8004f36:	d102      	bne.n	8004f3e <_read_r+0x1e>
 8004f38:	682b      	ldr	r3, [r5, #0]
 8004f3a:	b103      	cbz	r3, 8004f3e <_read_r+0x1e>
 8004f3c:	6023      	str	r3, [r4, #0]
 8004f3e:	bd38      	pop	{r3, r4, r5, pc}
 8004f40:	20000448 	.word	0x20000448

08004f44 <_write_r>:
 8004f44:	b538      	push	{r3, r4, r5, lr}
 8004f46:	4d07      	ldr	r5, [pc, #28]	; (8004f64 <_write_r+0x20>)
 8004f48:	4604      	mov	r4, r0
 8004f4a:	4608      	mov	r0, r1
 8004f4c:	4611      	mov	r1, r2
 8004f4e:	2200      	movs	r2, #0
 8004f50:	602a      	str	r2, [r5, #0]
 8004f52:	461a      	mov	r2, r3
 8004f54:	f7fb fd2b 	bl	80009ae <_write>
 8004f58:	1c43      	adds	r3, r0, #1
 8004f5a:	d102      	bne.n	8004f62 <_write_r+0x1e>
 8004f5c:	682b      	ldr	r3, [r5, #0]
 8004f5e:	b103      	cbz	r3, 8004f62 <_write_r+0x1e>
 8004f60:	6023      	str	r3, [r4, #0]
 8004f62:	bd38      	pop	{r3, r4, r5, pc}
 8004f64:	20000448 	.word	0x20000448

08004f68 <__errno>:
 8004f68:	4b01      	ldr	r3, [pc, #4]	; (8004f70 <__errno+0x8>)
 8004f6a:	6818      	ldr	r0, [r3, #0]
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	2000009c 	.word	0x2000009c

08004f74 <__libc_init_array>:
 8004f74:	b570      	push	{r4, r5, r6, lr}
 8004f76:	4d0d      	ldr	r5, [pc, #52]	; (8004fac <__libc_init_array+0x38>)
 8004f78:	4c0d      	ldr	r4, [pc, #52]	; (8004fb0 <__libc_init_array+0x3c>)
 8004f7a:	1b64      	subs	r4, r4, r5
 8004f7c:	10a4      	asrs	r4, r4, #2
 8004f7e:	2600      	movs	r6, #0
 8004f80:	42a6      	cmp	r6, r4
 8004f82:	d109      	bne.n	8004f98 <__libc_init_array+0x24>
 8004f84:	4d0b      	ldr	r5, [pc, #44]	; (8004fb4 <__libc_init_array+0x40>)
 8004f86:	4c0c      	ldr	r4, [pc, #48]	; (8004fb8 <__libc_init_array+0x44>)
 8004f88:	f000 fffa 	bl	8005f80 <_init>
 8004f8c:	1b64      	subs	r4, r4, r5
 8004f8e:	10a4      	asrs	r4, r4, #2
 8004f90:	2600      	movs	r6, #0
 8004f92:	42a6      	cmp	r6, r4
 8004f94:	d105      	bne.n	8004fa2 <__libc_init_array+0x2e>
 8004f96:	bd70      	pop	{r4, r5, r6, pc}
 8004f98:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f9c:	4798      	blx	r3
 8004f9e:	3601      	adds	r6, #1
 8004fa0:	e7ee      	b.n	8004f80 <__libc_init_array+0xc>
 8004fa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fa6:	4798      	blx	r3
 8004fa8:	3601      	adds	r6, #1
 8004faa:	e7f2      	b.n	8004f92 <__libc_init_array+0x1e>
 8004fac:	0800636c 	.word	0x0800636c
 8004fb0:	0800636c 	.word	0x0800636c
 8004fb4:	0800636c 	.word	0x0800636c
 8004fb8:	08006370 	.word	0x08006370

08004fbc <__retarget_lock_init_recursive>:
 8004fbc:	4770      	bx	lr

08004fbe <__retarget_lock_acquire_recursive>:
 8004fbe:	4770      	bx	lr

08004fc0 <__retarget_lock_release_recursive>:
 8004fc0:	4770      	bx	lr
	...

08004fc4 <__assert_func>:
 8004fc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004fc6:	4614      	mov	r4, r2
 8004fc8:	461a      	mov	r2, r3
 8004fca:	4b09      	ldr	r3, [pc, #36]	; (8004ff0 <__assert_func+0x2c>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4605      	mov	r5, r0
 8004fd0:	68d8      	ldr	r0, [r3, #12]
 8004fd2:	b14c      	cbz	r4, 8004fe8 <__assert_func+0x24>
 8004fd4:	4b07      	ldr	r3, [pc, #28]	; (8004ff4 <__assert_func+0x30>)
 8004fd6:	9100      	str	r1, [sp, #0]
 8004fd8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004fdc:	4906      	ldr	r1, [pc, #24]	; (8004ff8 <__assert_func+0x34>)
 8004fde:	462b      	mov	r3, r5
 8004fe0:	f000 fca4 	bl	800592c <fiprintf>
 8004fe4:	f000 fcec 	bl	80059c0 <abort>
 8004fe8:	4b04      	ldr	r3, [pc, #16]	; (8004ffc <__assert_func+0x38>)
 8004fea:	461c      	mov	r4, r3
 8004fec:	e7f3      	b.n	8004fd6 <__assert_func+0x12>
 8004fee:	bf00      	nop
 8004ff0:	2000009c 	.word	0x2000009c
 8004ff4:	080062fa 	.word	0x080062fa
 8004ff8:	08006307 	.word	0x08006307
 8004ffc:	08006335 	.word	0x08006335

08005000 <_free_r>:
 8005000:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005002:	2900      	cmp	r1, #0
 8005004:	d044      	beq.n	8005090 <_free_r+0x90>
 8005006:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800500a:	9001      	str	r0, [sp, #4]
 800500c:	2b00      	cmp	r3, #0
 800500e:	f1a1 0404 	sub.w	r4, r1, #4
 8005012:	bfb8      	it	lt
 8005014:	18e4      	addlt	r4, r4, r3
 8005016:	f000 f8e7 	bl	80051e8 <__malloc_lock>
 800501a:	4a1e      	ldr	r2, [pc, #120]	; (8005094 <_free_r+0x94>)
 800501c:	9801      	ldr	r0, [sp, #4]
 800501e:	6813      	ldr	r3, [r2, #0]
 8005020:	b933      	cbnz	r3, 8005030 <_free_r+0x30>
 8005022:	6063      	str	r3, [r4, #4]
 8005024:	6014      	str	r4, [r2, #0]
 8005026:	b003      	add	sp, #12
 8005028:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800502c:	f000 b8e2 	b.w	80051f4 <__malloc_unlock>
 8005030:	42a3      	cmp	r3, r4
 8005032:	d908      	bls.n	8005046 <_free_r+0x46>
 8005034:	6825      	ldr	r5, [r4, #0]
 8005036:	1961      	adds	r1, r4, r5
 8005038:	428b      	cmp	r3, r1
 800503a:	bf01      	itttt	eq
 800503c:	6819      	ldreq	r1, [r3, #0]
 800503e:	685b      	ldreq	r3, [r3, #4]
 8005040:	1949      	addeq	r1, r1, r5
 8005042:	6021      	streq	r1, [r4, #0]
 8005044:	e7ed      	b.n	8005022 <_free_r+0x22>
 8005046:	461a      	mov	r2, r3
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	b10b      	cbz	r3, 8005050 <_free_r+0x50>
 800504c:	42a3      	cmp	r3, r4
 800504e:	d9fa      	bls.n	8005046 <_free_r+0x46>
 8005050:	6811      	ldr	r1, [r2, #0]
 8005052:	1855      	adds	r5, r2, r1
 8005054:	42a5      	cmp	r5, r4
 8005056:	d10b      	bne.n	8005070 <_free_r+0x70>
 8005058:	6824      	ldr	r4, [r4, #0]
 800505a:	4421      	add	r1, r4
 800505c:	1854      	adds	r4, r2, r1
 800505e:	42a3      	cmp	r3, r4
 8005060:	6011      	str	r1, [r2, #0]
 8005062:	d1e0      	bne.n	8005026 <_free_r+0x26>
 8005064:	681c      	ldr	r4, [r3, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	6053      	str	r3, [r2, #4]
 800506a:	440c      	add	r4, r1
 800506c:	6014      	str	r4, [r2, #0]
 800506e:	e7da      	b.n	8005026 <_free_r+0x26>
 8005070:	d902      	bls.n	8005078 <_free_r+0x78>
 8005072:	230c      	movs	r3, #12
 8005074:	6003      	str	r3, [r0, #0]
 8005076:	e7d6      	b.n	8005026 <_free_r+0x26>
 8005078:	6825      	ldr	r5, [r4, #0]
 800507a:	1961      	adds	r1, r4, r5
 800507c:	428b      	cmp	r3, r1
 800507e:	bf04      	itt	eq
 8005080:	6819      	ldreq	r1, [r3, #0]
 8005082:	685b      	ldreq	r3, [r3, #4]
 8005084:	6063      	str	r3, [r4, #4]
 8005086:	bf04      	itt	eq
 8005088:	1949      	addeq	r1, r1, r5
 800508a:	6021      	streq	r1, [r4, #0]
 800508c:	6054      	str	r4, [r2, #4]
 800508e:	e7ca      	b.n	8005026 <_free_r+0x26>
 8005090:	b003      	add	sp, #12
 8005092:	bd30      	pop	{r4, r5, pc}
 8005094:	20000450 	.word	0x20000450

08005098 <malloc>:
 8005098:	4b02      	ldr	r3, [pc, #8]	; (80050a4 <malloc+0xc>)
 800509a:	4601      	mov	r1, r0
 800509c:	6818      	ldr	r0, [r3, #0]
 800509e:	f000 b823 	b.w	80050e8 <_malloc_r>
 80050a2:	bf00      	nop
 80050a4:	2000009c 	.word	0x2000009c

080050a8 <sbrk_aligned>:
 80050a8:	b570      	push	{r4, r5, r6, lr}
 80050aa:	4e0e      	ldr	r6, [pc, #56]	; (80050e4 <sbrk_aligned+0x3c>)
 80050ac:	460c      	mov	r4, r1
 80050ae:	6831      	ldr	r1, [r6, #0]
 80050b0:	4605      	mov	r5, r0
 80050b2:	b911      	cbnz	r1, 80050ba <sbrk_aligned+0x12>
 80050b4:	f000 fc66 	bl	8005984 <_sbrk_r>
 80050b8:	6030      	str	r0, [r6, #0]
 80050ba:	4621      	mov	r1, r4
 80050bc:	4628      	mov	r0, r5
 80050be:	f000 fc61 	bl	8005984 <_sbrk_r>
 80050c2:	1c43      	adds	r3, r0, #1
 80050c4:	d00a      	beq.n	80050dc <sbrk_aligned+0x34>
 80050c6:	1cc4      	adds	r4, r0, #3
 80050c8:	f024 0403 	bic.w	r4, r4, #3
 80050cc:	42a0      	cmp	r0, r4
 80050ce:	d007      	beq.n	80050e0 <sbrk_aligned+0x38>
 80050d0:	1a21      	subs	r1, r4, r0
 80050d2:	4628      	mov	r0, r5
 80050d4:	f000 fc56 	bl	8005984 <_sbrk_r>
 80050d8:	3001      	adds	r0, #1
 80050da:	d101      	bne.n	80050e0 <sbrk_aligned+0x38>
 80050dc:	f04f 34ff 	mov.w	r4, #4294967295
 80050e0:	4620      	mov	r0, r4
 80050e2:	bd70      	pop	{r4, r5, r6, pc}
 80050e4:	20000454 	.word	0x20000454

080050e8 <_malloc_r>:
 80050e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050ec:	1ccd      	adds	r5, r1, #3
 80050ee:	f025 0503 	bic.w	r5, r5, #3
 80050f2:	3508      	adds	r5, #8
 80050f4:	2d0c      	cmp	r5, #12
 80050f6:	bf38      	it	cc
 80050f8:	250c      	movcc	r5, #12
 80050fa:	2d00      	cmp	r5, #0
 80050fc:	4607      	mov	r7, r0
 80050fe:	db01      	blt.n	8005104 <_malloc_r+0x1c>
 8005100:	42a9      	cmp	r1, r5
 8005102:	d905      	bls.n	8005110 <_malloc_r+0x28>
 8005104:	230c      	movs	r3, #12
 8005106:	603b      	str	r3, [r7, #0]
 8005108:	2600      	movs	r6, #0
 800510a:	4630      	mov	r0, r6
 800510c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005110:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80051e4 <_malloc_r+0xfc>
 8005114:	f000 f868 	bl	80051e8 <__malloc_lock>
 8005118:	f8d8 3000 	ldr.w	r3, [r8]
 800511c:	461c      	mov	r4, r3
 800511e:	bb5c      	cbnz	r4, 8005178 <_malloc_r+0x90>
 8005120:	4629      	mov	r1, r5
 8005122:	4638      	mov	r0, r7
 8005124:	f7ff ffc0 	bl	80050a8 <sbrk_aligned>
 8005128:	1c43      	adds	r3, r0, #1
 800512a:	4604      	mov	r4, r0
 800512c:	d155      	bne.n	80051da <_malloc_r+0xf2>
 800512e:	f8d8 4000 	ldr.w	r4, [r8]
 8005132:	4626      	mov	r6, r4
 8005134:	2e00      	cmp	r6, #0
 8005136:	d145      	bne.n	80051c4 <_malloc_r+0xdc>
 8005138:	2c00      	cmp	r4, #0
 800513a:	d048      	beq.n	80051ce <_malloc_r+0xe6>
 800513c:	6823      	ldr	r3, [r4, #0]
 800513e:	4631      	mov	r1, r6
 8005140:	4638      	mov	r0, r7
 8005142:	eb04 0903 	add.w	r9, r4, r3
 8005146:	f000 fc1d 	bl	8005984 <_sbrk_r>
 800514a:	4581      	cmp	r9, r0
 800514c:	d13f      	bne.n	80051ce <_malloc_r+0xe6>
 800514e:	6821      	ldr	r1, [r4, #0]
 8005150:	1a6d      	subs	r5, r5, r1
 8005152:	4629      	mov	r1, r5
 8005154:	4638      	mov	r0, r7
 8005156:	f7ff ffa7 	bl	80050a8 <sbrk_aligned>
 800515a:	3001      	adds	r0, #1
 800515c:	d037      	beq.n	80051ce <_malloc_r+0xe6>
 800515e:	6823      	ldr	r3, [r4, #0]
 8005160:	442b      	add	r3, r5
 8005162:	6023      	str	r3, [r4, #0]
 8005164:	f8d8 3000 	ldr.w	r3, [r8]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d038      	beq.n	80051de <_malloc_r+0xf6>
 800516c:	685a      	ldr	r2, [r3, #4]
 800516e:	42a2      	cmp	r2, r4
 8005170:	d12b      	bne.n	80051ca <_malloc_r+0xe2>
 8005172:	2200      	movs	r2, #0
 8005174:	605a      	str	r2, [r3, #4]
 8005176:	e00f      	b.n	8005198 <_malloc_r+0xb0>
 8005178:	6822      	ldr	r2, [r4, #0]
 800517a:	1b52      	subs	r2, r2, r5
 800517c:	d41f      	bmi.n	80051be <_malloc_r+0xd6>
 800517e:	2a0b      	cmp	r2, #11
 8005180:	d917      	bls.n	80051b2 <_malloc_r+0xca>
 8005182:	1961      	adds	r1, r4, r5
 8005184:	42a3      	cmp	r3, r4
 8005186:	6025      	str	r5, [r4, #0]
 8005188:	bf18      	it	ne
 800518a:	6059      	strne	r1, [r3, #4]
 800518c:	6863      	ldr	r3, [r4, #4]
 800518e:	bf08      	it	eq
 8005190:	f8c8 1000 	streq.w	r1, [r8]
 8005194:	5162      	str	r2, [r4, r5]
 8005196:	604b      	str	r3, [r1, #4]
 8005198:	4638      	mov	r0, r7
 800519a:	f104 060b 	add.w	r6, r4, #11
 800519e:	f000 f829 	bl	80051f4 <__malloc_unlock>
 80051a2:	f026 0607 	bic.w	r6, r6, #7
 80051a6:	1d23      	adds	r3, r4, #4
 80051a8:	1af2      	subs	r2, r6, r3
 80051aa:	d0ae      	beq.n	800510a <_malloc_r+0x22>
 80051ac:	1b9b      	subs	r3, r3, r6
 80051ae:	50a3      	str	r3, [r4, r2]
 80051b0:	e7ab      	b.n	800510a <_malloc_r+0x22>
 80051b2:	42a3      	cmp	r3, r4
 80051b4:	6862      	ldr	r2, [r4, #4]
 80051b6:	d1dd      	bne.n	8005174 <_malloc_r+0x8c>
 80051b8:	f8c8 2000 	str.w	r2, [r8]
 80051bc:	e7ec      	b.n	8005198 <_malloc_r+0xb0>
 80051be:	4623      	mov	r3, r4
 80051c0:	6864      	ldr	r4, [r4, #4]
 80051c2:	e7ac      	b.n	800511e <_malloc_r+0x36>
 80051c4:	4634      	mov	r4, r6
 80051c6:	6876      	ldr	r6, [r6, #4]
 80051c8:	e7b4      	b.n	8005134 <_malloc_r+0x4c>
 80051ca:	4613      	mov	r3, r2
 80051cc:	e7cc      	b.n	8005168 <_malloc_r+0x80>
 80051ce:	230c      	movs	r3, #12
 80051d0:	603b      	str	r3, [r7, #0]
 80051d2:	4638      	mov	r0, r7
 80051d4:	f000 f80e 	bl	80051f4 <__malloc_unlock>
 80051d8:	e797      	b.n	800510a <_malloc_r+0x22>
 80051da:	6025      	str	r5, [r4, #0]
 80051dc:	e7dc      	b.n	8005198 <_malloc_r+0xb0>
 80051de:	605b      	str	r3, [r3, #4]
 80051e0:	deff      	udf	#255	; 0xff
 80051e2:	bf00      	nop
 80051e4:	20000450 	.word	0x20000450

080051e8 <__malloc_lock>:
 80051e8:	4801      	ldr	r0, [pc, #4]	; (80051f0 <__malloc_lock+0x8>)
 80051ea:	f7ff bee8 	b.w	8004fbe <__retarget_lock_acquire_recursive>
 80051ee:	bf00      	nop
 80051f0:	2000044c 	.word	0x2000044c

080051f4 <__malloc_unlock>:
 80051f4:	4801      	ldr	r0, [pc, #4]	; (80051fc <__malloc_unlock+0x8>)
 80051f6:	f7ff bee3 	b.w	8004fc0 <__retarget_lock_release_recursive>
 80051fa:	bf00      	nop
 80051fc:	2000044c 	.word	0x2000044c

08005200 <__ssputs_r>:
 8005200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005204:	688e      	ldr	r6, [r1, #8]
 8005206:	461f      	mov	r7, r3
 8005208:	42be      	cmp	r6, r7
 800520a:	680b      	ldr	r3, [r1, #0]
 800520c:	4682      	mov	sl, r0
 800520e:	460c      	mov	r4, r1
 8005210:	4690      	mov	r8, r2
 8005212:	d82c      	bhi.n	800526e <__ssputs_r+0x6e>
 8005214:	898a      	ldrh	r2, [r1, #12]
 8005216:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800521a:	d026      	beq.n	800526a <__ssputs_r+0x6a>
 800521c:	6965      	ldr	r5, [r4, #20]
 800521e:	6909      	ldr	r1, [r1, #16]
 8005220:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005224:	eba3 0901 	sub.w	r9, r3, r1
 8005228:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800522c:	1c7b      	adds	r3, r7, #1
 800522e:	444b      	add	r3, r9
 8005230:	106d      	asrs	r5, r5, #1
 8005232:	429d      	cmp	r5, r3
 8005234:	bf38      	it	cc
 8005236:	461d      	movcc	r5, r3
 8005238:	0553      	lsls	r3, r2, #21
 800523a:	d527      	bpl.n	800528c <__ssputs_r+0x8c>
 800523c:	4629      	mov	r1, r5
 800523e:	f7ff ff53 	bl	80050e8 <_malloc_r>
 8005242:	4606      	mov	r6, r0
 8005244:	b360      	cbz	r0, 80052a0 <__ssputs_r+0xa0>
 8005246:	6921      	ldr	r1, [r4, #16]
 8005248:	464a      	mov	r2, r9
 800524a:	f000 fbab 	bl	80059a4 <memcpy>
 800524e:	89a3      	ldrh	r3, [r4, #12]
 8005250:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005258:	81a3      	strh	r3, [r4, #12]
 800525a:	6126      	str	r6, [r4, #16]
 800525c:	6165      	str	r5, [r4, #20]
 800525e:	444e      	add	r6, r9
 8005260:	eba5 0509 	sub.w	r5, r5, r9
 8005264:	6026      	str	r6, [r4, #0]
 8005266:	60a5      	str	r5, [r4, #8]
 8005268:	463e      	mov	r6, r7
 800526a:	42be      	cmp	r6, r7
 800526c:	d900      	bls.n	8005270 <__ssputs_r+0x70>
 800526e:	463e      	mov	r6, r7
 8005270:	6820      	ldr	r0, [r4, #0]
 8005272:	4632      	mov	r2, r6
 8005274:	4641      	mov	r1, r8
 8005276:	f000 fb6b 	bl	8005950 <memmove>
 800527a:	68a3      	ldr	r3, [r4, #8]
 800527c:	1b9b      	subs	r3, r3, r6
 800527e:	60a3      	str	r3, [r4, #8]
 8005280:	6823      	ldr	r3, [r4, #0]
 8005282:	4433      	add	r3, r6
 8005284:	6023      	str	r3, [r4, #0]
 8005286:	2000      	movs	r0, #0
 8005288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800528c:	462a      	mov	r2, r5
 800528e:	f000 fb9e 	bl	80059ce <_realloc_r>
 8005292:	4606      	mov	r6, r0
 8005294:	2800      	cmp	r0, #0
 8005296:	d1e0      	bne.n	800525a <__ssputs_r+0x5a>
 8005298:	6921      	ldr	r1, [r4, #16]
 800529a:	4650      	mov	r0, sl
 800529c:	f7ff feb0 	bl	8005000 <_free_r>
 80052a0:	230c      	movs	r3, #12
 80052a2:	f8ca 3000 	str.w	r3, [sl]
 80052a6:	89a3      	ldrh	r3, [r4, #12]
 80052a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052ac:	81a3      	strh	r3, [r4, #12]
 80052ae:	f04f 30ff 	mov.w	r0, #4294967295
 80052b2:	e7e9      	b.n	8005288 <__ssputs_r+0x88>

080052b4 <_svfiprintf_r>:
 80052b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052b8:	4698      	mov	r8, r3
 80052ba:	898b      	ldrh	r3, [r1, #12]
 80052bc:	061b      	lsls	r3, r3, #24
 80052be:	b09d      	sub	sp, #116	; 0x74
 80052c0:	4607      	mov	r7, r0
 80052c2:	460d      	mov	r5, r1
 80052c4:	4614      	mov	r4, r2
 80052c6:	d50e      	bpl.n	80052e6 <_svfiprintf_r+0x32>
 80052c8:	690b      	ldr	r3, [r1, #16]
 80052ca:	b963      	cbnz	r3, 80052e6 <_svfiprintf_r+0x32>
 80052cc:	2140      	movs	r1, #64	; 0x40
 80052ce:	f7ff ff0b 	bl	80050e8 <_malloc_r>
 80052d2:	6028      	str	r0, [r5, #0]
 80052d4:	6128      	str	r0, [r5, #16]
 80052d6:	b920      	cbnz	r0, 80052e2 <_svfiprintf_r+0x2e>
 80052d8:	230c      	movs	r3, #12
 80052da:	603b      	str	r3, [r7, #0]
 80052dc:	f04f 30ff 	mov.w	r0, #4294967295
 80052e0:	e0d0      	b.n	8005484 <_svfiprintf_r+0x1d0>
 80052e2:	2340      	movs	r3, #64	; 0x40
 80052e4:	616b      	str	r3, [r5, #20]
 80052e6:	2300      	movs	r3, #0
 80052e8:	9309      	str	r3, [sp, #36]	; 0x24
 80052ea:	2320      	movs	r3, #32
 80052ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80052f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80052f4:	2330      	movs	r3, #48	; 0x30
 80052f6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800549c <_svfiprintf_r+0x1e8>
 80052fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80052fe:	f04f 0901 	mov.w	r9, #1
 8005302:	4623      	mov	r3, r4
 8005304:	469a      	mov	sl, r3
 8005306:	f813 2b01 	ldrb.w	r2, [r3], #1
 800530a:	b10a      	cbz	r2, 8005310 <_svfiprintf_r+0x5c>
 800530c:	2a25      	cmp	r2, #37	; 0x25
 800530e:	d1f9      	bne.n	8005304 <_svfiprintf_r+0x50>
 8005310:	ebba 0b04 	subs.w	fp, sl, r4
 8005314:	d00b      	beq.n	800532e <_svfiprintf_r+0x7a>
 8005316:	465b      	mov	r3, fp
 8005318:	4622      	mov	r2, r4
 800531a:	4629      	mov	r1, r5
 800531c:	4638      	mov	r0, r7
 800531e:	f7ff ff6f 	bl	8005200 <__ssputs_r>
 8005322:	3001      	adds	r0, #1
 8005324:	f000 80a9 	beq.w	800547a <_svfiprintf_r+0x1c6>
 8005328:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800532a:	445a      	add	r2, fp
 800532c:	9209      	str	r2, [sp, #36]	; 0x24
 800532e:	f89a 3000 	ldrb.w	r3, [sl]
 8005332:	2b00      	cmp	r3, #0
 8005334:	f000 80a1 	beq.w	800547a <_svfiprintf_r+0x1c6>
 8005338:	2300      	movs	r3, #0
 800533a:	f04f 32ff 	mov.w	r2, #4294967295
 800533e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005342:	f10a 0a01 	add.w	sl, sl, #1
 8005346:	9304      	str	r3, [sp, #16]
 8005348:	9307      	str	r3, [sp, #28]
 800534a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800534e:	931a      	str	r3, [sp, #104]	; 0x68
 8005350:	4654      	mov	r4, sl
 8005352:	2205      	movs	r2, #5
 8005354:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005358:	4850      	ldr	r0, [pc, #320]	; (800549c <_svfiprintf_r+0x1e8>)
 800535a:	f7fa ff39 	bl	80001d0 <memchr>
 800535e:	9a04      	ldr	r2, [sp, #16]
 8005360:	b9d8      	cbnz	r0, 800539a <_svfiprintf_r+0xe6>
 8005362:	06d0      	lsls	r0, r2, #27
 8005364:	bf44      	itt	mi
 8005366:	2320      	movmi	r3, #32
 8005368:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800536c:	0711      	lsls	r1, r2, #28
 800536e:	bf44      	itt	mi
 8005370:	232b      	movmi	r3, #43	; 0x2b
 8005372:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005376:	f89a 3000 	ldrb.w	r3, [sl]
 800537a:	2b2a      	cmp	r3, #42	; 0x2a
 800537c:	d015      	beq.n	80053aa <_svfiprintf_r+0xf6>
 800537e:	9a07      	ldr	r2, [sp, #28]
 8005380:	4654      	mov	r4, sl
 8005382:	2000      	movs	r0, #0
 8005384:	f04f 0c0a 	mov.w	ip, #10
 8005388:	4621      	mov	r1, r4
 800538a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800538e:	3b30      	subs	r3, #48	; 0x30
 8005390:	2b09      	cmp	r3, #9
 8005392:	d94d      	bls.n	8005430 <_svfiprintf_r+0x17c>
 8005394:	b1b0      	cbz	r0, 80053c4 <_svfiprintf_r+0x110>
 8005396:	9207      	str	r2, [sp, #28]
 8005398:	e014      	b.n	80053c4 <_svfiprintf_r+0x110>
 800539a:	eba0 0308 	sub.w	r3, r0, r8
 800539e:	fa09 f303 	lsl.w	r3, r9, r3
 80053a2:	4313      	orrs	r3, r2
 80053a4:	9304      	str	r3, [sp, #16]
 80053a6:	46a2      	mov	sl, r4
 80053a8:	e7d2      	b.n	8005350 <_svfiprintf_r+0x9c>
 80053aa:	9b03      	ldr	r3, [sp, #12]
 80053ac:	1d19      	adds	r1, r3, #4
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	9103      	str	r1, [sp, #12]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	bfbb      	ittet	lt
 80053b6:	425b      	neglt	r3, r3
 80053b8:	f042 0202 	orrlt.w	r2, r2, #2
 80053bc:	9307      	strge	r3, [sp, #28]
 80053be:	9307      	strlt	r3, [sp, #28]
 80053c0:	bfb8      	it	lt
 80053c2:	9204      	strlt	r2, [sp, #16]
 80053c4:	7823      	ldrb	r3, [r4, #0]
 80053c6:	2b2e      	cmp	r3, #46	; 0x2e
 80053c8:	d10c      	bne.n	80053e4 <_svfiprintf_r+0x130>
 80053ca:	7863      	ldrb	r3, [r4, #1]
 80053cc:	2b2a      	cmp	r3, #42	; 0x2a
 80053ce:	d134      	bne.n	800543a <_svfiprintf_r+0x186>
 80053d0:	9b03      	ldr	r3, [sp, #12]
 80053d2:	1d1a      	adds	r2, r3, #4
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	9203      	str	r2, [sp, #12]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	bfb8      	it	lt
 80053dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80053e0:	3402      	adds	r4, #2
 80053e2:	9305      	str	r3, [sp, #20]
 80053e4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80054ac <_svfiprintf_r+0x1f8>
 80053e8:	7821      	ldrb	r1, [r4, #0]
 80053ea:	2203      	movs	r2, #3
 80053ec:	4650      	mov	r0, sl
 80053ee:	f7fa feef 	bl	80001d0 <memchr>
 80053f2:	b138      	cbz	r0, 8005404 <_svfiprintf_r+0x150>
 80053f4:	9b04      	ldr	r3, [sp, #16]
 80053f6:	eba0 000a 	sub.w	r0, r0, sl
 80053fa:	2240      	movs	r2, #64	; 0x40
 80053fc:	4082      	lsls	r2, r0
 80053fe:	4313      	orrs	r3, r2
 8005400:	3401      	adds	r4, #1
 8005402:	9304      	str	r3, [sp, #16]
 8005404:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005408:	4825      	ldr	r0, [pc, #148]	; (80054a0 <_svfiprintf_r+0x1ec>)
 800540a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800540e:	2206      	movs	r2, #6
 8005410:	f7fa fede 	bl	80001d0 <memchr>
 8005414:	2800      	cmp	r0, #0
 8005416:	d038      	beq.n	800548a <_svfiprintf_r+0x1d6>
 8005418:	4b22      	ldr	r3, [pc, #136]	; (80054a4 <_svfiprintf_r+0x1f0>)
 800541a:	bb1b      	cbnz	r3, 8005464 <_svfiprintf_r+0x1b0>
 800541c:	9b03      	ldr	r3, [sp, #12]
 800541e:	3307      	adds	r3, #7
 8005420:	f023 0307 	bic.w	r3, r3, #7
 8005424:	3308      	adds	r3, #8
 8005426:	9303      	str	r3, [sp, #12]
 8005428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800542a:	4433      	add	r3, r6
 800542c:	9309      	str	r3, [sp, #36]	; 0x24
 800542e:	e768      	b.n	8005302 <_svfiprintf_r+0x4e>
 8005430:	fb0c 3202 	mla	r2, ip, r2, r3
 8005434:	460c      	mov	r4, r1
 8005436:	2001      	movs	r0, #1
 8005438:	e7a6      	b.n	8005388 <_svfiprintf_r+0xd4>
 800543a:	2300      	movs	r3, #0
 800543c:	3401      	adds	r4, #1
 800543e:	9305      	str	r3, [sp, #20]
 8005440:	4619      	mov	r1, r3
 8005442:	f04f 0c0a 	mov.w	ip, #10
 8005446:	4620      	mov	r0, r4
 8005448:	f810 2b01 	ldrb.w	r2, [r0], #1
 800544c:	3a30      	subs	r2, #48	; 0x30
 800544e:	2a09      	cmp	r2, #9
 8005450:	d903      	bls.n	800545a <_svfiprintf_r+0x1a6>
 8005452:	2b00      	cmp	r3, #0
 8005454:	d0c6      	beq.n	80053e4 <_svfiprintf_r+0x130>
 8005456:	9105      	str	r1, [sp, #20]
 8005458:	e7c4      	b.n	80053e4 <_svfiprintf_r+0x130>
 800545a:	fb0c 2101 	mla	r1, ip, r1, r2
 800545e:	4604      	mov	r4, r0
 8005460:	2301      	movs	r3, #1
 8005462:	e7f0      	b.n	8005446 <_svfiprintf_r+0x192>
 8005464:	ab03      	add	r3, sp, #12
 8005466:	9300      	str	r3, [sp, #0]
 8005468:	462a      	mov	r2, r5
 800546a:	4b0f      	ldr	r3, [pc, #60]	; (80054a8 <_svfiprintf_r+0x1f4>)
 800546c:	a904      	add	r1, sp, #16
 800546e:	4638      	mov	r0, r7
 8005470:	f3af 8000 	nop.w
 8005474:	1c42      	adds	r2, r0, #1
 8005476:	4606      	mov	r6, r0
 8005478:	d1d6      	bne.n	8005428 <_svfiprintf_r+0x174>
 800547a:	89ab      	ldrh	r3, [r5, #12]
 800547c:	065b      	lsls	r3, r3, #25
 800547e:	f53f af2d 	bmi.w	80052dc <_svfiprintf_r+0x28>
 8005482:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005484:	b01d      	add	sp, #116	; 0x74
 8005486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800548a:	ab03      	add	r3, sp, #12
 800548c:	9300      	str	r3, [sp, #0]
 800548e:	462a      	mov	r2, r5
 8005490:	4b05      	ldr	r3, [pc, #20]	; (80054a8 <_svfiprintf_r+0x1f4>)
 8005492:	a904      	add	r1, sp, #16
 8005494:	4638      	mov	r0, r7
 8005496:	f000 f879 	bl	800558c <_printf_i>
 800549a:	e7eb      	b.n	8005474 <_svfiprintf_r+0x1c0>
 800549c:	08006336 	.word	0x08006336
 80054a0:	08006340 	.word	0x08006340
 80054a4:	00000000 	.word	0x00000000
 80054a8:	08005201 	.word	0x08005201
 80054ac:	0800633c 	.word	0x0800633c

080054b0 <_printf_common>:
 80054b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054b4:	4616      	mov	r6, r2
 80054b6:	4699      	mov	r9, r3
 80054b8:	688a      	ldr	r2, [r1, #8]
 80054ba:	690b      	ldr	r3, [r1, #16]
 80054bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80054c0:	4293      	cmp	r3, r2
 80054c2:	bfb8      	it	lt
 80054c4:	4613      	movlt	r3, r2
 80054c6:	6033      	str	r3, [r6, #0]
 80054c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80054cc:	4607      	mov	r7, r0
 80054ce:	460c      	mov	r4, r1
 80054d0:	b10a      	cbz	r2, 80054d6 <_printf_common+0x26>
 80054d2:	3301      	adds	r3, #1
 80054d4:	6033      	str	r3, [r6, #0]
 80054d6:	6823      	ldr	r3, [r4, #0]
 80054d8:	0699      	lsls	r1, r3, #26
 80054da:	bf42      	ittt	mi
 80054dc:	6833      	ldrmi	r3, [r6, #0]
 80054de:	3302      	addmi	r3, #2
 80054e0:	6033      	strmi	r3, [r6, #0]
 80054e2:	6825      	ldr	r5, [r4, #0]
 80054e4:	f015 0506 	ands.w	r5, r5, #6
 80054e8:	d106      	bne.n	80054f8 <_printf_common+0x48>
 80054ea:	f104 0a19 	add.w	sl, r4, #25
 80054ee:	68e3      	ldr	r3, [r4, #12]
 80054f0:	6832      	ldr	r2, [r6, #0]
 80054f2:	1a9b      	subs	r3, r3, r2
 80054f4:	42ab      	cmp	r3, r5
 80054f6:	dc26      	bgt.n	8005546 <_printf_common+0x96>
 80054f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80054fc:	1e13      	subs	r3, r2, #0
 80054fe:	6822      	ldr	r2, [r4, #0]
 8005500:	bf18      	it	ne
 8005502:	2301      	movne	r3, #1
 8005504:	0692      	lsls	r2, r2, #26
 8005506:	d42b      	bmi.n	8005560 <_printf_common+0xb0>
 8005508:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800550c:	4649      	mov	r1, r9
 800550e:	4638      	mov	r0, r7
 8005510:	47c0      	blx	r8
 8005512:	3001      	adds	r0, #1
 8005514:	d01e      	beq.n	8005554 <_printf_common+0xa4>
 8005516:	6823      	ldr	r3, [r4, #0]
 8005518:	6922      	ldr	r2, [r4, #16]
 800551a:	f003 0306 	and.w	r3, r3, #6
 800551e:	2b04      	cmp	r3, #4
 8005520:	bf02      	ittt	eq
 8005522:	68e5      	ldreq	r5, [r4, #12]
 8005524:	6833      	ldreq	r3, [r6, #0]
 8005526:	1aed      	subeq	r5, r5, r3
 8005528:	68a3      	ldr	r3, [r4, #8]
 800552a:	bf0c      	ite	eq
 800552c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005530:	2500      	movne	r5, #0
 8005532:	4293      	cmp	r3, r2
 8005534:	bfc4      	itt	gt
 8005536:	1a9b      	subgt	r3, r3, r2
 8005538:	18ed      	addgt	r5, r5, r3
 800553a:	2600      	movs	r6, #0
 800553c:	341a      	adds	r4, #26
 800553e:	42b5      	cmp	r5, r6
 8005540:	d11a      	bne.n	8005578 <_printf_common+0xc8>
 8005542:	2000      	movs	r0, #0
 8005544:	e008      	b.n	8005558 <_printf_common+0xa8>
 8005546:	2301      	movs	r3, #1
 8005548:	4652      	mov	r2, sl
 800554a:	4649      	mov	r1, r9
 800554c:	4638      	mov	r0, r7
 800554e:	47c0      	blx	r8
 8005550:	3001      	adds	r0, #1
 8005552:	d103      	bne.n	800555c <_printf_common+0xac>
 8005554:	f04f 30ff 	mov.w	r0, #4294967295
 8005558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800555c:	3501      	adds	r5, #1
 800555e:	e7c6      	b.n	80054ee <_printf_common+0x3e>
 8005560:	18e1      	adds	r1, r4, r3
 8005562:	1c5a      	adds	r2, r3, #1
 8005564:	2030      	movs	r0, #48	; 0x30
 8005566:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800556a:	4422      	add	r2, r4
 800556c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005570:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005574:	3302      	adds	r3, #2
 8005576:	e7c7      	b.n	8005508 <_printf_common+0x58>
 8005578:	2301      	movs	r3, #1
 800557a:	4622      	mov	r2, r4
 800557c:	4649      	mov	r1, r9
 800557e:	4638      	mov	r0, r7
 8005580:	47c0      	blx	r8
 8005582:	3001      	adds	r0, #1
 8005584:	d0e6      	beq.n	8005554 <_printf_common+0xa4>
 8005586:	3601      	adds	r6, #1
 8005588:	e7d9      	b.n	800553e <_printf_common+0x8e>
	...

0800558c <_printf_i>:
 800558c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005590:	7e0f      	ldrb	r7, [r1, #24]
 8005592:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005594:	2f78      	cmp	r7, #120	; 0x78
 8005596:	4691      	mov	r9, r2
 8005598:	4680      	mov	r8, r0
 800559a:	460c      	mov	r4, r1
 800559c:	469a      	mov	sl, r3
 800559e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80055a2:	d807      	bhi.n	80055b4 <_printf_i+0x28>
 80055a4:	2f62      	cmp	r7, #98	; 0x62
 80055a6:	d80a      	bhi.n	80055be <_printf_i+0x32>
 80055a8:	2f00      	cmp	r7, #0
 80055aa:	f000 80d4 	beq.w	8005756 <_printf_i+0x1ca>
 80055ae:	2f58      	cmp	r7, #88	; 0x58
 80055b0:	f000 80c0 	beq.w	8005734 <_printf_i+0x1a8>
 80055b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80055bc:	e03a      	b.n	8005634 <_printf_i+0xa8>
 80055be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80055c2:	2b15      	cmp	r3, #21
 80055c4:	d8f6      	bhi.n	80055b4 <_printf_i+0x28>
 80055c6:	a101      	add	r1, pc, #4	; (adr r1, 80055cc <_printf_i+0x40>)
 80055c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055cc:	08005625 	.word	0x08005625
 80055d0:	08005639 	.word	0x08005639
 80055d4:	080055b5 	.word	0x080055b5
 80055d8:	080055b5 	.word	0x080055b5
 80055dc:	080055b5 	.word	0x080055b5
 80055e0:	080055b5 	.word	0x080055b5
 80055e4:	08005639 	.word	0x08005639
 80055e8:	080055b5 	.word	0x080055b5
 80055ec:	080055b5 	.word	0x080055b5
 80055f0:	080055b5 	.word	0x080055b5
 80055f4:	080055b5 	.word	0x080055b5
 80055f8:	0800573d 	.word	0x0800573d
 80055fc:	08005665 	.word	0x08005665
 8005600:	080056f7 	.word	0x080056f7
 8005604:	080055b5 	.word	0x080055b5
 8005608:	080055b5 	.word	0x080055b5
 800560c:	0800575f 	.word	0x0800575f
 8005610:	080055b5 	.word	0x080055b5
 8005614:	08005665 	.word	0x08005665
 8005618:	080055b5 	.word	0x080055b5
 800561c:	080055b5 	.word	0x080055b5
 8005620:	080056ff 	.word	0x080056ff
 8005624:	682b      	ldr	r3, [r5, #0]
 8005626:	1d1a      	adds	r2, r3, #4
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	602a      	str	r2, [r5, #0]
 800562c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005630:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005634:	2301      	movs	r3, #1
 8005636:	e09f      	b.n	8005778 <_printf_i+0x1ec>
 8005638:	6820      	ldr	r0, [r4, #0]
 800563a:	682b      	ldr	r3, [r5, #0]
 800563c:	0607      	lsls	r7, r0, #24
 800563e:	f103 0104 	add.w	r1, r3, #4
 8005642:	6029      	str	r1, [r5, #0]
 8005644:	d501      	bpl.n	800564a <_printf_i+0xbe>
 8005646:	681e      	ldr	r6, [r3, #0]
 8005648:	e003      	b.n	8005652 <_printf_i+0xc6>
 800564a:	0646      	lsls	r6, r0, #25
 800564c:	d5fb      	bpl.n	8005646 <_printf_i+0xba>
 800564e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005652:	2e00      	cmp	r6, #0
 8005654:	da03      	bge.n	800565e <_printf_i+0xd2>
 8005656:	232d      	movs	r3, #45	; 0x2d
 8005658:	4276      	negs	r6, r6
 800565a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800565e:	485a      	ldr	r0, [pc, #360]	; (80057c8 <_printf_i+0x23c>)
 8005660:	230a      	movs	r3, #10
 8005662:	e012      	b.n	800568a <_printf_i+0xfe>
 8005664:	682b      	ldr	r3, [r5, #0]
 8005666:	6820      	ldr	r0, [r4, #0]
 8005668:	1d19      	adds	r1, r3, #4
 800566a:	6029      	str	r1, [r5, #0]
 800566c:	0605      	lsls	r5, r0, #24
 800566e:	d501      	bpl.n	8005674 <_printf_i+0xe8>
 8005670:	681e      	ldr	r6, [r3, #0]
 8005672:	e002      	b.n	800567a <_printf_i+0xee>
 8005674:	0641      	lsls	r1, r0, #25
 8005676:	d5fb      	bpl.n	8005670 <_printf_i+0xe4>
 8005678:	881e      	ldrh	r6, [r3, #0]
 800567a:	4853      	ldr	r0, [pc, #332]	; (80057c8 <_printf_i+0x23c>)
 800567c:	2f6f      	cmp	r7, #111	; 0x6f
 800567e:	bf0c      	ite	eq
 8005680:	2308      	moveq	r3, #8
 8005682:	230a      	movne	r3, #10
 8005684:	2100      	movs	r1, #0
 8005686:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800568a:	6865      	ldr	r5, [r4, #4]
 800568c:	60a5      	str	r5, [r4, #8]
 800568e:	2d00      	cmp	r5, #0
 8005690:	bfa2      	ittt	ge
 8005692:	6821      	ldrge	r1, [r4, #0]
 8005694:	f021 0104 	bicge.w	r1, r1, #4
 8005698:	6021      	strge	r1, [r4, #0]
 800569a:	b90e      	cbnz	r6, 80056a0 <_printf_i+0x114>
 800569c:	2d00      	cmp	r5, #0
 800569e:	d04b      	beq.n	8005738 <_printf_i+0x1ac>
 80056a0:	4615      	mov	r5, r2
 80056a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80056a6:	fb03 6711 	mls	r7, r3, r1, r6
 80056aa:	5dc7      	ldrb	r7, [r0, r7]
 80056ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80056b0:	4637      	mov	r7, r6
 80056b2:	42bb      	cmp	r3, r7
 80056b4:	460e      	mov	r6, r1
 80056b6:	d9f4      	bls.n	80056a2 <_printf_i+0x116>
 80056b8:	2b08      	cmp	r3, #8
 80056ba:	d10b      	bne.n	80056d4 <_printf_i+0x148>
 80056bc:	6823      	ldr	r3, [r4, #0]
 80056be:	07de      	lsls	r6, r3, #31
 80056c0:	d508      	bpl.n	80056d4 <_printf_i+0x148>
 80056c2:	6923      	ldr	r3, [r4, #16]
 80056c4:	6861      	ldr	r1, [r4, #4]
 80056c6:	4299      	cmp	r1, r3
 80056c8:	bfde      	ittt	le
 80056ca:	2330      	movle	r3, #48	; 0x30
 80056cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80056d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80056d4:	1b52      	subs	r2, r2, r5
 80056d6:	6122      	str	r2, [r4, #16]
 80056d8:	f8cd a000 	str.w	sl, [sp]
 80056dc:	464b      	mov	r3, r9
 80056de:	aa03      	add	r2, sp, #12
 80056e0:	4621      	mov	r1, r4
 80056e2:	4640      	mov	r0, r8
 80056e4:	f7ff fee4 	bl	80054b0 <_printf_common>
 80056e8:	3001      	adds	r0, #1
 80056ea:	d14a      	bne.n	8005782 <_printf_i+0x1f6>
 80056ec:	f04f 30ff 	mov.w	r0, #4294967295
 80056f0:	b004      	add	sp, #16
 80056f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056f6:	6823      	ldr	r3, [r4, #0]
 80056f8:	f043 0320 	orr.w	r3, r3, #32
 80056fc:	6023      	str	r3, [r4, #0]
 80056fe:	4833      	ldr	r0, [pc, #204]	; (80057cc <_printf_i+0x240>)
 8005700:	2778      	movs	r7, #120	; 0x78
 8005702:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005706:	6823      	ldr	r3, [r4, #0]
 8005708:	6829      	ldr	r1, [r5, #0]
 800570a:	061f      	lsls	r7, r3, #24
 800570c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005710:	d402      	bmi.n	8005718 <_printf_i+0x18c>
 8005712:	065f      	lsls	r7, r3, #25
 8005714:	bf48      	it	mi
 8005716:	b2b6      	uxthmi	r6, r6
 8005718:	07df      	lsls	r7, r3, #31
 800571a:	bf48      	it	mi
 800571c:	f043 0320 	orrmi.w	r3, r3, #32
 8005720:	6029      	str	r1, [r5, #0]
 8005722:	bf48      	it	mi
 8005724:	6023      	strmi	r3, [r4, #0]
 8005726:	b91e      	cbnz	r6, 8005730 <_printf_i+0x1a4>
 8005728:	6823      	ldr	r3, [r4, #0]
 800572a:	f023 0320 	bic.w	r3, r3, #32
 800572e:	6023      	str	r3, [r4, #0]
 8005730:	2310      	movs	r3, #16
 8005732:	e7a7      	b.n	8005684 <_printf_i+0xf8>
 8005734:	4824      	ldr	r0, [pc, #144]	; (80057c8 <_printf_i+0x23c>)
 8005736:	e7e4      	b.n	8005702 <_printf_i+0x176>
 8005738:	4615      	mov	r5, r2
 800573a:	e7bd      	b.n	80056b8 <_printf_i+0x12c>
 800573c:	682b      	ldr	r3, [r5, #0]
 800573e:	6826      	ldr	r6, [r4, #0]
 8005740:	6961      	ldr	r1, [r4, #20]
 8005742:	1d18      	adds	r0, r3, #4
 8005744:	6028      	str	r0, [r5, #0]
 8005746:	0635      	lsls	r5, r6, #24
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	d501      	bpl.n	8005750 <_printf_i+0x1c4>
 800574c:	6019      	str	r1, [r3, #0]
 800574e:	e002      	b.n	8005756 <_printf_i+0x1ca>
 8005750:	0670      	lsls	r0, r6, #25
 8005752:	d5fb      	bpl.n	800574c <_printf_i+0x1c0>
 8005754:	8019      	strh	r1, [r3, #0]
 8005756:	2300      	movs	r3, #0
 8005758:	6123      	str	r3, [r4, #16]
 800575a:	4615      	mov	r5, r2
 800575c:	e7bc      	b.n	80056d8 <_printf_i+0x14c>
 800575e:	682b      	ldr	r3, [r5, #0]
 8005760:	1d1a      	adds	r2, r3, #4
 8005762:	602a      	str	r2, [r5, #0]
 8005764:	681d      	ldr	r5, [r3, #0]
 8005766:	6862      	ldr	r2, [r4, #4]
 8005768:	2100      	movs	r1, #0
 800576a:	4628      	mov	r0, r5
 800576c:	f7fa fd30 	bl	80001d0 <memchr>
 8005770:	b108      	cbz	r0, 8005776 <_printf_i+0x1ea>
 8005772:	1b40      	subs	r0, r0, r5
 8005774:	6060      	str	r0, [r4, #4]
 8005776:	6863      	ldr	r3, [r4, #4]
 8005778:	6123      	str	r3, [r4, #16]
 800577a:	2300      	movs	r3, #0
 800577c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005780:	e7aa      	b.n	80056d8 <_printf_i+0x14c>
 8005782:	6923      	ldr	r3, [r4, #16]
 8005784:	462a      	mov	r2, r5
 8005786:	4649      	mov	r1, r9
 8005788:	4640      	mov	r0, r8
 800578a:	47d0      	blx	sl
 800578c:	3001      	adds	r0, #1
 800578e:	d0ad      	beq.n	80056ec <_printf_i+0x160>
 8005790:	6823      	ldr	r3, [r4, #0]
 8005792:	079b      	lsls	r3, r3, #30
 8005794:	d413      	bmi.n	80057be <_printf_i+0x232>
 8005796:	68e0      	ldr	r0, [r4, #12]
 8005798:	9b03      	ldr	r3, [sp, #12]
 800579a:	4298      	cmp	r0, r3
 800579c:	bfb8      	it	lt
 800579e:	4618      	movlt	r0, r3
 80057a0:	e7a6      	b.n	80056f0 <_printf_i+0x164>
 80057a2:	2301      	movs	r3, #1
 80057a4:	4632      	mov	r2, r6
 80057a6:	4649      	mov	r1, r9
 80057a8:	4640      	mov	r0, r8
 80057aa:	47d0      	blx	sl
 80057ac:	3001      	adds	r0, #1
 80057ae:	d09d      	beq.n	80056ec <_printf_i+0x160>
 80057b0:	3501      	adds	r5, #1
 80057b2:	68e3      	ldr	r3, [r4, #12]
 80057b4:	9903      	ldr	r1, [sp, #12]
 80057b6:	1a5b      	subs	r3, r3, r1
 80057b8:	42ab      	cmp	r3, r5
 80057ba:	dcf2      	bgt.n	80057a2 <_printf_i+0x216>
 80057bc:	e7eb      	b.n	8005796 <_printf_i+0x20a>
 80057be:	2500      	movs	r5, #0
 80057c0:	f104 0619 	add.w	r6, r4, #25
 80057c4:	e7f5      	b.n	80057b2 <_printf_i+0x226>
 80057c6:	bf00      	nop
 80057c8:	08006347 	.word	0x08006347
 80057cc:	08006358 	.word	0x08006358

080057d0 <__sflush_r>:
 80057d0:	898a      	ldrh	r2, [r1, #12]
 80057d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057d6:	4605      	mov	r5, r0
 80057d8:	0710      	lsls	r0, r2, #28
 80057da:	460c      	mov	r4, r1
 80057dc:	d458      	bmi.n	8005890 <__sflush_r+0xc0>
 80057de:	684b      	ldr	r3, [r1, #4]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	dc05      	bgt.n	80057f0 <__sflush_r+0x20>
 80057e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	dc02      	bgt.n	80057f0 <__sflush_r+0x20>
 80057ea:	2000      	movs	r0, #0
 80057ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057f2:	2e00      	cmp	r6, #0
 80057f4:	d0f9      	beq.n	80057ea <__sflush_r+0x1a>
 80057f6:	2300      	movs	r3, #0
 80057f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80057fc:	682f      	ldr	r7, [r5, #0]
 80057fe:	6a21      	ldr	r1, [r4, #32]
 8005800:	602b      	str	r3, [r5, #0]
 8005802:	d032      	beq.n	800586a <__sflush_r+0x9a>
 8005804:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005806:	89a3      	ldrh	r3, [r4, #12]
 8005808:	075a      	lsls	r2, r3, #29
 800580a:	d505      	bpl.n	8005818 <__sflush_r+0x48>
 800580c:	6863      	ldr	r3, [r4, #4]
 800580e:	1ac0      	subs	r0, r0, r3
 8005810:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005812:	b10b      	cbz	r3, 8005818 <__sflush_r+0x48>
 8005814:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005816:	1ac0      	subs	r0, r0, r3
 8005818:	2300      	movs	r3, #0
 800581a:	4602      	mov	r2, r0
 800581c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800581e:	6a21      	ldr	r1, [r4, #32]
 8005820:	4628      	mov	r0, r5
 8005822:	47b0      	blx	r6
 8005824:	1c43      	adds	r3, r0, #1
 8005826:	89a3      	ldrh	r3, [r4, #12]
 8005828:	d106      	bne.n	8005838 <__sflush_r+0x68>
 800582a:	6829      	ldr	r1, [r5, #0]
 800582c:	291d      	cmp	r1, #29
 800582e:	d82b      	bhi.n	8005888 <__sflush_r+0xb8>
 8005830:	4a29      	ldr	r2, [pc, #164]	; (80058d8 <__sflush_r+0x108>)
 8005832:	410a      	asrs	r2, r1
 8005834:	07d6      	lsls	r6, r2, #31
 8005836:	d427      	bmi.n	8005888 <__sflush_r+0xb8>
 8005838:	2200      	movs	r2, #0
 800583a:	6062      	str	r2, [r4, #4]
 800583c:	04d9      	lsls	r1, r3, #19
 800583e:	6922      	ldr	r2, [r4, #16]
 8005840:	6022      	str	r2, [r4, #0]
 8005842:	d504      	bpl.n	800584e <__sflush_r+0x7e>
 8005844:	1c42      	adds	r2, r0, #1
 8005846:	d101      	bne.n	800584c <__sflush_r+0x7c>
 8005848:	682b      	ldr	r3, [r5, #0]
 800584a:	b903      	cbnz	r3, 800584e <__sflush_r+0x7e>
 800584c:	6560      	str	r0, [r4, #84]	; 0x54
 800584e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005850:	602f      	str	r7, [r5, #0]
 8005852:	2900      	cmp	r1, #0
 8005854:	d0c9      	beq.n	80057ea <__sflush_r+0x1a>
 8005856:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800585a:	4299      	cmp	r1, r3
 800585c:	d002      	beq.n	8005864 <__sflush_r+0x94>
 800585e:	4628      	mov	r0, r5
 8005860:	f7ff fbce 	bl	8005000 <_free_r>
 8005864:	2000      	movs	r0, #0
 8005866:	6360      	str	r0, [r4, #52]	; 0x34
 8005868:	e7c0      	b.n	80057ec <__sflush_r+0x1c>
 800586a:	2301      	movs	r3, #1
 800586c:	4628      	mov	r0, r5
 800586e:	47b0      	blx	r6
 8005870:	1c41      	adds	r1, r0, #1
 8005872:	d1c8      	bne.n	8005806 <__sflush_r+0x36>
 8005874:	682b      	ldr	r3, [r5, #0]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d0c5      	beq.n	8005806 <__sflush_r+0x36>
 800587a:	2b1d      	cmp	r3, #29
 800587c:	d001      	beq.n	8005882 <__sflush_r+0xb2>
 800587e:	2b16      	cmp	r3, #22
 8005880:	d101      	bne.n	8005886 <__sflush_r+0xb6>
 8005882:	602f      	str	r7, [r5, #0]
 8005884:	e7b1      	b.n	80057ea <__sflush_r+0x1a>
 8005886:	89a3      	ldrh	r3, [r4, #12]
 8005888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800588c:	81a3      	strh	r3, [r4, #12]
 800588e:	e7ad      	b.n	80057ec <__sflush_r+0x1c>
 8005890:	690f      	ldr	r7, [r1, #16]
 8005892:	2f00      	cmp	r7, #0
 8005894:	d0a9      	beq.n	80057ea <__sflush_r+0x1a>
 8005896:	0793      	lsls	r3, r2, #30
 8005898:	680e      	ldr	r6, [r1, #0]
 800589a:	bf08      	it	eq
 800589c:	694b      	ldreq	r3, [r1, #20]
 800589e:	600f      	str	r7, [r1, #0]
 80058a0:	bf18      	it	ne
 80058a2:	2300      	movne	r3, #0
 80058a4:	eba6 0807 	sub.w	r8, r6, r7
 80058a8:	608b      	str	r3, [r1, #8]
 80058aa:	f1b8 0f00 	cmp.w	r8, #0
 80058ae:	dd9c      	ble.n	80057ea <__sflush_r+0x1a>
 80058b0:	6a21      	ldr	r1, [r4, #32]
 80058b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80058b4:	4643      	mov	r3, r8
 80058b6:	463a      	mov	r2, r7
 80058b8:	4628      	mov	r0, r5
 80058ba:	47b0      	blx	r6
 80058bc:	2800      	cmp	r0, #0
 80058be:	dc06      	bgt.n	80058ce <__sflush_r+0xfe>
 80058c0:	89a3      	ldrh	r3, [r4, #12]
 80058c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058c6:	81a3      	strh	r3, [r4, #12]
 80058c8:	f04f 30ff 	mov.w	r0, #4294967295
 80058cc:	e78e      	b.n	80057ec <__sflush_r+0x1c>
 80058ce:	4407      	add	r7, r0
 80058d0:	eba8 0800 	sub.w	r8, r8, r0
 80058d4:	e7e9      	b.n	80058aa <__sflush_r+0xda>
 80058d6:	bf00      	nop
 80058d8:	dfbffffe 	.word	0xdfbffffe

080058dc <_fflush_r>:
 80058dc:	b538      	push	{r3, r4, r5, lr}
 80058de:	690b      	ldr	r3, [r1, #16]
 80058e0:	4605      	mov	r5, r0
 80058e2:	460c      	mov	r4, r1
 80058e4:	b913      	cbnz	r3, 80058ec <_fflush_r+0x10>
 80058e6:	2500      	movs	r5, #0
 80058e8:	4628      	mov	r0, r5
 80058ea:	bd38      	pop	{r3, r4, r5, pc}
 80058ec:	b118      	cbz	r0, 80058f6 <_fflush_r+0x1a>
 80058ee:	6a03      	ldr	r3, [r0, #32]
 80058f0:	b90b      	cbnz	r3, 80058f6 <_fflush_r+0x1a>
 80058f2:	f7ff f9cf 	bl	8004c94 <__sinit>
 80058f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d0f3      	beq.n	80058e6 <_fflush_r+0xa>
 80058fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005900:	07d0      	lsls	r0, r2, #31
 8005902:	d404      	bmi.n	800590e <_fflush_r+0x32>
 8005904:	0599      	lsls	r1, r3, #22
 8005906:	d402      	bmi.n	800590e <_fflush_r+0x32>
 8005908:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800590a:	f7ff fb58 	bl	8004fbe <__retarget_lock_acquire_recursive>
 800590e:	4628      	mov	r0, r5
 8005910:	4621      	mov	r1, r4
 8005912:	f7ff ff5d 	bl	80057d0 <__sflush_r>
 8005916:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005918:	07da      	lsls	r2, r3, #31
 800591a:	4605      	mov	r5, r0
 800591c:	d4e4      	bmi.n	80058e8 <_fflush_r+0xc>
 800591e:	89a3      	ldrh	r3, [r4, #12]
 8005920:	059b      	lsls	r3, r3, #22
 8005922:	d4e1      	bmi.n	80058e8 <_fflush_r+0xc>
 8005924:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005926:	f7ff fb4b 	bl	8004fc0 <__retarget_lock_release_recursive>
 800592a:	e7dd      	b.n	80058e8 <_fflush_r+0xc>

0800592c <fiprintf>:
 800592c:	b40e      	push	{r1, r2, r3}
 800592e:	b503      	push	{r0, r1, lr}
 8005930:	4601      	mov	r1, r0
 8005932:	ab03      	add	r3, sp, #12
 8005934:	4805      	ldr	r0, [pc, #20]	; (800594c <fiprintf+0x20>)
 8005936:	f853 2b04 	ldr.w	r2, [r3], #4
 800593a:	6800      	ldr	r0, [r0, #0]
 800593c:	9301      	str	r3, [sp, #4]
 800593e:	f000 f89f 	bl	8005a80 <_vfiprintf_r>
 8005942:	b002      	add	sp, #8
 8005944:	f85d eb04 	ldr.w	lr, [sp], #4
 8005948:	b003      	add	sp, #12
 800594a:	4770      	bx	lr
 800594c:	2000009c 	.word	0x2000009c

08005950 <memmove>:
 8005950:	4288      	cmp	r0, r1
 8005952:	b510      	push	{r4, lr}
 8005954:	eb01 0402 	add.w	r4, r1, r2
 8005958:	d902      	bls.n	8005960 <memmove+0x10>
 800595a:	4284      	cmp	r4, r0
 800595c:	4623      	mov	r3, r4
 800595e:	d807      	bhi.n	8005970 <memmove+0x20>
 8005960:	1e43      	subs	r3, r0, #1
 8005962:	42a1      	cmp	r1, r4
 8005964:	d008      	beq.n	8005978 <memmove+0x28>
 8005966:	f811 2b01 	ldrb.w	r2, [r1], #1
 800596a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800596e:	e7f8      	b.n	8005962 <memmove+0x12>
 8005970:	4402      	add	r2, r0
 8005972:	4601      	mov	r1, r0
 8005974:	428a      	cmp	r2, r1
 8005976:	d100      	bne.n	800597a <memmove+0x2a>
 8005978:	bd10      	pop	{r4, pc}
 800597a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800597e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005982:	e7f7      	b.n	8005974 <memmove+0x24>

08005984 <_sbrk_r>:
 8005984:	b538      	push	{r3, r4, r5, lr}
 8005986:	4d06      	ldr	r5, [pc, #24]	; (80059a0 <_sbrk_r+0x1c>)
 8005988:	2300      	movs	r3, #0
 800598a:	4604      	mov	r4, r0
 800598c:	4608      	mov	r0, r1
 800598e:	602b      	str	r3, [r5, #0]
 8005990:	f7fb f85e 	bl	8000a50 <_sbrk>
 8005994:	1c43      	adds	r3, r0, #1
 8005996:	d102      	bne.n	800599e <_sbrk_r+0x1a>
 8005998:	682b      	ldr	r3, [r5, #0]
 800599a:	b103      	cbz	r3, 800599e <_sbrk_r+0x1a>
 800599c:	6023      	str	r3, [r4, #0]
 800599e:	bd38      	pop	{r3, r4, r5, pc}
 80059a0:	20000448 	.word	0x20000448

080059a4 <memcpy>:
 80059a4:	440a      	add	r2, r1
 80059a6:	4291      	cmp	r1, r2
 80059a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80059ac:	d100      	bne.n	80059b0 <memcpy+0xc>
 80059ae:	4770      	bx	lr
 80059b0:	b510      	push	{r4, lr}
 80059b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059ba:	4291      	cmp	r1, r2
 80059bc:	d1f9      	bne.n	80059b2 <memcpy+0xe>
 80059be:	bd10      	pop	{r4, pc}

080059c0 <abort>:
 80059c0:	b508      	push	{r3, lr}
 80059c2:	2006      	movs	r0, #6
 80059c4:	f000 fa34 	bl	8005e30 <raise>
 80059c8:	2001      	movs	r0, #1
 80059ca:	f7fa ffc9 	bl	8000960 <_exit>

080059ce <_realloc_r>:
 80059ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059d2:	4680      	mov	r8, r0
 80059d4:	4614      	mov	r4, r2
 80059d6:	460e      	mov	r6, r1
 80059d8:	b921      	cbnz	r1, 80059e4 <_realloc_r+0x16>
 80059da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059de:	4611      	mov	r1, r2
 80059e0:	f7ff bb82 	b.w	80050e8 <_malloc_r>
 80059e4:	b92a      	cbnz	r2, 80059f2 <_realloc_r+0x24>
 80059e6:	f7ff fb0b 	bl	8005000 <_free_r>
 80059ea:	4625      	mov	r5, r4
 80059ec:	4628      	mov	r0, r5
 80059ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059f2:	f000 fa39 	bl	8005e68 <_malloc_usable_size_r>
 80059f6:	4284      	cmp	r4, r0
 80059f8:	4607      	mov	r7, r0
 80059fa:	d802      	bhi.n	8005a02 <_realloc_r+0x34>
 80059fc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005a00:	d812      	bhi.n	8005a28 <_realloc_r+0x5a>
 8005a02:	4621      	mov	r1, r4
 8005a04:	4640      	mov	r0, r8
 8005a06:	f7ff fb6f 	bl	80050e8 <_malloc_r>
 8005a0a:	4605      	mov	r5, r0
 8005a0c:	2800      	cmp	r0, #0
 8005a0e:	d0ed      	beq.n	80059ec <_realloc_r+0x1e>
 8005a10:	42bc      	cmp	r4, r7
 8005a12:	4622      	mov	r2, r4
 8005a14:	4631      	mov	r1, r6
 8005a16:	bf28      	it	cs
 8005a18:	463a      	movcs	r2, r7
 8005a1a:	f7ff ffc3 	bl	80059a4 <memcpy>
 8005a1e:	4631      	mov	r1, r6
 8005a20:	4640      	mov	r0, r8
 8005a22:	f7ff faed 	bl	8005000 <_free_r>
 8005a26:	e7e1      	b.n	80059ec <_realloc_r+0x1e>
 8005a28:	4635      	mov	r5, r6
 8005a2a:	e7df      	b.n	80059ec <_realloc_r+0x1e>

08005a2c <__sfputc_r>:
 8005a2c:	6893      	ldr	r3, [r2, #8]
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	b410      	push	{r4}
 8005a34:	6093      	str	r3, [r2, #8]
 8005a36:	da08      	bge.n	8005a4a <__sfputc_r+0x1e>
 8005a38:	6994      	ldr	r4, [r2, #24]
 8005a3a:	42a3      	cmp	r3, r4
 8005a3c:	db01      	blt.n	8005a42 <__sfputc_r+0x16>
 8005a3e:	290a      	cmp	r1, #10
 8005a40:	d103      	bne.n	8005a4a <__sfputc_r+0x1e>
 8005a42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a46:	f000 b935 	b.w	8005cb4 <__swbuf_r>
 8005a4a:	6813      	ldr	r3, [r2, #0]
 8005a4c:	1c58      	adds	r0, r3, #1
 8005a4e:	6010      	str	r0, [r2, #0]
 8005a50:	7019      	strb	r1, [r3, #0]
 8005a52:	4608      	mov	r0, r1
 8005a54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a58:	4770      	bx	lr

08005a5a <__sfputs_r>:
 8005a5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a5c:	4606      	mov	r6, r0
 8005a5e:	460f      	mov	r7, r1
 8005a60:	4614      	mov	r4, r2
 8005a62:	18d5      	adds	r5, r2, r3
 8005a64:	42ac      	cmp	r4, r5
 8005a66:	d101      	bne.n	8005a6c <__sfputs_r+0x12>
 8005a68:	2000      	movs	r0, #0
 8005a6a:	e007      	b.n	8005a7c <__sfputs_r+0x22>
 8005a6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a70:	463a      	mov	r2, r7
 8005a72:	4630      	mov	r0, r6
 8005a74:	f7ff ffda 	bl	8005a2c <__sfputc_r>
 8005a78:	1c43      	adds	r3, r0, #1
 8005a7a:	d1f3      	bne.n	8005a64 <__sfputs_r+0xa>
 8005a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005a80 <_vfiprintf_r>:
 8005a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a84:	460d      	mov	r5, r1
 8005a86:	b09d      	sub	sp, #116	; 0x74
 8005a88:	4614      	mov	r4, r2
 8005a8a:	4698      	mov	r8, r3
 8005a8c:	4606      	mov	r6, r0
 8005a8e:	b118      	cbz	r0, 8005a98 <_vfiprintf_r+0x18>
 8005a90:	6a03      	ldr	r3, [r0, #32]
 8005a92:	b90b      	cbnz	r3, 8005a98 <_vfiprintf_r+0x18>
 8005a94:	f7ff f8fe 	bl	8004c94 <__sinit>
 8005a98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a9a:	07d9      	lsls	r1, r3, #31
 8005a9c:	d405      	bmi.n	8005aaa <_vfiprintf_r+0x2a>
 8005a9e:	89ab      	ldrh	r3, [r5, #12]
 8005aa0:	059a      	lsls	r2, r3, #22
 8005aa2:	d402      	bmi.n	8005aaa <_vfiprintf_r+0x2a>
 8005aa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005aa6:	f7ff fa8a 	bl	8004fbe <__retarget_lock_acquire_recursive>
 8005aaa:	89ab      	ldrh	r3, [r5, #12]
 8005aac:	071b      	lsls	r3, r3, #28
 8005aae:	d501      	bpl.n	8005ab4 <_vfiprintf_r+0x34>
 8005ab0:	692b      	ldr	r3, [r5, #16]
 8005ab2:	b99b      	cbnz	r3, 8005adc <_vfiprintf_r+0x5c>
 8005ab4:	4629      	mov	r1, r5
 8005ab6:	4630      	mov	r0, r6
 8005ab8:	f000 f93a 	bl	8005d30 <__swsetup_r>
 8005abc:	b170      	cbz	r0, 8005adc <_vfiprintf_r+0x5c>
 8005abe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ac0:	07dc      	lsls	r4, r3, #31
 8005ac2:	d504      	bpl.n	8005ace <_vfiprintf_r+0x4e>
 8005ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ac8:	b01d      	add	sp, #116	; 0x74
 8005aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ace:	89ab      	ldrh	r3, [r5, #12]
 8005ad0:	0598      	lsls	r0, r3, #22
 8005ad2:	d4f7      	bmi.n	8005ac4 <_vfiprintf_r+0x44>
 8005ad4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ad6:	f7ff fa73 	bl	8004fc0 <__retarget_lock_release_recursive>
 8005ada:	e7f3      	b.n	8005ac4 <_vfiprintf_r+0x44>
 8005adc:	2300      	movs	r3, #0
 8005ade:	9309      	str	r3, [sp, #36]	; 0x24
 8005ae0:	2320      	movs	r3, #32
 8005ae2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ae6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005aea:	2330      	movs	r3, #48	; 0x30
 8005aec:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005ca0 <_vfiprintf_r+0x220>
 8005af0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005af4:	f04f 0901 	mov.w	r9, #1
 8005af8:	4623      	mov	r3, r4
 8005afa:	469a      	mov	sl, r3
 8005afc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b00:	b10a      	cbz	r2, 8005b06 <_vfiprintf_r+0x86>
 8005b02:	2a25      	cmp	r2, #37	; 0x25
 8005b04:	d1f9      	bne.n	8005afa <_vfiprintf_r+0x7a>
 8005b06:	ebba 0b04 	subs.w	fp, sl, r4
 8005b0a:	d00b      	beq.n	8005b24 <_vfiprintf_r+0xa4>
 8005b0c:	465b      	mov	r3, fp
 8005b0e:	4622      	mov	r2, r4
 8005b10:	4629      	mov	r1, r5
 8005b12:	4630      	mov	r0, r6
 8005b14:	f7ff ffa1 	bl	8005a5a <__sfputs_r>
 8005b18:	3001      	adds	r0, #1
 8005b1a:	f000 80a9 	beq.w	8005c70 <_vfiprintf_r+0x1f0>
 8005b1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b20:	445a      	add	r2, fp
 8005b22:	9209      	str	r2, [sp, #36]	; 0x24
 8005b24:	f89a 3000 	ldrb.w	r3, [sl]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	f000 80a1 	beq.w	8005c70 <_vfiprintf_r+0x1f0>
 8005b2e:	2300      	movs	r3, #0
 8005b30:	f04f 32ff 	mov.w	r2, #4294967295
 8005b34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b38:	f10a 0a01 	add.w	sl, sl, #1
 8005b3c:	9304      	str	r3, [sp, #16]
 8005b3e:	9307      	str	r3, [sp, #28]
 8005b40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b44:	931a      	str	r3, [sp, #104]	; 0x68
 8005b46:	4654      	mov	r4, sl
 8005b48:	2205      	movs	r2, #5
 8005b4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b4e:	4854      	ldr	r0, [pc, #336]	; (8005ca0 <_vfiprintf_r+0x220>)
 8005b50:	f7fa fb3e 	bl	80001d0 <memchr>
 8005b54:	9a04      	ldr	r2, [sp, #16]
 8005b56:	b9d8      	cbnz	r0, 8005b90 <_vfiprintf_r+0x110>
 8005b58:	06d1      	lsls	r1, r2, #27
 8005b5a:	bf44      	itt	mi
 8005b5c:	2320      	movmi	r3, #32
 8005b5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b62:	0713      	lsls	r3, r2, #28
 8005b64:	bf44      	itt	mi
 8005b66:	232b      	movmi	r3, #43	; 0x2b
 8005b68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b6c:	f89a 3000 	ldrb.w	r3, [sl]
 8005b70:	2b2a      	cmp	r3, #42	; 0x2a
 8005b72:	d015      	beq.n	8005ba0 <_vfiprintf_r+0x120>
 8005b74:	9a07      	ldr	r2, [sp, #28]
 8005b76:	4654      	mov	r4, sl
 8005b78:	2000      	movs	r0, #0
 8005b7a:	f04f 0c0a 	mov.w	ip, #10
 8005b7e:	4621      	mov	r1, r4
 8005b80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b84:	3b30      	subs	r3, #48	; 0x30
 8005b86:	2b09      	cmp	r3, #9
 8005b88:	d94d      	bls.n	8005c26 <_vfiprintf_r+0x1a6>
 8005b8a:	b1b0      	cbz	r0, 8005bba <_vfiprintf_r+0x13a>
 8005b8c:	9207      	str	r2, [sp, #28]
 8005b8e:	e014      	b.n	8005bba <_vfiprintf_r+0x13a>
 8005b90:	eba0 0308 	sub.w	r3, r0, r8
 8005b94:	fa09 f303 	lsl.w	r3, r9, r3
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	9304      	str	r3, [sp, #16]
 8005b9c:	46a2      	mov	sl, r4
 8005b9e:	e7d2      	b.n	8005b46 <_vfiprintf_r+0xc6>
 8005ba0:	9b03      	ldr	r3, [sp, #12]
 8005ba2:	1d19      	adds	r1, r3, #4
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	9103      	str	r1, [sp, #12]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	bfbb      	ittet	lt
 8005bac:	425b      	neglt	r3, r3
 8005bae:	f042 0202 	orrlt.w	r2, r2, #2
 8005bb2:	9307      	strge	r3, [sp, #28]
 8005bb4:	9307      	strlt	r3, [sp, #28]
 8005bb6:	bfb8      	it	lt
 8005bb8:	9204      	strlt	r2, [sp, #16]
 8005bba:	7823      	ldrb	r3, [r4, #0]
 8005bbc:	2b2e      	cmp	r3, #46	; 0x2e
 8005bbe:	d10c      	bne.n	8005bda <_vfiprintf_r+0x15a>
 8005bc0:	7863      	ldrb	r3, [r4, #1]
 8005bc2:	2b2a      	cmp	r3, #42	; 0x2a
 8005bc4:	d134      	bne.n	8005c30 <_vfiprintf_r+0x1b0>
 8005bc6:	9b03      	ldr	r3, [sp, #12]
 8005bc8:	1d1a      	adds	r2, r3, #4
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	9203      	str	r2, [sp, #12]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	bfb8      	it	lt
 8005bd2:	f04f 33ff 	movlt.w	r3, #4294967295
 8005bd6:	3402      	adds	r4, #2
 8005bd8:	9305      	str	r3, [sp, #20]
 8005bda:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005cb0 <_vfiprintf_r+0x230>
 8005bde:	7821      	ldrb	r1, [r4, #0]
 8005be0:	2203      	movs	r2, #3
 8005be2:	4650      	mov	r0, sl
 8005be4:	f7fa faf4 	bl	80001d0 <memchr>
 8005be8:	b138      	cbz	r0, 8005bfa <_vfiprintf_r+0x17a>
 8005bea:	9b04      	ldr	r3, [sp, #16]
 8005bec:	eba0 000a 	sub.w	r0, r0, sl
 8005bf0:	2240      	movs	r2, #64	; 0x40
 8005bf2:	4082      	lsls	r2, r0
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	3401      	adds	r4, #1
 8005bf8:	9304      	str	r3, [sp, #16]
 8005bfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bfe:	4829      	ldr	r0, [pc, #164]	; (8005ca4 <_vfiprintf_r+0x224>)
 8005c00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c04:	2206      	movs	r2, #6
 8005c06:	f7fa fae3 	bl	80001d0 <memchr>
 8005c0a:	2800      	cmp	r0, #0
 8005c0c:	d03f      	beq.n	8005c8e <_vfiprintf_r+0x20e>
 8005c0e:	4b26      	ldr	r3, [pc, #152]	; (8005ca8 <_vfiprintf_r+0x228>)
 8005c10:	bb1b      	cbnz	r3, 8005c5a <_vfiprintf_r+0x1da>
 8005c12:	9b03      	ldr	r3, [sp, #12]
 8005c14:	3307      	adds	r3, #7
 8005c16:	f023 0307 	bic.w	r3, r3, #7
 8005c1a:	3308      	adds	r3, #8
 8005c1c:	9303      	str	r3, [sp, #12]
 8005c1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c20:	443b      	add	r3, r7
 8005c22:	9309      	str	r3, [sp, #36]	; 0x24
 8005c24:	e768      	b.n	8005af8 <_vfiprintf_r+0x78>
 8005c26:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c2a:	460c      	mov	r4, r1
 8005c2c:	2001      	movs	r0, #1
 8005c2e:	e7a6      	b.n	8005b7e <_vfiprintf_r+0xfe>
 8005c30:	2300      	movs	r3, #0
 8005c32:	3401      	adds	r4, #1
 8005c34:	9305      	str	r3, [sp, #20]
 8005c36:	4619      	mov	r1, r3
 8005c38:	f04f 0c0a 	mov.w	ip, #10
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c42:	3a30      	subs	r2, #48	; 0x30
 8005c44:	2a09      	cmp	r2, #9
 8005c46:	d903      	bls.n	8005c50 <_vfiprintf_r+0x1d0>
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d0c6      	beq.n	8005bda <_vfiprintf_r+0x15a>
 8005c4c:	9105      	str	r1, [sp, #20]
 8005c4e:	e7c4      	b.n	8005bda <_vfiprintf_r+0x15a>
 8005c50:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c54:	4604      	mov	r4, r0
 8005c56:	2301      	movs	r3, #1
 8005c58:	e7f0      	b.n	8005c3c <_vfiprintf_r+0x1bc>
 8005c5a:	ab03      	add	r3, sp, #12
 8005c5c:	9300      	str	r3, [sp, #0]
 8005c5e:	462a      	mov	r2, r5
 8005c60:	4b12      	ldr	r3, [pc, #72]	; (8005cac <_vfiprintf_r+0x22c>)
 8005c62:	a904      	add	r1, sp, #16
 8005c64:	4630      	mov	r0, r6
 8005c66:	f3af 8000 	nop.w
 8005c6a:	4607      	mov	r7, r0
 8005c6c:	1c78      	adds	r0, r7, #1
 8005c6e:	d1d6      	bne.n	8005c1e <_vfiprintf_r+0x19e>
 8005c70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c72:	07d9      	lsls	r1, r3, #31
 8005c74:	d405      	bmi.n	8005c82 <_vfiprintf_r+0x202>
 8005c76:	89ab      	ldrh	r3, [r5, #12]
 8005c78:	059a      	lsls	r2, r3, #22
 8005c7a:	d402      	bmi.n	8005c82 <_vfiprintf_r+0x202>
 8005c7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c7e:	f7ff f99f 	bl	8004fc0 <__retarget_lock_release_recursive>
 8005c82:	89ab      	ldrh	r3, [r5, #12]
 8005c84:	065b      	lsls	r3, r3, #25
 8005c86:	f53f af1d 	bmi.w	8005ac4 <_vfiprintf_r+0x44>
 8005c8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c8c:	e71c      	b.n	8005ac8 <_vfiprintf_r+0x48>
 8005c8e:	ab03      	add	r3, sp, #12
 8005c90:	9300      	str	r3, [sp, #0]
 8005c92:	462a      	mov	r2, r5
 8005c94:	4b05      	ldr	r3, [pc, #20]	; (8005cac <_vfiprintf_r+0x22c>)
 8005c96:	a904      	add	r1, sp, #16
 8005c98:	4630      	mov	r0, r6
 8005c9a:	f7ff fc77 	bl	800558c <_printf_i>
 8005c9e:	e7e4      	b.n	8005c6a <_vfiprintf_r+0x1ea>
 8005ca0:	08006336 	.word	0x08006336
 8005ca4:	08006340 	.word	0x08006340
 8005ca8:	00000000 	.word	0x00000000
 8005cac:	08005a5b 	.word	0x08005a5b
 8005cb0:	0800633c 	.word	0x0800633c

08005cb4 <__swbuf_r>:
 8005cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cb6:	460e      	mov	r6, r1
 8005cb8:	4614      	mov	r4, r2
 8005cba:	4605      	mov	r5, r0
 8005cbc:	b118      	cbz	r0, 8005cc6 <__swbuf_r+0x12>
 8005cbe:	6a03      	ldr	r3, [r0, #32]
 8005cc0:	b90b      	cbnz	r3, 8005cc6 <__swbuf_r+0x12>
 8005cc2:	f7fe ffe7 	bl	8004c94 <__sinit>
 8005cc6:	69a3      	ldr	r3, [r4, #24]
 8005cc8:	60a3      	str	r3, [r4, #8]
 8005cca:	89a3      	ldrh	r3, [r4, #12]
 8005ccc:	071a      	lsls	r2, r3, #28
 8005cce:	d525      	bpl.n	8005d1c <__swbuf_r+0x68>
 8005cd0:	6923      	ldr	r3, [r4, #16]
 8005cd2:	b31b      	cbz	r3, 8005d1c <__swbuf_r+0x68>
 8005cd4:	6823      	ldr	r3, [r4, #0]
 8005cd6:	6922      	ldr	r2, [r4, #16]
 8005cd8:	1a98      	subs	r0, r3, r2
 8005cda:	6963      	ldr	r3, [r4, #20]
 8005cdc:	b2f6      	uxtb	r6, r6
 8005cde:	4283      	cmp	r3, r0
 8005ce0:	4637      	mov	r7, r6
 8005ce2:	dc04      	bgt.n	8005cee <__swbuf_r+0x3a>
 8005ce4:	4621      	mov	r1, r4
 8005ce6:	4628      	mov	r0, r5
 8005ce8:	f7ff fdf8 	bl	80058dc <_fflush_r>
 8005cec:	b9e0      	cbnz	r0, 8005d28 <__swbuf_r+0x74>
 8005cee:	68a3      	ldr	r3, [r4, #8]
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	60a3      	str	r3, [r4, #8]
 8005cf4:	6823      	ldr	r3, [r4, #0]
 8005cf6:	1c5a      	adds	r2, r3, #1
 8005cf8:	6022      	str	r2, [r4, #0]
 8005cfa:	701e      	strb	r6, [r3, #0]
 8005cfc:	6962      	ldr	r2, [r4, #20]
 8005cfe:	1c43      	adds	r3, r0, #1
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d004      	beq.n	8005d0e <__swbuf_r+0x5a>
 8005d04:	89a3      	ldrh	r3, [r4, #12]
 8005d06:	07db      	lsls	r3, r3, #31
 8005d08:	d506      	bpl.n	8005d18 <__swbuf_r+0x64>
 8005d0a:	2e0a      	cmp	r6, #10
 8005d0c:	d104      	bne.n	8005d18 <__swbuf_r+0x64>
 8005d0e:	4621      	mov	r1, r4
 8005d10:	4628      	mov	r0, r5
 8005d12:	f7ff fde3 	bl	80058dc <_fflush_r>
 8005d16:	b938      	cbnz	r0, 8005d28 <__swbuf_r+0x74>
 8005d18:	4638      	mov	r0, r7
 8005d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d1c:	4621      	mov	r1, r4
 8005d1e:	4628      	mov	r0, r5
 8005d20:	f000 f806 	bl	8005d30 <__swsetup_r>
 8005d24:	2800      	cmp	r0, #0
 8005d26:	d0d5      	beq.n	8005cd4 <__swbuf_r+0x20>
 8005d28:	f04f 37ff 	mov.w	r7, #4294967295
 8005d2c:	e7f4      	b.n	8005d18 <__swbuf_r+0x64>
	...

08005d30 <__swsetup_r>:
 8005d30:	b538      	push	{r3, r4, r5, lr}
 8005d32:	4b2a      	ldr	r3, [pc, #168]	; (8005ddc <__swsetup_r+0xac>)
 8005d34:	4605      	mov	r5, r0
 8005d36:	6818      	ldr	r0, [r3, #0]
 8005d38:	460c      	mov	r4, r1
 8005d3a:	b118      	cbz	r0, 8005d44 <__swsetup_r+0x14>
 8005d3c:	6a03      	ldr	r3, [r0, #32]
 8005d3e:	b90b      	cbnz	r3, 8005d44 <__swsetup_r+0x14>
 8005d40:	f7fe ffa8 	bl	8004c94 <__sinit>
 8005d44:	89a3      	ldrh	r3, [r4, #12]
 8005d46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d4a:	0718      	lsls	r0, r3, #28
 8005d4c:	d422      	bmi.n	8005d94 <__swsetup_r+0x64>
 8005d4e:	06d9      	lsls	r1, r3, #27
 8005d50:	d407      	bmi.n	8005d62 <__swsetup_r+0x32>
 8005d52:	2309      	movs	r3, #9
 8005d54:	602b      	str	r3, [r5, #0]
 8005d56:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005d5a:	81a3      	strh	r3, [r4, #12]
 8005d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d60:	e034      	b.n	8005dcc <__swsetup_r+0x9c>
 8005d62:	0758      	lsls	r0, r3, #29
 8005d64:	d512      	bpl.n	8005d8c <__swsetup_r+0x5c>
 8005d66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d68:	b141      	cbz	r1, 8005d7c <__swsetup_r+0x4c>
 8005d6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d6e:	4299      	cmp	r1, r3
 8005d70:	d002      	beq.n	8005d78 <__swsetup_r+0x48>
 8005d72:	4628      	mov	r0, r5
 8005d74:	f7ff f944 	bl	8005000 <_free_r>
 8005d78:	2300      	movs	r3, #0
 8005d7a:	6363      	str	r3, [r4, #52]	; 0x34
 8005d7c:	89a3      	ldrh	r3, [r4, #12]
 8005d7e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005d82:	81a3      	strh	r3, [r4, #12]
 8005d84:	2300      	movs	r3, #0
 8005d86:	6063      	str	r3, [r4, #4]
 8005d88:	6923      	ldr	r3, [r4, #16]
 8005d8a:	6023      	str	r3, [r4, #0]
 8005d8c:	89a3      	ldrh	r3, [r4, #12]
 8005d8e:	f043 0308 	orr.w	r3, r3, #8
 8005d92:	81a3      	strh	r3, [r4, #12]
 8005d94:	6923      	ldr	r3, [r4, #16]
 8005d96:	b94b      	cbnz	r3, 8005dac <__swsetup_r+0x7c>
 8005d98:	89a3      	ldrh	r3, [r4, #12]
 8005d9a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005d9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005da2:	d003      	beq.n	8005dac <__swsetup_r+0x7c>
 8005da4:	4621      	mov	r1, r4
 8005da6:	4628      	mov	r0, r5
 8005da8:	f000 f88c 	bl	8005ec4 <__smakebuf_r>
 8005dac:	89a0      	ldrh	r0, [r4, #12]
 8005dae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005db2:	f010 0301 	ands.w	r3, r0, #1
 8005db6:	d00a      	beq.n	8005dce <__swsetup_r+0x9e>
 8005db8:	2300      	movs	r3, #0
 8005dba:	60a3      	str	r3, [r4, #8]
 8005dbc:	6963      	ldr	r3, [r4, #20]
 8005dbe:	425b      	negs	r3, r3
 8005dc0:	61a3      	str	r3, [r4, #24]
 8005dc2:	6923      	ldr	r3, [r4, #16]
 8005dc4:	b943      	cbnz	r3, 8005dd8 <__swsetup_r+0xa8>
 8005dc6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005dca:	d1c4      	bne.n	8005d56 <__swsetup_r+0x26>
 8005dcc:	bd38      	pop	{r3, r4, r5, pc}
 8005dce:	0781      	lsls	r1, r0, #30
 8005dd0:	bf58      	it	pl
 8005dd2:	6963      	ldrpl	r3, [r4, #20]
 8005dd4:	60a3      	str	r3, [r4, #8]
 8005dd6:	e7f4      	b.n	8005dc2 <__swsetup_r+0x92>
 8005dd8:	2000      	movs	r0, #0
 8005dda:	e7f7      	b.n	8005dcc <__swsetup_r+0x9c>
 8005ddc:	2000009c 	.word	0x2000009c

08005de0 <_raise_r>:
 8005de0:	291f      	cmp	r1, #31
 8005de2:	b538      	push	{r3, r4, r5, lr}
 8005de4:	4604      	mov	r4, r0
 8005de6:	460d      	mov	r5, r1
 8005de8:	d904      	bls.n	8005df4 <_raise_r+0x14>
 8005dea:	2316      	movs	r3, #22
 8005dec:	6003      	str	r3, [r0, #0]
 8005dee:	f04f 30ff 	mov.w	r0, #4294967295
 8005df2:	bd38      	pop	{r3, r4, r5, pc}
 8005df4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005df6:	b112      	cbz	r2, 8005dfe <_raise_r+0x1e>
 8005df8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005dfc:	b94b      	cbnz	r3, 8005e12 <_raise_r+0x32>
 8005dfe:	4620      	mov	r0, r4
 8005e00:	f000 f830 	bl	8005e64 <_getpid_r>
 8005e04:	462a      	mov	r2, r5
 8005e06:	4601      	mov	r1, r0
 8005e08:	4620      	mov	r0, r4
 8005e0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e0e:	f000 b817 	b.w	8005e40 <_kill_r>
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d00a      	beq.n	8005e2c <_raise_r+0x4c>
 8005e16:	1c59      	adds	r1, r3, #1
 8005e18:	d103      	bne.n	8005e22 <_raise_r+0x42>
 8005e1a:	2316      	movs	r3, #22
 8005e1c:	6003      	str	r3, [r0, #0]
 8005e1e:	2001      	movs	r0, #1
 8005e20:	e7e7      	b.n	8005df2 <_raise_r+0x12>
 8005e22:	2400      	movs	r4, #0
 8005e24:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005e28:	4628      	mov	r0, r5
 8005e2a:	4798      	blx	r3
 8005e2c:	2000      	movs	r0, #0
 8005e2e:	e7e0      	b.n	8005df2 <_raise_r+0x12>

08005e30 <raise>:
 8005e30:	4b02      	ldr	r3, [pc, #8]	; (8005e3c <raise+0xc>)
 8005e32:	4601      	mov	r1, r0
 8005e34:	6818      	ldr	r0, [r3, #0]
 8005e36:	f7ff bfd3 	b.w	8005de0 <_raise_r>
 8005e3a:	bf00      	nop
 8005e3c:	2000009c 	.word	0x2000009c

08005e40 <_kill_r>:
 8005e40:	b538      	push	{r3, r4, r5, lr}
 8005e42:	4d07      	ldr	r5, [pc, #28]	; (8005e60 <_kill_r+0x20>)
 8005e44:	2300      	movs	r3, #0
 8005e46:	4604      	mov	r4, r0
 8005e48:	4608      	mov	r0, r1
 8005e4a:	4611      	mov	r1, r2
 8005e4c:	602b      	str	r3, [r5, #0]
 8005e4e:	f7fa fd77 	bl	8000940 <_kill>
 8005e52:	1c43      	adds	r3, r0, #1
 8005e54:	d102      	bne.n	8005e5c <_kill_r+0x1c>
 8005e56:	682b      	ldr	r3, [r5, #0]
 8005e58:	b103      	cbz	r3, 8005e5c <_kill_r+0x1c>
 8005e5a:	6023      	str	r3, [r4, #0]
 8005e5c:	bd38      	pop	{r3, r4, r5, pc}
 8005e5e:	bf00      	nop
 8005e60:	20000448 	.word	0x20000448

08005e64 <_getpid_r>:
 8005e64:	f7fa bd64 	b.w	8000930 <_getpid>

08005e68 <_malloc_usable_size_r>:
 8005e68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e6c:	1f18      	subs	r0, r3, #4
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	bfbc      	itt	lt
 8005e72:	580b      	ldrlt	r3, [r1, r0]
 8005e74:	18c0      	addlt	r0, r0, r3
 8005e76:	4770      	bx	lr

08005e78 <__swhatbuf_r>:
 8005e78:	b570      	push	{r4, r5, r6, lr}
 8005e7a:	460c      	mov	r4, r1
 8005e7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e80:	2900      	cmp	r1, #0
 8005e82:	b096      	sub	sp, #88	; 0x58
 8005e84:	4615      	mov	r5, r2
 8005e86:	461e      	mov	r6, r3
 8005e88:	da0d      	bge.n	8005ea6 <__swhatbuf_r+0x2e>
 8005e8a:	89a3      	ldrh	r3, [r4, #12]
 8005e8c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005e90:	f04f 0100 	mov.w	r1, #0
 8005e94:	bf0c      	ite	eq
 8005e96:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005e9a:	2340      	movne	r3, #64	; 0x40
 8005e9c:	2000      	movs	r0, #0
 8005e9e:	6031      	str	r1, [r6, #0]
 8005ea0:	602b      	str	r3, [r5, #0]
 8005ea2:	b016      	add	sp, #88	; 0x58
 8005ea4:	bd70      	pop	{r4, r5, r6, pc}
 8005ea6:	466a      	mov	r2, sp
 8005ea8:	f000 f848 	bl	8005f3c <_fstat_r>
 8005eac:	2800      	cmp	r0, #0
 8005eae:	dbec      	blt.n	8005e8a <__swhatbuf_r+0x12>
 8005eb0:	9901      	ldr	r1, [sp, #4]
 8005eb2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005eb6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005eba:	4259      	negs	r1, r3
 8005ebc:	4159      	adcs	r1, r3
 8005ebe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ec2:	e7eb      	b.n	8005e9c <__swhatbuf_r+0x24>

08005ec4 <__smakebuf_r>:
 8005ec4:	898b      	ldrh	r3, [r1, #12]
 8005ec6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ec8:	079d      	lsls	r5, r3, #30
 8005eca:	4606      	mov	r6, r0
 8005ecc:	460c      	mov	r4, r1
 8005ece:	d507      	bpl.n	8005ee0 <__smakebuf_r+0x1c>
 8005ed0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005ed4:	6023      	str	r3, [r4, #0]
 8005ed6:	6123      	str	r3, [r4, #16]
 8005ed8:	2301      	movs	r3, #1
 8005eda:	6163      	str	r3, [r4, #20]
 8005edc:	b002      	add	sp, #8
 8005ede:	bd70      	pop	{r4, r5, r6, pc}
 8005ee0:	ab01      	add	r3, sp, #4
 8005ee2:	466a      	mov	r2, sp
 8005ee4:	f7ff ffc8 	bl	8005e78 <__swhatbuf_r>
 8005ee8:	9900      	ldr	r1, [sp, #0]
 8005eea:	4605      	mov	r5, r0
 8005eec:	4630      	mov	r0, r6
 8005eee:	f7ff f8fb 	bl	80050e8 <_malloc_r>
 8005ef2:	b948      	cbnz	r0, 8005f08 <__smakebuf_r+0x44>
 8005ef4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ef8:	059a      	lsls	r2, r3, #22
 8005efa:	d4ef      	bmi.n	8005edc <__smakebuf_r+0x18>
 8005efc:	f023 0303 	bic.w	r3, r3, #3
 8005f00:	f043 0302 	orr.w	r3, r3, #2
 8005f04:	81a3      	strh	r3, [r4, #12]
 8005f06:	e7e3      	b.n	8005ed0 <__smakebuf_r+0xc>
 8005f08:	89a3      	ldrh	r3, [r4, #12]
 8005f0a:	6020      	str	r0, [r4, #0]
 8005f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f10:	81a3      	strh	r3, [r4, #12]
 8005f12:	9b00      	ldr	r3, [sp, #0]
 8005f14:	6163      	str	r3, [r4, #20]
 8005f16:	9b01      	ldr	r3, [sp, #4]
 8005f18:	6120      	str	r0, [r4, #16]
 8005f1a:	b15b      	cbz	r3, 8005f34 <__smakebuf_r+0x70>
 8005f1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f20:	4630      	mov	r0, r6
 8005f22:	f000 f81d 	bl	8005f60 <_isatty_r>
 8005f26:	b128      	cbz	r0, 8005f34 <__smakebuf_r+0x70>
 8005f28:	89a3      	ldrh	r3, [r4, #12]
 8005f2a:	f023 0303 	bic.w	r3, r3, #3
 8005f2e:	f043 0301 	orr.w	r3, r3, #1
 8005f32:	81a3      	strh	r3, [r4, #12]
 8005f34:	89a3      	ldrh	r3, [r4, #12]
 8005f36:	431d      	orrs	r5, r3
 8005f38:	81a5      	strh	r5, [r4, #12]
 8005f3a:	e7cf      	b.n	8005edc <__smakebuf_r+0x18>

08005f3c <_fstat_r>:
 8005f3c:	b538      	push	{r3, r4, r5, lr}
 8005f3e:	4d07      	ldr	r5, [pc, #28]	; (8005f5c <_fstat_r+0x20>)
 8005f40:	2300      	movs	r3, #0
 8005f42:	4604      	mov	r4, r0
 8005f44:	4608      	mov	r0, r1
 8005f46:	4611      	mov	r1, r2
 8005f48:	602b      	str	r3, [r5, #0]
 8005f4a:	f7fa fd58 	bl	80009fe <_fstat>
 8005f4e:	1c43      	adds	r3, r0, #1
 8005f50:	d102      	bne.n	8005f58 <_fstat_r+0x1c>
 8005f52:	682b      	ldr	r3, [r5, #0]
 8005f54:	b103      	cbz	r3, 8005f58 <_fstat_r+0x1c>
 8005f56:	6023      	str	r3, [r4, #0]
 8005f58:	bd38      	pop	{r3, r4, r5, pc}
 8005f5a:	bf00      	nop
 8005f5c:	20000448 	.word	0x20000448

08005f60 <_isatty_r>:
 8005f60:	b538      	push	{r3, r4, r5, lr}
 8005f62:	4d06      	ldr	r5, [pc, #24]	; (8005f7c <_isatty_r+0x1c>)
 8005f64:	2300      	movs	r3, #0
 8005f66:	4604      	mov	r4, r0
 8005f68:	4608      	mov	r0, r1
 8005f6a:	602b      	str	r3, [r5, #0]
 8005f6c:	f7fa fd57 	bl	8000a1e <_isatty>
 8005f70:	1c43      	adds	r3, r0, #1
 8005f72:	d102      	bne.n	8005f7a <_isatty_r+0x1a>
 8005f74:	682b      	ldr	r3, [r5, #0]
 8005f76:	b103      	cbz	r3, 8005f7a <_isatty_r+0x1a>
 8005f78:	6023      	str	r3, [r4, #0]
 8005f7a:	bd38      	pop	{r3, r4, r5, pc}
 8005f7c:	20000448 	.word	0x20000448

08005f80 <_init>:
 8005f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f82:	bf00      	nop
 8005f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f86:	bc08      	pop	{r3}
 8005f88:	469e      	mov	lr, r3
 8005f8a:	4770      	bx	lr

08005f8c <_fini>:
 8005f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f8e:	bf00      	nop
 8005f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f92:	bc08      	pop	{r3}
 8005f94:	469e      	mov	lr, r3
 8005f96:	4770      	bx	lr
