
RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c0  08004b40  08004b40  00014b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e00  08004e00  000200a0  2**0
                  CONTENTS
  4 .ARM          00000000  08004e00  08004e00  000200a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e00  08004e00  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e00  08004e00  00014e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e04  08004e04  00014e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08004e08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a0  2**0
                  CONTENTS
 10 .bss          00000254  200000a0  200000a0  000200a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002f4  200002f4  000200a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000a22a  00000000  00000000  00020113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000019d1  00000000  00000000  0002a33d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000820  00000000  00000000  0002bd10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000062e  00000000  00000000  0002c530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001c2b6  00000000  00000000  0002cb5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000b54b  00000000  00000000  00048e14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a3695  00000000  00000000  0005435f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002bf8  00000000  00000000  000f79f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  000fa5ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a0 	.word	0x200000a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004b28 	.word	0x08004b28

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a4 	.word	0x200000a4
 80001cc:	08004b28 	.word	0x08004b28

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b086      	sub	sp, #24
 8000284:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000286:	f000 fc11 	bl	8000aac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028a:	f000 f84b 	bl	8000324 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028e:	f000 f929 	bl	80004e4 <MX_GPIO_Init>
  MX_RTC_Init();
 8000292:	f000 f89d 	bl	80003d0 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8000296:	f000 f8f5 	bl	8000484 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_RTC_GetTime(&hrtc, &curTime, RTC_FORMAT_BCD);  // Replace rtclock.breakTime(rtclock.now(), &curTime);
 800029a:	2201      	movs	r2, #1
 800029c:	491f      	ldr	r1, [pc, #124]	; (800031c <main+0x9c>)
 800029e:	4820      	ldr	r0, [pc, #128]	; (8000320 <main+0xa0>)
 80002a0:	f002 fb9d 	bl	80029de <HAL_RTC_GetTime>
  RTC_DateTypeDef sDate;
  RTC_TimeTypeDef sTime;

  sDate.Year = 0x23; // Set the year (e.g., 2023 - 2000)
 80002a4:	2323      	movs	r3, #35	; 0x23
 80002a6:	75fb      	strb	r3, [r7, #23]
  sDate.Month = RTC_MONTH_JANUARY;
 80002a8:	2301      	movs	r3, #1
 80002aa:	757b      	strb	r3, [r7, #21]
  sDate.Date = 0x1;
 80002ac:	2301      	movs	r3, #1
 80002ae:	75bb      	strb	r3, [r7, #22]
  sTime.Hours = 0x12;
 80002b0:	2312      	movs	r3, #18
 80002b2:	703b      	strb	r3, [r7, #0]
  sTime.Minutes = 0x00;
 80002b4:	2300      	movs	r3, #0
 80002b6:	707b      	strb	r3, [r7, #1]
  sTime.Seconds = 0x00;
 80002b8:	2300      	movs	r3, #0
 80002ba:	70bb      	strb	r3, [r7, #2]

  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 80002bc:	463b      	mov	r3, r7
 80002be:	2201      	movs	r2, #1
 80002c0:	4619      	mov	r1, r3
 80002c2:	4817      	ldr	r0, [pc, #92]	; (8000320 <main+0xa0>)
 80002c4:	f002 fb8b 	bl	80029de <HAL_RTC_GetTime>
  if (sDate.Year + 2000 < 2019)
 80002c8:	7dfb      	ldrb	r3, [r7, #23]
 80002ca:	2b12      	cmp	r3, #18
 80002cc:	d806      	bhi.n	80002dc <main+0x5c>
  {
      setBuildTime(&sDate, &sTime);
 80002ce:	463a      	mov	r2, r7
 80002d0:	f107 0314 	add.w	r3, r7, #20
 80002d4:	4611      	mov	r1, r2
 80002d6:	4618      	mov	r0, r3
 80002d8:	f000 f91c 	bl	8000514 <setBuildTime>
  }

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80002dc:	463b      	mov	r3, r7
 80002de:	2201      	movs	r2, #1
 80002e0:	4619      	mov	r1, r3
 80002e2:	480f      	ldr	r0, [pc, #60]	; (8000320 <main+0xa0>)
 80002e4:	f002 fae1 	bl	80028aa <HAL_RTC_SetTime>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <main+0x72>
  {
    Error_Handler();
 80002ee:	f000 fa1f 	bl	8000730 <Error_Handler>
  }

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80002f2:	f107 0314 	add.w	r3, r7, #20
 80002f6:	2201      	movs	r2, #1
 80002f8:	4619      	mov	r1, r3
 80002fa:	4809      	ldr	r0, [pc, #36]	; (8000320 <main+0xa0>)
 80002fc:	f002 fbcd 	bl	8002a9a <HAL_RTC_SetDate>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <main+0x8a>
  {
    Error_Handler();
 8000306:	f000 fa13 	bl	8000730 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  	  showClock(1);
 800030a:	2001      	movs	r0, #1
 800030c:	f000 f9c6 	bl	800069c <showClock>
	  	  HAL_Delay(1000);
 8000310:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000314:	f000 fc30 	bl	8000b78 <HAL_Delay>
	  	  showClock(1);
 8000318:	e7f7      	b.n	800030a <main+0x8a>
 800031a:	bf00      	nop
 800031c:	20000164 	.word	0x20000164
 8000320:	200000bc 	.word	0x200000bc

08000324 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b096      	sub	sp, #88	; 0x58
 8000328:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800032a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800032e:	2228      	movs	r2, #40	; 0x28
 8000330:	2100      	movs	r1, #0
 8000332:	4618      	mov	r0, r3
 8000334:	f003 fb2f 	bl	8003996 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000338:	f107 031c 	add.w	r3, r7, #28
 800033c:	2200      	movs	r2, #0
 800033e:	601a      	str	r2, [r3, #0]
 8000340:	605a      	str	r2, [r3, #4]
 8000342:	609a      	str	r2, [r3, #8]
 8000344:	60da      	str	r2, [r3, #12]
 8000346:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000348:	1d3b      	adds	r3, r7, #4
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
 800034e:	605a      	str	r2, [r3, #4]
 8000350:	609a      	str	r2, [r3, #8]
 8000352:	60da      	str	r2, [r3, #12]
 8000354:	611a      	str	r2, [r3, #16]
 8000356:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000358:	230a      	movs	r3, #10
 800035a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800035c:	2301      	movs	r3, #1
 800035e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000360:	2310      	movs	r3, #16
 8000362:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000364:	2301      	movs	r3, #1
 8000366:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000368:	2300      	movs	r3, #0
 800036a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800036c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000370:	4618      	mov	r0, r3
 8000372:	f000 fe7d 	bl	8001070 <HAL_RCC_OscConfig>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800037c:	f000 f9d8 	bl	8000730 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000380:	230f      	movs	r3, #15
 8000382:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000384:	2300      	movs	r3, #0
 8000386:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000388:	2300      	movs	r3, #0
 800038a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800038c:	2300      	movs	r3, #0
 800038e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000390:	2300      	movs	r3, #0
 8000392:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000394:	f107 031c 	add.w	r3, r7, #28
 8000398:	2100      	movs	r1, #0
 800039a:	4618      	mov	r0, r3
 800039c:	f001 fea6 	bl	80020ec <HAL_RCC_ClockConfig>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <SystemClock_Config+0x86>
  {
    Error_Handler();
 80003a6:	f000 f9c3 	bl	8000730 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80003aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003ae:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80003b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80003b4:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003b6:	1d3b      	adds	r3, r7, #4
 80003b8:	4618      	mov	r0, r3
 80003ba:	f002 f8cd 	bl	8002558 <HAL_RCCEx_PeriphCLKConfig>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80003c4:	f000 f9b4 	bl	8000730 <Error_Handler>
  }
}
 80003c8:	bf00      	nop
 80003ca:	3758      	adds	r7, #88	; 0x58
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}

080003d0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b086      	sub	sp, #24
 80003d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80003d6:	1d3b      	adds	r3, r7, #4
 80003d8:	2200      	movs	r2, #0
 80003da:	601a      	str	r2, [r3, #0]
 80003dc:	605a      	str	r2, [r3, #4]
 80003de:	609a      	str	r2, [r3, #8]
 80003e0:	60da      	str	r2, [r3, #12]
 80003e2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80003e4:	2300      	movs	r3, #0
 80003e6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80003e8:	4b24      	ldr	r3, [pc, #144]	; (800047c <MX_RTC_Init+0xac>)
 80003ea:	4a25      	ldr	r2, [pc, #148]	; (8000480 <MX_RTC_Init+0xb0>)
 80003ec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80003ee:	4b23      	ldr	r3, [pc, #140]	; (800047c <MX_RTC_Init+0xac>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80003f4:	4b21      	ldr	r3, [pc, #132]	; (800047c <MX_RTC_Init+0xac>)
 80003f6:	227f      	movs	r2, #127	; 0x7f
 80003f8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80003fa:	4b20      	ldr	r3, [pc, #128]	; (800047c <MX_RTC_Init+0xac>)
 80003fc:	22ff      	movs	r2, #255	; 0xff
 80003fe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000400:	4b1e      	ldr	r3, [pc, #120]	; (800047c <MX_RTC_Init+0xac>)
 8000402:	2200      	movs	r2, #0
 8000404:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000406:	4b1d      	ldr	r3, [pc, #116]	; (800047c <MX_RTC_Init+0xac>)
 8000408:	2200      	movs	r2, #0
 800040a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800040c:	4b1b      	ldr	r3, [pc, #108]	; (800047c <MX_RTC_Init+0xac>)
 800040e:	2200      	movs	r2, #0
 8000410:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000412:	481a      	ldr	r0, [pc, #104]	; (800047c <MX_RTC_Init+0xac>)
 8000414:	f002 f9c6 	bl	80027a4 <HAL_RTC_Init>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800041e:	f000 f987 	bl	8000730 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x23;
 8000422:	2323      	movs	r3, #35	; 0x23
 8000424:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x59;
 8000426:	2359      	movs	r3, #89	; 0x59
 8000428:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800042a:	2300      	movs	r3, #0
 800042c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800042e:	2300      	movs	r3, #0
 8000430:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000432:	2300      	movs	r3, #0
 8000434:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000436:	1d3b      	adds	r3, r7, #4
 8000438:	2201      	movs	r2, #1
 800043a:	4619      	mov	r1, r3
 800043c:	480f      	ldr	r0, [pc, #60]	; (800047c <MX_RTC_Init+0xac>)
 800043e:	f002 fa34 	bl	80028aa <HAL_RTC_SetTime>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000448:	f000 f972 	bl	8000730 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800044c:	2301      	movs	r3, #1
 800044e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000450:	2301      	movs	r3, #1
 8000452:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000454:	2301      	movs	r3, #1
 8000456:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000458:	2300      	movs	r3, #0
 800045a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800045c:	463b      	mov	r3, r7
 800045e:	2201      	movs	r2, #1
 8000460:	4619      	mov	r1, r3
 8000462:	4806      	ldr	r0, [pc, #24]	; (800047c <MX_RTC_Init+0xac>)
 8000464:	f002 fb19 	bl	8002a9a <HAL_RTC_SetDate>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800046e:	f000 f95f 	bl	8000730 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000472:	bf00      	nop
 8000474:	3718      	adds	r7, #24
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	200000bc 	.word	0x200000bc
 8000480:	40002800 	.word	0x40002800

08000484 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000488:	4b14      	ldr	r3, [pc, #80]	; (80004dc <MX_USART2_UART_Init+0x58>)
 800048a:	4a15      	ldr	r2, [pc, #84]	; (80004e0 <MX_USART2_UART_Init+0x5c>)
 800048c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800048e:	4b13      	ldr	r3, [pc, #76]	; (80004dc <MX_USART2_UART_Init+0x58>)
 8000490:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000494:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000496:	4b11      	ldr	r3, [pc, #68]	; (80004dc <MX_USART2_UART_Init+0x58>)
 8000498:	2200      	movs	r2, #0
 800049a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800049c:	4b0f      	ldr	r3, [pc, #60]	; (80004dc <MX_USART2_UART_Init+0x58>)
 800049e:	2200      	movs	r2, #0
 80004a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004a2:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <MX_USART2_UART_Init+0x58>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004a8:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <MX_USART2_UART_Init+0x58>)
 80004aa:	220c      	movs	r2, #12
 80004ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <MX_USART2_UART_Init+0x58>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004b4:	4b09      	ldr	r3, [pc, #36]	; (80004dc <MX_USART2_UART_Init+0x58>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004ba:	4b08      	ldr	r3, [pc, #32]	; (80004dc <MX_USART2_UART_Init+0x58>)
 80004bc:	2200      	movs	r2, #0
 80004be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004c0:	4b06      	ldr	r3, [pc, #24]	; (80004dc <MX_USART2_UART_Init+0x58>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004c6:	4805      	ldr	r0, [pc, #20]	; (80004dc <MX_USART2_UART_Init+0x58>)
 80004c8:	f002 fc78 	bl	8002dbc <HAL_UART_Init>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004d2:	f000 f92d 	bl	8000730 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004d6:	bf00      	nop
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	200000dc 	.word	0x200000dc
 80004e0:	40004400 	.word	0x40004400

080004e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ea:	4b09      	ldr	r3, [pc, #36]	; (8000510 <MX_GPIO_Init+0x2c>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	4a08      	ldr	r2, [pc, #32]	; (8000510 <MX_GPIO_Init+0x2c>)
 80004f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004f4:	6153      	str	r3, [r2, #20]
 80004f6:	4b06      	ldr	r3, [pc, #24]	; (8000510 <MX_GPIO_Init+0x2c>)
 80004f8:	695b      	ldr	r3, [r3, #20]
 80004fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004fe:	607b      	str	r3, [r7, #4]
 8000500:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	40021000 	.word	0x40021000

08000514 <setBuildTime>:

/* USER CODE BEGIN 4 */


void setBuildTime(RTC_DateTypeDef *date, RTC_TimeTypeDef *time)
{
 8000514:	b5b0      	push	{r4, r5, r7, lr}
 8000516:	b08a      	sub	sp, #40	; 0x28
 8000518:	af06      	add	r7, sp, #24
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	6039      	str	r1, [r7, #0]
    // Timestamp format: "Mar 3 2019 12:34:56"
    snprintf(bld, 40, "%s %s\n", __DATE__, __TIME__);
 800051e:	4b47      	ldr	r3, [pc, #284]	; (800063c <setBuildTime+0x128>)
 8000520:	9300      	str	r3, [sp, #0]
 8000522:	4b47      	ldr	r3, [pc, #284]	; (8000640 <setBuildTime+0x12c>)
 8000524:	4a47      	ldr	r2, [pc, #284]	; (8000644 <setBuildTime+0x130>)
 8000526:	2128      	movs	r1, #40	; 0x28
 8000528:	4847      	ldr	r0, [pc, #284]	; (8000648 <setBuildTime+0x134>)
 800052a:	f003 f9bd 	bl	80038a8 <sniprintf>
    char *token = strtok(bld, delim);
 800052e:	4b47      	ldr	r3, [pc, #284]	; (800064c <setBuildTime+0x138>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4619      	mov	r1, r3
 8000534:	4844      	ldr	r0, [pc, #272]	; (8000648 <setBuildTime+0x134>)
 8000536:	f003 fa49 	bl	80039cc <strtok>
 800053a:	60f8      	str	r0, [r7, #12]
    while (token)
 800053c:	e059      	b.n	80005f2 <setBuildTime+0xde>
    {
        int m = str2month((const char *)token);
 800053e:	68f8      	ldr	r0, [r7, #12]
 8000540:	f000 f888 	bl	8000654 <str2month>
 8000544:	60b8      	str	r0, [r7, #8]
        if (m > 0)
 8000546:	68bb      	ldr	r3, [r7, #8]
 8000548:	2b00      	cmp	r3, #0
 800054a:	dd4b      	ble.n	80005e4 <setBuildTime+0xd0>
        {
            date->Month = m;
 800054c:	68bb      	ldr	r3, [r7, #8]
 800054e:	b2da      	uxtb	r2, r3
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	705a      	strb	r2, [r3, #1]
            token = strtok(NULL, delim);
 8000554:	4b3d      	ldr	r3, [pc, #244]	; (800064c <setBuildTime+0x138>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4619      	mov	r1, r3
 800055a:	2000      	movs	r0, #0
 800055c:	f003 fa36 	bl	80039cc <strtok>
 8000560:	60f8      	str	r0, [r7, #12]
            date->Date = atoi(token);
 8000562:	68f8      	ldr	r0, [r7, #12]
 8000564:	f003 f84d 	bl	8003602 <atoi>
 8000568:	4603      	mov	r3, r0
 800056a:	b2da      	uxtb	r2, r3
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	709a      	strb	r2, [r3, #2]
            token = strtok(NULL, delim);
 8000570:	4b36      	ldr	r3, [pc, #216]	; (800064c <setBuildTime+0x138>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4619      	mov	r1, r3
 8000576:	2000      	movs	r0, #0
 8000578:	f003 fa28 	bl	80039cc <strtok>
 800057c:	60f8      	str	r0, [r7, #12]
            date->Year = atoi(token) - 2000; // Assuming it's a two-digit year representation
 800057e:	68f8      	ldr	r0, [r7, #12]
 8000580:	f003 f83f 	bl	8003602 <atoi>
 8000584:	4603      	mov	r3, r0
 8000586:	b2db      	uxtb	r3, r3
 8000588:	3330      	adds	r3, #48	; 0x30
 800058a:	b2da      	uxtb	r2, r3
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	70da      	strb	r2, [r3, #3]
            token = strtok(NULL, delim);
 8000590:	4b2e      	ldr	r3, [pc, #184]	; (800064c <setBuildTime+0x138>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4619      	mov	r1, r3
 8000596:	2000      	movs	r0, #0
 8000598:	f003 fa18 	bl	80039cc <strtok>
 800059c:	60f8      	str	r0, [r7, #12]
            time->Hours = atoi(token);
 800059e:	68f8      	ldr	r0, [r7, #12]
 80005a0:	f003 f82f 	bl	8003602 <atoi>
 80005a4:	4603      	mov	r3, r0
 80005a6:	b2da      	uxtb	r2, r3
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	701a      	strb	r2, [r3, #0]
            token = strtok(NULL, delim);
 80005ac:	4b27      	ldr	r3, [pc, #156]	; (800064c <setBuildTime+0x138>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4619      	mov	r1, r3
 80005b2:	2000      	movs	r0, #0
 80005b4:	f003 fa0a 	bl	80039cc <strtok>
 80005b8:	60f8      	str	r0, [r7, #12]
            time->Minutes = atoi(token);
 80005ba:	68f8      	ldr	r0, [r7, #12]
 80005bc:	f003 f821 	bl	8003602 <atoi>
 80005c0:	4603      	mov	r3, r0
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	705a      	strb	r2, [r3, #1]
            token = strtok(NULL, delim);
 80005c8:	4b20      	ldr	r3, [pc, #128]	; (800064c <setBuildTime+0x138>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4619      	mov	r1, r3
 80005ce:	2000      	movs	r0, #0
 80005d0:	f003 f9fc 	bl	80039cc <strtok>
 80005d4:	60f8      	str	r0, [r7, #12]
            time->Seconds = atoi(token);
 80005d6:	68f8      	ldr	r0, [r7, #12]
 80005d8:	f003 f813 	bl	8003602 <atoi>
 80005dc:	4603      	mov	r3, r0
 80005de:	b2da      	uxtb	r2, r3
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	709a      	strb	r2, [r3, #2]
        }
        token = strtok(NULL, delim);
 80005e4:	4b19      	ldr	r3, [pc, #100]	; (800064c <setBuildTime+0x138>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4619      	mov	r1, r3
 80005ea:	2000      	movs	r0, #0
 80005ec:	f003 f9ee 	bl	80039cc <strtok>
 80005f0:	60f8      	str	r0, [r7, #12]
    while (token)
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d1a2      	bne.n	800053e <setBuildTime+0x2a>
    }
    snprintf(bld, 40, "Build: %02d-%02d-%02d %02d:%02d:%02d\n", date->Year + 2000, date->Month, date->Date, time->Hours, time->Minutes, time->Seconds);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	78db      	ldrb	r3, [r3, #3]
 80005fc:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	785b      	ldrb	r3, [r3, #1]
 8000604:	4619      	mov	r1, r3
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	789b      	ldrb	r3, [r3, #2]
 800060a:	4618      	mov	r0, r3
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	461c      	mov	r4, r3
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	785b      	ldrb	r3, [r3, #1]
 8000616:	461d      	mov	r5, r3
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	789b      	ldrb	r3, [r3, #2]
 800061c:	9304      	str	r3, [sp, #16]
 800061e:	9503      	str	r5, [sp, #12]
 8000620:	9402      	str	r4, [sp, #8]
 8000622:	9001      	str	r0, [sp, #4]
 8000624:	9100      	str	r1, [sp, #0]
 8000626:	4613      	mov	r3, r2
 8000628:	4a09      	ldr	r2, [pc, #36]	; (8000650 <setBuildTime+0x13c>)
 800062a:	2128      	movs	r1, #40	; 0x28
 800062c:	4806      	ldr	r0, [pc, #24]	; (8000648 <setBuildTime+0x134>)
 800062e:	f003 f93b 	bl	80038a8 <sniprintf>
    // Output to serial or logging mechanism of your choice
}
 8000632:	bf00      	nop
 8000634:	3710      	adds	r7, #16
 8000636:	46bd      	mov	sp, r7
 8000638:	bdb0      	pop	{r4, r5, r7, pc}
 800063a:	bf00      	nop
 800063c:	08004b8c 	.word	0x08004b8c
 8000640:	08004b78 	.word	0x08004b78
 8000644:	08004b84 	.word	0x08004b84
 8000648:	20000178 	.word	0x20000178
 800064c:	20000034 	.word	0x20000034
 8000650:	08004b98 	.word	0x08004b98

08000654 <str2month>:

int str2month(const char *str) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 12; ++i) {
 800065c:	2300      	movs	r3, #0
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	e011      	b.n	8000686 <str2month+0x32>
        if (strncmp(str, months[i], 3) == 0) {
 8000662:	4a0d      	ldr	r2, [pc, #52]	; (8000698 <str2month+0x44>)
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800066a:	2203      	movs	r2, #3
 800066c:	4619      	mov	r1, r3
 800066e:	6878      	ldr	r0, [r7, #4]
 8000670:	f003 f999 	bl	80039a6 <strncmp>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d102      	bne.n	8000680 <str2month+0x2c>
            return i + 1;  // Months are 1-based in the RTC_DateTypeDef structure
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	3301      	adds	r3, #1
 800067e:	e007      	b.n	8000690 <str2month+0x3c>
    for (int i = 0; i < 12; ++i) {
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	3301      	adds	r3, #1
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	2b0b      	cmp	r3, #11
 800068a:	ddea      	ble.n	8000662 <str2month+0xe>
        }
    }
    return -1;  // Invalid month
 800068c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000690:	4618      	mov	r0, r3
 8000692:	3710      	adds	r7, #16
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20000000 	.word	0x20000000

0800069c <showClock>:
  HAL_UART_Transmit(&huart2, (uint8_t *)timeString, strlen(timeString), HAL_MAX_DELAY);

}*/

void showClock(int seconds)
{
 800069c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800069e:	b095      	sub	sp, #84	; 0x54
 80006a0:	af06      	add	r7, sp, #24
 80006a2:	6078      	str	r0, [r7, #4]
  RTC_DateTypeDef curDate;
  char timeString[40];

  HAL_RTC_GetTime(&hrtc, &curTime, RTC_FORMAT_BIN);
 80006a4:	2200      	movs	r2, #0
 80006a6:	491e      	ldr	r1, [pc, #120]	; (8000720 <showClock+0x84>)
 80006a8:	481e      	ldr	r0, [pc, #120]	; (8000724 <showClock+0x88>)
 80006aa:	f002 f998 	bl	80029de <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &curDate, RTC_FORMAT_BIN);
 80006ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80006b2:	2200      	movs	r2, #0
 80006b4:	4619      	mov	r1, r3
 80006b6:	481b      	ldr	r0, [pc, #108]	; (8000724 <showClock+0x88>)
 80006b8:	f002 fa73 	bl	8002ba2 <HAL_RTC_GetDate>

  // Format the time and date information
  snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d, %02d-%02d-%02d\r\n",
           curTime.Hours, curTime.Minutes, curTime.Seconds,
 80006bc:	4b18      	ldr	r3, [pc, #96]	; (8000720 <showClock+0x84>)
 80006be:	781b      	ldrb	r3, [r3, #0]
  snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d, %02d-%02d-%02d\r\n",
 80006c0:	461e      	mov	r6, r3
           curTime.Hours, curTime.Minutes, curTime.Seconds,
 80006c2:	4b17      	ldr	r3, [pc, #92]	; (8000720 <showClock+0x84>)
 80006c4:	785b      	ldrb	r3, [r3, #1]
  snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d, %02d-%02d-%02d\r\n",
 80006c6:	461a      	mov	r2, r3
           curTime.Hours, curTime.Minutes, curTime.Seconds,
 80006c8:	4b15      	ldr	r3, [pc, #84]	; (8000720 <showClock+0x84>)
 80006ca:	789b      	ldrb	r3, [r3, #2]
  snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d, %02d-%02d-%02d\r\n",
 80006cc:	4619      	mov	r1, r3
           curDate.Date, curDate.Month, curDate.Year + 2000);
 80006ce:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
  snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d, %02d-%02d-%02d\r\n",
 80006d2:	461c      	mov	r4, r3
           curDate.Date, curDate.Month, curDate.Year + 2000);
 80006d4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
  snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d, %02d-%02d-%02d\r\n",
 80006d8:	461d      	mov	r5, r3
           curDate.Date, curDate.Month, curDate.Year + 2000);
 80006da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  snprintf(timeString, sizeof(timeString), "%02d:%02d:%02d, %02d-%02d-%02d\r\n",
 80006de:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80006e2:	f107 000c 	add.w	r0, r7, #12
 80006e6:	9304      	str	r3, [sp, #16]
 80006e8:	9503      	str	r5, [sp, #12]
 80006ea:	9402      	str	r4, [sp, #8]
 80006ec:	9101      	str	r1, [sp, #4]
 80006ee:	9200      	str	r2, [sp, #0]
 80006f0:	4633      	mov	r3, r6
 80006f2:	4a0d      	ldr	r2, [pc, #52]	; (8000728 <showClock+0x8c>)
 80006f4:	2128      	movs	r1, #40	; 0x28
 80006f6:	f003 f8d7 	bl	80038a8 <sniprintf>

  // Print the time and date to UART
  HAL_UART_Transmit(&huart2, (uint8_t *)timeString, strlen(timeString), HAL_MAX_DELAY);
 80006fa:	f107 030c 	add.w	r3, r7, #12
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff fd66 	bl	80001d0 <strlen>
 8000704:	4603      	mov	r3, r0
 8000706:	b29a      	uxth	r2, r3
 8000708:	f107 010c 	add.w	r1, r7, #12
 800070c:	f04f 33ff 	mov.w	r3, #4294967295
 8000710:	4806      	ldr	r0, [pc, #24]	; (800072c <showClock+0x90>)
 8000712:	f002 fba1 	bl	8002e58 <HAL_UART_Transmit>
}
 8000716:	bf00      	nop
 8000718:	373c      	adds	r7, #60	; 0x3c
 800071a:	46bd      	mov	sp, r7
 800071c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800071e:	bf00      	nop
 8000720:	20000164 	.word	0x20000164
 8000724:	200000bc 	.word	0x200000bc
 8000728:	08004bc0 	.word	0x08004bc0
 800072c:	200000dc 	.word	0x200000dc

08000730 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000734:	b672      	cpsid	i
}
 8000736:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000738:	e7fe      	b.n	8000738 <Error_Handler+0x8>
	...

0800073c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000742:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <HAL_MspInit+0x44>)
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	4a0e      	ldr	r2, [pc, #56]	; (8000780 <HAL_MspInit+0x44>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	6193      	str	r3, [r2, #24]
 800074e:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <HAL_MspInit+0x44>)
 8000750:	699b      	ldr	r3, [r3, #24]
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <HAL_MspInit+0x44>)
 800075c:	69db      	ldr	r3, [r3, #28]
 800075e:	4a08      	ldr	r2, [pc, #32]	; (8000780 <HAL_MspInit+0x44>)
 8000760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000764:	61d3      	str	r3, [r2, #28]
 8000766:	4b06      	ldr	r3, [pc, #24]	; (8000780 <HAL_MspInit+0x44>)
 8000768:	69db      	ldr	r3, [r3, #28]
 800076a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076e:	603b      	str	r3, [r7, #0]
 8000770:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000772:	bf00      	nop
 8000774:	370c      	adds	r7, #12
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	40021000 	.word	0x40021000

08000784 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000784:	b480      	push	{r7}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a0d      	ldr	r2, [pc, #52]	; (80007c8 <HAL_RTC_MspInit+0x44>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d111      	bne.n	80007ba <HAL_RTC_MspInit+0x36>
 8000796:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800079a:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	fa93 f3a3 	rbit	r3, r3
 80007a2:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80007a4:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80007a6:	fab3 f383 	clz	r3, r3
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	461a      	mov	r2, r3
 80007ae:	4b07      	ldr	r3, [pc, #28]	; (80007cc <HAL_RTC_MspInit+0x48>)
 80007b0:	4413      	add	r3, r2
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	461a      	mov	r2, r3
 80007b6:	2301      	movs	r3, #1
 80007b8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80007ba:	bf00      	nop
 80007bc:	3714      	adds	r7, #20
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	40002800 	.word	0x40002800
 80007cc:	10908100 	.word	0x10908100

080007d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	; 0x28
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a17      	ldr	r2, [pc, #92]	; (800084c <HAL_UART_MspInit+0x7c>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d128      	bne.n	8000844 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007f2:	4b17      	ldr	r3, [pc, #92]	; (8000850 <HAL_UART_MspInit+0x80>)
 80007f4:	69db      	ldr	r3, [r3, #28]
 80007f6:	4a16      	ldr	r2, [pc, #88]	; (8000850 <HAL_UART_MspInit+0x80>)
 80007f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007fc:	61d3      	str	r3, [r2, #28]
 80007fe:	4b14      	ldr	r3, [pc, #80]	; (8000850 <HAL_UART_MspInit+0x80>)
 8000800:	69db      	ldr	r3, [r3, #28]
 8000802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <HAL_UART_MspInit+0x80>)
 800080c:	695b      	ldr	r3, [r3, #20]
 800080e:	4a10      	ldr	r2, [pc, #64]	; (8000850 <HAL_UART_MspInit+0x80>)
 8000810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000814:	6153      	str	r3, [r2, #20]
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <HAL_UART_MspInit+0x80>)
 8000818:	695b      	ldr	r3, [r3, #20]
 800081a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000822:	230c      	movs	r3, #12
 8000824:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000826:	2302      	movs	r3, #2
 8000828:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800082e:	2303      	movs	r3, #3
 8000830:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000832:	2307      	movs	r3, #7
 8000834:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	4619      	mov	r1, r3
 800083c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000840:	f000 faa4 	bl	8000d8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000844:	bf00      	nop
 8000846:	3728      	adds	r7, #40	; 0x28
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40004400 	.word	0x40004400
 8000850:	40021000 	.word	0x40021000

08000854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000858:	e7fe      	b.n	8000858 <NMI_Handler+0x4>

0800085a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800085e:	e7fe      	b.n	800085e <HardFault_Handler+0x4>

08000860 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000864:	e7fe      	b.n	8000864 <MemManage_Handler+0x4>

08000866 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800086a:	e7fe      	b.n	800086a <BusFault_Handler+0x4>

0800086c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000870:	e7fe      	b.n	8000870 <UsageFault_Handler+0x4>

08000872 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr

0800088e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a0:	f000 f94a 	bl	8000b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  return 1;
 80008ac:	2301      	movs	r3, #1
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <_kill>:

int _kill(int pid, int sig)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80008c2:	f003 f925 	bl	8003b10 <__errno>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2216      	movs	r2, #22
 80008ca:	601a      	str	r2, [r3, #0]
  return -1;
 80008cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <_exit>:

void _exit (int status)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80008e0:	f04f 31ff 	mov.w	r1, #4294967295
 80008e4:	6878      	ldr	r0, [r7, #4]
 80008e6:	f7ff ffe7 	bl	80008b8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80008ea:	e7fe      	b.n	80008ea <_exit+0x12>

080008ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
 80008fc:	e00a      	b.n	8000914 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008fe:	f3af 8000 	nop.w
 8000902:	4601      	mov	r1, r0
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	1c5a      	adds	r2, r3, #1
 8000908:	60ba      	str	r2, [r7, #8]
 800090a:	b2ca      	uxtb	r2, r1
 800090c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	3301      	adds	r3, #1
 8000912:	617b      	str	r3, [r7, #20]
 8000914:	697a      	ldr	r2, [r7, #20]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	429a      	cmp	r2, r3
 800091a:	dbf0      	blt.n	80008fe <_read+0x12>
  }

  return len;
 800091c:	687b      	ldr	r3, [r7, #4]
}
 800091e:	4618      	mov	r0, r3
 8000920:	3718      	adds	r7, #24
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}

08000926 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	b086      	sub	sp, #24
 800092a:	af00      	add	r7, sp, #0
 800092c:	60f8      	str	r0, [r7, #12]
 800092e:	60b9      	str	r1, [r7, #8]
 8000930:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000932:	2300      	movs	r3, #0
 8000934:	617b      	str	r3, [r7, #20]
 8000936:	e009      	b.n	800094c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	1c5a      	adds	r2, r3, #1
 800093c:	60ba      	str	r2, [r7, #8]
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	4618      	mov	r0, r3
 8000942:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	3301      	adds	r3, #1
 800094a:	617b      	str	r3, [r7, #20]
 800094c:	697a      	ldr	r2, [r7, #20]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	429a      	cmp	r2, r3
 8000952:	dbf1      	blt.n	8000938 <_write+0x12>
  }
  return len;
 8000954:	687b      	ldr	r3, [r7, #4]
}
 8000956:	4618      	mov	r0, r3
 8000958:	3718      	adds	r7, #24
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <_close>:

int _close(int file)
{
 800095e:	b480      	push	{r7}
 8000960:	b083      	sub	sp, #12
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000966:	f04f 33ff 	mov.w	r3, #4294967295
}
 800096a:	4618      	mov	r0, r3
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr

08000976 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000976:	b480      	push	{r7}
 8000978:	b083      	sub	sp, #12
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
 800097e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000986:	605a      	str	r2, [r3, #4]
  return 0;
 8000988:	2300      	movs	r3, #0
}
 800098a:	4618      	mov	r0, r3
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr

08000996 <_isatty>:

int _isatty(int file)
{
 8000996:	b480      	push	{r7}
 8000998:	b083      	sub	sp, #12
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800099e:	2301      	movs	r3, #1
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	60b9      	str	r1, [r7, #8]
 80009b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3714      	adds	r7, #20
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
	...

080009c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009d0:	4a14      	ldr	r2, [pc, #80]	; (8000a24 <_sbrk+0x5c>)
 80009d2:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <_sbrk+0x60>)
 80009d4:	1ad3      	subs	r3, r2, r3
 80009d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009dc:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <_sbrk+0x64>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d102      	bne.n	80009ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009e4:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <_sbrk+0x64>)
 80009e6:	4a12      	ldr	r2, [pc, #72]	; (8000a30 <_sbrk+0x68>)
 80009e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ea:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <_sbrk+0x64>)
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4413      	add	r3, r2
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d207      	bcs.n	8000a08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009f8:	f003 f88a 	bl	8003b10 <__errno>
 80009fc:	4603      	mov	r3, r0
 80009fe:	220c      	movs	r2, #12
 8000a00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a02:	f04f 33ff 	mov.w	r3, #4294967295
 8000a06:	e009      	b.n	8000a1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <_sbrk+0x64>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a0e:	4b07      	ldr	r3, [pc, #28]	; (8000a2c <_sbrk+0x64>)
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4413      	add	r3, r2
 8000a16:	4a05      	ldr	r2, [pc, #20]	; (8000a2c <_sbrk+0x64>)
 8000a18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a1a:	68fb      	ldr	r3, [r7, #12]
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3718      	adds	r7, #24
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20003000 	.word	0x20003000
 8000a28:	00000400 	.word	0x00000400
 8000a2c:	200001a0 	.word	0x200001a0
 8000a30:	200002f8 	.word	0x200002f8

08000a34 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <SystemInit+0x20>)
 8000a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a3e:	4a05      	ldr	r2, [pc, #20]	; (8000a54 <SystemInit+0x20>)
 8000a40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a90 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a5c:	f7ff ffea 	bl	8000a34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a60:	480c      	ldr	r0, [pc, #48]	; (8000a94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a62:	490d      	ldr	r1, [pc, #52]	; (8000a98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a64:	4a0d      	ldr	r2, [pc, #52]	; (8000a9c <LoopForever+0xe>)
  movs r3, #0
 8000a66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a68:	e002      	b.n	8000a70 <LoopCopyDataInit>

08000a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a6e:	3304      	adds	r3, #4

08000a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a74:	d3f9      	bcc.n	8000a6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a76:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a78:	4c0a      	ldr	r4, [pc, #40]	; (8000aa4 <LoopForever+0x16>)
  movs r3, #0
 8000a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a7c:	e001      	b.n	8000a82 <LoopFillZerobss>

08000a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a80:	3204      	adds	r2, #4

08000a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a84:	d3fb      	bcc.n	8000a7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a86:	f003 f849 	bl	8003b1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a8a:	f7ff fbf9 	bl	8000280 <main>

08000a8e <LoopForever>:

LoopForever:
    b LoopForever
 8000a8e:	e7fe      	b.n	8000a8e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a90:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000a94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a98:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8000a9c:	08004e08 	.word	0x08004e08
  ldr r2, =_sbss
 8000aa0:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8000aa4:	200002f4 	.word	0x200002f4

08000aa8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000aa8:	e7fe      	b.n	8000aa8 <ADC1_2_IRQHandler>
	...

08000aac <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab0:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <HAL_Init+0x28>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a07      	ldr	r2, [pc, #28]	; (8000ad4 <HAL_Init+0x28>)
 8000ab6:	f043 0310 	orr.w	r3, r3, #16
 8000aba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000abc:	2003      	movs	r0, #3
 8000abe:	f000 f931 	bl	8000d24 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ac2:	200f      	movs	r0, #15
 8000ac4:	f000 f808 	bl	8000ad8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ac8:	f7ff fe38 	bl	800073c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000acc:	2300      	movs	r3, #0
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40022000 	.word	0x40022000

08000ad8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <HAL_InitTick+0x54>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <HAL_InitTick+0x58>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	4619      	mov	r1, r3
 8000aea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af6:	4618      	mov	r0, r3
 8000af8:	f000 f93b 	bl	8000d72 <HAL_SYSTICK_Config>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
 8000b04:	e00e      	b.n	8000b24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2b0f      	cmp	r3, #15
 8000b0a:	d80a      	bhi.n	8000b22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	6879      	ldr	r1, [r7, #4]
 8000b10:	f04f 30ff 	mov.w	r0, #4294967295
 8000b14:	f000 f911 	bl	8000d3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b18:	4a06      	ldr	r2, [pc, #24]	; (8000b34 <HAL_InitTick+0x5c>)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e000      	b.n	8000b24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000038 	.word	0x20000038
 8000b30:	20000040 	.word	0x20000040
 8000b34:	2000003c 	.word	0x2000003c

08000b38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <HAL_IncTick+0x20>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <HAL_IncTick+0x24>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4413      	add	r3, r2
 8000b48:	4a04      	ldr	r2, [pc, #16]	; (8000b5c <HAL_IncTick+0x24>)
 8000b4a:	6013      	str	r3, [r2, #0]
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	20000040 	.word	0x20000040
 8000b5c:	200001a4 	.word	0x200001a4

08000b60 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b64:	4b03      	ldr	r3, [pc, #12]	; (8000b74 <HAL_GetTick+0x14>)
 8000b66:	681b      	ldr	r3, [r3, #0]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	200001a4 	.word	0x200001a4

08000b78 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b80:	f7ff ffee 	bl	8000b60 <HAL_GetTick>
 8000b84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b90:	d005      	beq.n	8000b9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b92:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <HAL_Delay+0x44>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	461a      	mov	r2, r3
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b9e:	bf00      	nop
 8000ba0:	f7ff ffde 	bl	8000b60 <HAL_GetTick>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	68fa      	ldr	r2, [r7, #12]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d8f7      	bhi.n	8000ba0 <HAL_Delay+0x28>
  {
  }
}
 8000bb0:	bf00      	nop
 8000bb2:	bf00      	nop
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000040 	.word	0x20000040

08000bc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	f003 0307 	and.w	r3, r3, #7
 8000bce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bd6:	68ba      	ldr	r2, [r7, #8]
 8000bd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bdc:	4013      	ands	r3, r2
 8000bde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000be8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bf2:	4a04      	ldr	r2, [pc, #16]	; (8000c04 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	60d3      	str	r3, [r2, #12]
}
 8000bf8:	bf00      	nop
 8000bfa:	3714      	adds	r7, #20
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c0c:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <__NVIC_GetPriorityGrouping+0x18>)
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	0a1b      	lsrs	r3, r3, #8
 8000c12:	f003 0307 	and.w	r3, r3, #7
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	6039      	str	r1, [r7, #0]
 8000c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	db0a      	blt.n	8000c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	490c      	ldr	r1, [pc, #48]	; (8000c70 <__NVIC_SetPriority+0x4c>)
 8000c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c42:	0112      	lsls	r2, r2, #4
 8000c44:	b2d2      	uxtb	r2, r2
 8000c46:	440b      	add	r3, r1
 8000c48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c4c:	e00a      	b.n	8000c64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	b2da      	uxtb	r2, r3
 8000c52:	4908      	ldr	r1, [pc, #32]	; (8000c74 <__NVIC_SetPriority+0x50>)
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	f003 030f 	and.w	r3, r3, #15
 8000c5a:	3b04      	subs	r3, #4
 8000c5c:	0112      	lsls	r2, r2, #4
 8000c5e:	b2d2      	uxtb	r2, r2
 8000c60:	440b      	add	r3, r1
 8000c62:	761a      	strb	r2, [r3, #24]
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	e000e100 	.word	0xe000e100
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b089      	sub	sp, #36	; 0x24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	f003 0307 	and.w	r3, r3, #7
 8000c8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	f1c3 0307 	rsb	r3, r3, #7
 8000c92:	2b04      	cmp	r3, #4
 8000c94:	bf28      	it	cs
 8000c96:	2304      	movcs	r3, #4
 8000c98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	3304      	adds	r3, #4
 8000c9e:	2b06      	cmp	r3, #6
 8000ca0:	d902      	bls.n	8000ca8 <NVIC_EncodePriority+0x30>
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	3b03      	subs	r3, #3
 8000ca6:	e000      	b.n	8000caa <NVIC_EncodePriority+0x32>
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cac:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb0:	69bb      	ldr	r3, [r7, #24]
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	43da      	mvns	r2, r3
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	401a      	ands	r2, r3
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cca:	43d9      	mvns	r1, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd0:	4313      	orrs	r3, r2
         );
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3724      	adds	r7, #36	; 0x24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
	...

08000ce0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	3b01      	subs	r3, #1
 8000cec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cf0:	d301      	bcc.n	8000cf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e00f      	b.n	8000d16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cf6:	4a0a      	ldr	r2, [pc, #40]	; (8000d20 <SysTick_Config+0x40>)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cfe:	210f      	movs	r1, #15
 8000d00:	f04f 30ff 	mov.w	r0, #4294967295
 8000d04:	f7ff ff8e 	bl	8000c24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d08:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <SysTick_Config+0x40>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d0e:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <SysTick_Config+0x40>)
 8000d10:	2207      	movs	r2, #7
 8000d12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	e000e010 	.word	0xe000e010

08000d24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	f7ff ff47 	bl	8000bc0 <__NVIC_SetPriorityGrouping>
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b086      	sub	sp, #24
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	4603      	mov	r3, r0
 8000d42:	60b9      	str	r1, [r7, #8]
 8000d44:	607a      	str	r2, [r7, #4]
 8000d46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d4c:	f7ff ff5c 	bl	8000c08 <__NVIC_GetPriorityGrouping>
 8000d50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	68b9      	ldr	r1, [r7, #8]
 8000d56:	6978      	ldr	r0, [r7, #20]
 8000d58:	f7ff ff8e 	bl	8000c78 <NVIC_EncodePriority>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d62:	4611      	mov	r1, r2
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff ff5d 	bl	8000c24 <__NVIC_SetPriority>
}
 8000d6a:	bf00      	nop
 8000d6c:	3718      	adds	r7, #24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b082      	sub	sp, #8
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f7ff ffb0 	bl	8000ce0 <SysTick_Config>
 8000d80:	4603      	mov	r3, r0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
	...

08000d8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b087      	sub	sp, #28
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d9a:	e14e      	b.n	800103a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	2101      	movs	r1, #1
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	fa01 f303 	lsl.w	r3, r1, r3
 8000da8:	4013      	ands	r3, r2
 8000daa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f000 8140 	beq.w	8001034 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f003 0303 	and.w	r3, r3, #3
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d005      	beq.n	8000dcc <HAL_GPIO_Init+0x40>
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f003 0303 	and.w	r3, r3, #3
 8000dc8:	2b02      	cmp	r3, #2
 8000dca:	d130      	bne.n	8000e2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	2203      	movs	r2, #3
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	4013      	ands	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	68da      	ldr	r2, [r3, #12]
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e02:	2201      	movs	r2, #1
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	43db      	mvns	r3, r3
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	091b      	lsrs	r3, r3, #4
 8000e18:	f003 0201 	and.w	r2, r3, #1
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f003 0303 	and.w	r3, r3, #3
 8000e36:	2b03      	cmp	r3, #3
 8000e38:	d017      	beq.n	8000e6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	68db      	ldr	r3, [r3, #12]
 8000e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	2203      	movs	r2, #3
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	689a      	ldr	r2, [r3, #8]
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f003 0303 	and.w	r3, r3, #3
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d123      	bne.n	8000ebe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	08da      	lsrs	r2, r3, #3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	3208      	adds	r2, #8
 8000e7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	f003 0307 	and.w	r3, r3, #7
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	220f      	movs	r2, #15
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43db      	mvns	r3, r3
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	4013      	ands	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	691a      	ldr	r2, [r3, #16]
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	f003 0307 	and.w	r3, r3, #7
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	08da      	lsrs	r2, r3, #3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3208      	adds	r2, #8
 8000eb8:	6939      	ldr	r1, [r7, #16]
 8000eba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	2203      	movs	r2, #3
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f003 0203 	and.w	r2, r3, #3
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	f000 809a 	beq.w	8001034 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f00:	4b55      	ldr	r3, [pc, #340]	; (8001058 <HAL_GPIO_Init+0x2cc>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	4a54      	ldr	r2, [pc, #336]	; (8001058 <HAL_GPIO_Init+0x2cc>)
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	6193      	str	r3, [r2, #24]
 8000f0c:	4b52      	ldr	r3, [pc, #328]	; (8001058 <HAL_GPIO_Init+0x2cc>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f18:	4a50      	ldr	r2, [pc, #320]	; (800105c <HAL_GPIO_Init+0x2d0>)
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	089b      	lsrs	r3, r3, #2
 8000f1e:	3302      	adds	r3, #2
 8000f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	f003 0303 	and.w	r3, r3, #3
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	220f      	movs	r2, #15
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f42:	d013      	beq.n	8000f6c <HAL_GPIO_Init+0x1e0>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a46      	ldr	r2, [pc, #280]	; (8001060 <HAL_GPIO_Init+0x2d4>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d00d      	beq.n	8000f68 <HAL_GPIO_Init+0x1dc>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4a45      	ldr	r2, [pc, #276]	; (8001064 <HAL_GPIO_Init+0x2d8>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d007      	beq.n	8000f64 <HAL_GPIO_Init+0x1d8>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4a44      	ldr	r2, [pc, #272]	; (8001068 <HAL_GPIO_Init+0x2dc>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d101      	bne.n	8000f60 <HAL_GPIO_Init+0x1d4>
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	e006      	b.n	8000f6e <HAL_GPIO_Init+0x1e2>
 8000f60:	2305      	movs	r3, #5
 8000f62:	e004      	b.n	8000f6e <HAL_GPIO_Init+0x1e2>
 8000f64:	2302      	movs	r3, #2
 8000f66:	e002      	b.n	8000f6e <HAL_GPIO_Init+0x1e2>
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e000      	b.n	8000f6e <HAL_GPIO_Init+0x1e2>
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	697a      	ldr	r2, [r7, #20]
 8000f70:	f002 0203 	and.w	r2, r2, #3
 8000f74:	0092      	lsls	r2, r2, #2
 8000f76:	4093      	lsls	r3, r2
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f7e:	4937      	ldr	r1, [pc, #220]	; (800105c <HAL_GPIO_Init+0x2d0>)
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	089b      	lsrs	r3, r3, #2
 8000f84:	3302      	adds	r3, #2
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f8c:	4b37      	ldr	r3, [pc, #220]	; (800106c <HAL_GPIO_Init+0x2e0>)
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	43db      	mvns	r3, r3
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d003      	beq.n	8000fb0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000fb0:	4a2e      	ldr	r2, [pc, #184]	; (800106c <HAL_GPIO_Init+0x2e0>)
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fb6:	4b2d      	ldr	r3, [pc, #180]	; (800106c <HAL_GPIO_Init+0x2e0>)
 8000fb8:	68db      	ldr	r3, [r3, #12]
 8000fba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d003      	beq.n	8000fda <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fda:	4a24      	ldr	r2, [pc, #144]	; (800106c <HAL_GPIO_Init+0x2e0>)
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fe0:	4b22      	ldr	r3, [pc, #136]	; (800106c <HAL_GPIO_Init+0x2e0>)
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4013      	ands	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d003      	beq.n	8001004 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	4313      	orrs	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001004:	4a19      	ldr	r2, [pc, #100]	; (800106c <HAL_GPIO_Init+0x2e0>)
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800100a:	4b18      	ldr	r3, [pc, #96]	; (800106c <HAL_GPIO_Init+0x2e0>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	43db      	mvns	r3, r3
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	4013      	ands	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d003      	beq.n	800102e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	4313      	orrs	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800102e:	4a0f      	ldr	r2, [pc, #60]	; (800106c <HAL_GPIO_Init+0x2e0>)
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	3301      	adds	r3, #1
 8001038:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	fa22 f303 	lsr.w	r3, r2, r3
 8001044:	2b00      	cmp	r3, #0
 8001046:	f47f aea9 	bne.w	8000d9c <HAL_GPIO_Init+0x10>
  }
}
 800104a:	bf00      	nop
 800104c:	bf00      	nop
 800104e:	371c      	adds	r7, #28
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	40021000 	.word	0x40021000
 800105c:	40010000 	.word	0x40010000
 8001060:	48000400 	.word	0x48000400
 8001064:	48000800 	.word	0x48000800
 8001068:	48000c00 	.word	0x48000c00
 800106c:	40010400 	.word	0x40010400

08001070 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001076:	af00      	add	r7, sp, #0
 8001078:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800107c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001080:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001082:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001086:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d102      	bne.n	8001096 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	f001 b823 	b.w	80020dc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001096:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800109a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	f000 817d 	beq.w	80013a6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010ac:	4bbc      	ldr	r3, [pc, #752]	; (80013a0 <HAL_RCC_OscConfig+0x330>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 030c 	and.w	r3, r3, #12
 80010b4:	2b04      	cmp	r3, #4
 80010b6:	d00c      	beq.n	80010d2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010b8:	4bb9      	ldr	r3, [pc, #740]	; (80013a0 <HAL_RCC_OscConfig+0x330>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 030c 	and.w	r3, r3, #12
 80010c0:	2b08      	cmp	r3, #8
 80010c2:	d15c      	bne.n	800117e <HAL_RCC_OscConfig+0x10e>
 80010c4:	4bb6      	ldr	r3, [pc, #728]	; (80013a0 <HAL_RCC_OscConfig+0x330>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010d0:	d155      	bne.n	800117e <HAL_RCC_OscConfig+0x10e>
 80010d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010d6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010da:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80010de:	fa93 f3a3 	rbit	r3, r3
 80010e2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 80010e6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ea:	fab3 f383 	clz	r3, r3
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	095b      	lsrs	r3, r3, #5
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d102      	bne.n	8001104 <HAL_RCC_OscConfig+0x94>
 80010fe:	4ba8      	ldr	r3, [pc, #672]	; (80013a0 <HAL_RCC_OscConfig+0x330>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	e015      	b.n	8001130 <HAL_RCC_OscConfig+0xc0>
 8001104:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001108:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800110c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001110:	fa93 f3a3 	rbit	r3, r3
 8001114:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001118:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800111c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001120:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001124:	fa93 f3a3 	rbit	r3, r3
 8001128:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800112c:	4b9c      	ldr	r3, [pc, #624]	; (80013a0 <HAL_RCC_OscConfig+0x330>)
 800112e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001130:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001134:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001138:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800113c:	fa92 f2a2 	rbit	r2, r2
 8001140:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001144:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001148:	fab2 f282 	clz	r2, r2
 800114c:	b2d2      	uxtb	r2, r2
 800114e:	f042 0220 	orr.w	r2, r2, #32
 8001152:	b2d2      	uxtb	r2, r2
 8001154:	f002 021f 	and.w	r2, r2, #31
 8001158:	2101      	movs	r1, #1
 800115a:	fa01 f202 	lsl.w	r2, r1, r2
 800115e:	4013      	ands	r3, r2
 8001160:	2b00      	cmp	r3, #0
 8001162:	f000 811f 	beq.w	80013a4 <HAL_RCC_OscConfig+0x334>
 8001166:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800116a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2b00      	cmp	r3, #0
 8001174:	f040 8116 	bne.w	80013a4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	f000 bfaf 	b.w	80020dc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800117e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001182:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800118e:	d106      	bne.n	800119e <HAL_RCC_OscConfig+0x12e>
 8001190:	4b83      	ldr	r3, [pc, #524]	; (80013a0 <HAL_RCC_OscConfig+0x330>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a82      	ldr	r2, [pc, #520]	; (80013a0 <HAL_RCC_OscConfig+0x330>)
 8001196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800119a:	6013      	str	r3, [r2, #0]
 800119c:	e036      	b.n	800120c <HAL_RCC_OscConfig+0x19c>
 800119e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d10c      	bne.n	80011c8 <HAL_RCC_OscConfig+0x158>
 80011ae:	4b7c      	ldr	r3, [pc, #496]	; (80013a0 <HAL_RCC_OscConfig+0x330>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a7b      	ldr	r2, [pc, #492]	; (80013a0 <HAL_RCC_OscConfig+0x330>)
 80011b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011b8:	6013      	str	r3, [r2, #0]
 80011ba:	4b79      	ldr	r3, [pc, #484]	; (80013a0 <HAL_RCC_OscConfig+0x330>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a78      	ldr	r2, [pc, #480]	; (80013a0 <HAL_RCC_OscConfig+0x330>)
 80011c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011c4:	6013      	str	r3, [r2, #0]
 80011c6:	e021      	b.n	800120c <HAL_RCC_OscConfig+0x19c>
 80011c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011d8:	d10c      	bne.n	80011f4 <HAL_RCC_OscConfig+0x184>
 80011da:	4b71      	ldr	r3, [pc, #452]	; (80013a0 <HAL_RCC_OscConfig+0x330>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a70      	ldr	r2, [pc, #448]	; (80013a0 <HAL_RCC_OscConfig+0x330>)
 80011e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011e4:	6013      	str	r3, [r2, #0]
 80011e6:	4b6e      	ldr	r3, [pc, #440]	; (80013a0 <HAL_RCC_OscConfig+0x330>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a6d      	ldr	r2, [pc, #436]	; (80013a0 <HAL_RCC_OscConfig+0x330>)
 80011ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011f0:	6013      	str	r3, [r2, #0]
 80011f2:	e00b      	b.n	800120c <HAL_RCC_OscConfig+0x19c>
 80011f4:	4b6a      	ldr	r3, [pc, #424]	; (80013a0 <HAL_RCC_OscConfig+0x330>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a69      	ldr	r2, [pc, #420]	; (80013a0 <HAL_RCC_OscConfig+0x330>)
 80011fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011fe:	6013      	str	r3, [r2, #0]
 8001200:	4b67      	ldr	r3, [pc, #412]	; (80013a0 <HAL_RCC_OscConfig+0x330>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a66      	ldr	r2, [pc, #408]	; (80013a0 <HAL_RCC_OscConfig+0x330>)
 8001206:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800120a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800120c:	4b64      	ldr	r3, [pc, #400]	; (80013a0 <HAL_RCC_OscConfig+0x330>)
 800120e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001210:	f023 020f 	bic.w	r2, r3, #15
 8001214:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001218:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	495f      	ldr	r1, [pc, #380]	; (80013a0 <HAL_RCC_OscConfig+0x330>)
 8001222:	4313      	orrs	r3, r2
 8001224:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001226:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800122a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d059      	beq.n	80012ea <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001236:	f7ff fc93 	bl	8000b60 <HAL_GetTick>
 800123a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800123e:	e00a      	b.n	8001256 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001240:	f7ff fc8e 	bl	8000b60 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	2b64      	cmp	r3, #100	; 0x64
 800124e:	d902      	bls.n	8001256 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	f000 bf43 	b.w	80020dc <HAL_RCC_OscConfig+0x106c>
 8001256:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800125a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800125e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001262:	fa93 f3a3 	rbit	r3, r3
 8001266:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800126a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800126e:	fab3 f383 	clz	r3, r3
 8001272:	b2db      	uxtb	r3, r3
 8001274:	095b      	lsrs	r3, r3, #5
 8001276:	b2db      	uxtb	r3, r3
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b01      	cmp	r3, #1
 8001280:	d102      	bne.n	8001288 <HAL_RCC_OscConfig+0x218>
 8001282:	4b47      	ldr	r3, [pc, #284]	; (80013a0 <HAL_RCC_OscConfig+0x330>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	e015      	b.n	80012b4 <HAL_RCC_OscConfig+0x244>
 8001288:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800128c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001290:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001294:	fa93 f3a3 	rbit	r3, r3
 8001298:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800129c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012a0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80012a4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80012a8:	fa93 f3a3 	rbit	r3, r3
 80012ac:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80012b0:	4b3b      	ldr	r3, [pc, #236]	; (80013a0 <HAL_RCC_OscConfig+0x330>)
 80012b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012b8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80012bc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80012c0:	fa92 f2a2 	rbit	r2, r2
 80012c4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80012c8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80012cc:	fab2 f282 	clz	r2, r2
 80012d0:	b2d2      	uxtb	r2, r2
 80012d2:	f042 0220 	orr.w	r2, r2, #32
 80012d6:	b2d2      	uxtb	r2, r2
 80012d8:	f002 021f 	and.w	r2, r2, #31
 80012dc:	2101      	movs	r1, #1
 80012de:	fa01 f202 	lsl.w	r2, r1, r2
 80012e2:	4013      	ands	r3, r2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d0ab      	beq.n	8001240 <HAL_RCC_OscConfig+0x1d0>
 80012e8:	e05d      	b.n	80013a6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ea:	f7ff fc39 	bl	8000b60 <HAL_GetTick>
 80012ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012f2:	e00a      	b.n	800130a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012f4:	f7ff fc34 	bl	8000b60 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b64      	cmp	r3, #100	; 0x64
 8001302:	d902      	bls.n	800130a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	f000 bee9 	b.w	80020dc <HAL_RCC_OscConfig+0x106c>
 800130a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800130e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001312:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001316:	fa93 f3a3 	rbit	r3, r3
 800131a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800131e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001322:	fab3 f383 	clz	r3, r3
 8001326:	b2db      	uxtb	r3, r3
 8001328:	095b      	lsrs	r3, r3, #5
 800132a:	b2db      	uxtb	r3, r3
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b01      	cmp	r3, #1
 8001334:	d102      	bne.n	800133c <HAL_RCC_OscConfig+0x2cc>
 8001336:	4b1a      	ldr	r3, [pc, #104]	; (80013a0 <HAL_RCC_OscConfig+0x330>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	e015      	b.n	8001368 <HAL_RCC_OscConfig+0x2f8>
 800133c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001340:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001344:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001348:	fa93 f3a3 	rbit	r3, r3
 800134c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001350:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001354:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001358:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800135c:	fa93 f3a3 	rbit	r3, r3
 8001360:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001364:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <HAL_RCC_OscConfig+0x330>)
 8001366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001368:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800136c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001370:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001374:	fa92 f2a2 	rbit	r2, r2
 8001378:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800137c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001380:	fab2 f282 	clz	r2, r2
 8001384:	b2d2      	uxtb	r2, r2
 8001386:	f042 0220 	orr.w	r2, r2, #32
 800138a:	b2d2      	uxtb	r2, r2
 800138c:	f002 021f 	and.w	r2, r2, #31
 8001390:	2101      	movs	r1, #1
 8001392:	fa01 f202 	lsl.w	r2, r1, r2
 8001396:	4013      	ands	r3, r2
 8001398:	2b00      	cmp	r3, #0
 800139a:	d1ab      	bne.n	80012f4 <HAL_RCC_OscConfig+0x284>
 800139c:	e003      	b.n	80013a6 <HAL_RCC_OscConfig+0x336>
 800139e:	bf00      	nop
 80013a0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	f000 817d 	beq.w	80016b6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80013bc:	4ba6      	ldr	r3, [pc, #664]	; (8001658 <HAL_RCC_OscConfig+0x5e8>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f003 030c 	and.w	r3, r3, #12
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d00b      	beq.n	80013e0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80013c8:	4ba3      	ldr	r3, [pc, #652]	; (8001658 <HAL_RCC_OscConfig+0x5e8>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 030c 	and.w	r3, r3, #12
 80013d0:	2b08      	cmp	r3, #8
 80013d2:	d172      	bne.n	80014ba <HAL_RCC_OscConfig+0x44a>
 80013d4:	4ba0      	ldr	r3, [pc, #640]	; (8001658 <HAL_RCC_OscConfig+0x5e8>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d16c      	bne.n	80014ba <HAL_RCC_OscConfig+0x44a>
 80013e0:	2302      	movs	r3, #2
 80013e2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80013ea:	fa93 f3a3 	rbit	r3, r3
 80013ee:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80013f2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f6:	fab3 f383 	clz	r3, r3
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	095b      	lsrs	r3, r3, #5
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	b2db      	uxtb	r3, r3
 8001406:	2b01      	cmp	r3, #1
 8001408:	d102      	bne.n	8001410 <HAL_RCC_OscConfig+0x3a0>
 800140a:	4b93      	ldr	r3, [pc, #588]	; (8001658 <HAL_RCC_OscConfig+0x5e8>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	e013      	b.n	8001438 <HAL_RCC_OscConfig+0x3c8>
 8001410:	2302      	movs	r3, #2
 8001412:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001416:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800141a:	fa93 f3a3 	rbit	r3, r3
 800141e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001422:	2302      	movs	r3, #2
 8001424:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001428:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800142c:	fa93 f3a3 	rbit	r3, r3
 8001430:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001434:	4b88      	ldr	r3, [pc, #544]	; (8001658 <HAL_RCC_OscConfig+0x5e8>)
 8001436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001438:	2202      	movs	r2, #2
 800143a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800143e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001442:	fa92 f2a2 	rbit	r2, r2
 8001446:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800144a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800144e:	fab2 f282 	clz	r2, r2
 8001452:	b2d2      	uxtb	r2, r2
 8001454:	f042 0220 	orr.w	r2, r2, #32
 8001458:	b2d2      	uxtb	r2, r2
 800145a:	f002 021f 	and.w	r2, r2, #31
 800145e:	2101      	movs	r1, #1
 8001460:	fa01 f202 	lsl.w	r2, r1, r2
 8001464:	4013      	ands	r3, r2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d00a      	beq.n	8001480 <HAL_RCC_OscConfig+0x410>
 800146a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800146e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	691b      	ldr	r3, [r3, #16]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d002      	beq.n	8001480 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	f000 be2e 	b.w	80020dc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001480:	4b75      	ldr	r3, [pc, #468]	; (8001658 <HAL_RCC_OscConfig+0x5e8>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001488:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800148c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	695b      	ldr	r3, [r3, #20]
 8001494:	21f8      	movs	r1, #248	; 0xf8
 8001496:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800149a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800149e:	fa91 f1a1 	rbit	r1, r1
 80014a2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80014a6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80014aa:	fab1 f181 	clz	r1, r1
 80014ae:	b2c9      	uxtb	r1, r1
 80014b0:	408b      	lsls	r3, r1
 80014b2:	4969      	ldr	r1, [pc, #420]	; (8001658 <HAL_RCC_OscConfig+0x5e8>)
 80014b4:	4313      	orrs	r3, r2
 80014b6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014b8:	e0fd      	b.n	80016b6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	691b      	ldr	r3, [r3, #16]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	f000 8088 	beq.w	80015dc <HAL_RCC_OscConfig+0x56c>
 80014cc:	2301      	movs	r3, #1
 80014ce:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80014d6:	fa93 f3a3 	rbit	r3, r3
 80014da:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80014de:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014e2:	fab3 f383 	clz	r3, r3
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80014ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	461a      	mov	r2, r3
 80014f4:	2301      	movs	r3, #1
 80014f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f8:	f7ff fb32 	bl	8000b60 <HAL_GetTick>
 80014fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001500:	e00a      	b.n	8001518 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001502:	f7ff fb2d 	bl	8000b60 <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d902      	bls.n	8001518 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	f000 bde2 	b.w	80020dc <HAL_RCC_OscConfig+0x106c>
 8001518:	2302      	movs	r3, #2
 800151a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800151e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001522:	fa93 f3a3 	rbit	r3, r3
 8001526:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800152a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800152e:	fab3 f383 	clz	r3, r3
 8001532:	b2db      	uxtb	r3, r3
 8001534:	095b      	lsrs	r3, r3, #5
 8001536:	b2db      	uxtb	r3, r3
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b01      	cmp	r3, #1
 8001540:	d102      	bne.n	8001548 <HAL_RCC_OscConfig+0x4d8>
 8001542:	4b45      	ldr	r3, [pc, #276]	; (8001658 <HAL_RCC_OscConfig+0x5e8>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	e013      	b.n	8001570 <HAL_RCC_OscConfig+0x500>
 8001548:	2302      	movs	r3, #2
 800154a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001552:	fa93 f3a3 	rbit	r3, r3
 8001556:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800155a:	2302      	movs	r3, #2
 800155c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001560:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001564:	fa93 f3a3 	rbit	r3, r3
 8001568:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800156c:	4b3a      	ldr	r3, [pc, #232]	; (8001658 <HAL_RCC_OscConfig+0x5e8>)
 800156e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001570:	2202      	movs	r2, #2
 8001572:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001576:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800157a:	fa92 f2a2 	rbit	r2, r2
 800157e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001582:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001586:	fab2 f282 	clz	r2, r2
 800158a:	b2d2      	uxtb	r2, r2
 800158c:	f042 0220 	orr.w	r2, r2, #32
 8001590:	b2d2      	uxtb	r2, r2
 8001592:	f002 021f 	and.w	r2, r2, #31
 8001596:	2101      	movs	r1, #1
 8001598:	fa01 f202 	lsl.w	r2, r1, r2
 800159c:	4013      	ands	r3, r2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d0af      	beq.n	8001502 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a2:	4b2d      	ldr	r3, [pc, #180]	; (8001658 <HAL_RCC_OscConfig+0x5e8>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	695b      	ldr	r3, [r3, #20]
 80015b6:	21f8      	movs	r1, #248	; 0xf8
 80015b8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015bc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80015c0:	fa91 f1a1 	rbit	r1, r1
 80015c4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80015c8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80015cc:	fab1 f181 	clz	r1, r1
 80015d0:	b2c9      	uxtb	r1, r1
 80015d2:	408b      	lsls	r3, r1
 80015d4:	4920      	ldr	r1, [pc, #128]	; (8001658 <HAL_RCC_OscConfig+0x5e8>)
 80015d6:	4313      	orrs	r3, r2
 80015d8:	600b      	str	r3, [r1, #0]
 80015da:	e06c      	b.n	80016b6 <HAL_RCC_OscConfig+0x646>
 80015dc:	2301      	movs	r3, #1
 80015de:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80015e6:	fa93 f3a3 	rbit	r3, r3
 80015ea:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80015ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015f2:	fab3 f383 	clz	r3, r3
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80015fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	461a      	mov	r2, r3
 8001604:	2300      	movs	r3, #0
 8001606:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001608:	f7ff faaa 	bl	8000b60 <HAL_GetTick>
 800160c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001610:	e00a      	b.n	8001628 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001612:	f7ff faa5 	bl	8000b60 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d902      	bls.n	8001628 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	f000 bd5a 	b.w	80020dc <HAL_RCC_OscConfig+0x106c>
 8001628:	2302      	movs	r3, #2
 800162a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001632:	fa93 f3a3 	rbit	r3, r3
 8001636:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800163a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800163e:	fab3 f383 	clz	r3, r3
 8001642:	b2db      	uxtb	r3, r3
 8001644:	095b      	lsrs	r3, r3, #5
 8001646:	b2db      	uxtb	r3, r3
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	b2db      	uxtb	r3, r3
 800164e:	2b01      	cmp	r3, #1
 8001650:	d104      	bne.n	800165c <HAL_RCC_OscConfig+0x5ec>
 8001652:	4b01      	ldr	r3, [pc, #4]	; (8001658 <HAL_RCC_OscConfig+0x5e8>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	e015      	b.n	8001684 <HAL_RCC_OscConfig+0x614>
 8001658:	40021000 	.word	0x40021000
 800165c:	2302      	movs	r3, #2
 800165e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001662:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001666:	fa93 f3a3 	rbit	r3, r3
 800166a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800166e:	2302      	movs	r3, #2
 8001670:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001674:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001678:	fa93 f3a3 	rbit	r3, r3
 800167c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001680:	4bc8      	ldr	r3, [pc, #800]	; (80019a4 <HAL_RCC_OscConfig+0x934>)
 8001682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001684:	2202      	movs	r2, #2
 8001686:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800168a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800168e:	fa92 f2a2 	rbit	r2, r2
 8001692:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001696:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800169a:	fab2 f282 	clz	r2, r2
 800169e:	b2d2      	uxtb	r2, r2
 80016a0:	f042 0220 	orr.w	r2, r2, #32
 80016a4:	b2d2      	uxtb	r2, r2
 80016a6:	f002 021f 	and.w	r2, r2, #31
 80016aa:	2101      	movs	r1, #1
 80016ac:	fa01 f202 	lsl.w	r2, r1, r2
 80016b0:	4013      	ands	r3, r2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1ad      	bne.n	8001612 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0308 	and.w	r3, r3, #8
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f000 8110 	beq.w	80018ec <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d079      	beq.n	80017d0 <HAL_RCC_OscConfig+0x760>
 80016dc:	2301      	movs	r3, #1
 80016de:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80016e6:	fa93 f3a3 	rbit	r3, r3
 80016ea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80016ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016f2:	fab3 f383 	clz	r3, r3
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	461a      	mov	r2, r3
 80016fa:	4bab      	ldr	r3, [pc, #684]	; (80019a8 <HAL_RCC_OscConfig+0x938>)
 80016fc:	4413      	add	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	461a      	mov	r2, r3
 8001702:	2301      	movs	r3, #1
 8001704:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001706:	f7ff fa2b 	bl	8000b60 <HAL_GetTick>
 800170a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800170e:	e00a      	b.n	8001726 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001710:	f7ff fa26 	bl	8000b60 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d902      	bls.n	8001726 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	f000 bcdb 	b.w	80020dc <HAL_RCC_OscConfig+0x106c>
 8001726:	2302      	movs	r3, #2
 8001728:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800172c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001730:	fa93 f3a3 	rbit	r3, r3
 8001734:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001738:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800173c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001740:	2202      	movs	r2, #2
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001748:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	fa93 f2a3 	rbit	r2, r3
 8001752:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001756:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001760:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001764:	2202      	movs	r2, #2
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800176c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	fa93 f2a3 	rbit	r2, r3
 8001776:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800177a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800177e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001780:	4b88      	ldr	r3, [pc, #544]	; (80019a4 <HAL_RCC_OscConfig+0x934>)
 8001782:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001784:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001788:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800178c:	2102      	movs	r1, #2
 800178e:	6019      	str	r1, [r3, #0]
 8001790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001794:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	fa93 f1a3 	rbit	r1, r3
 800179e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017a2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80017a6:	6019      	str	r1, [r3, #0]
  return result;
 80017a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ac:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	fab3 f383 	clz	r3, r3
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	f003 031f 	and.w	r3, r3, #31
 80017c2:	2101      	movs	r1, #1
 80017c4:	fa01 f303 	lsl.w	r3, r1, r3
 80017c8:	4013      	ands	r3, r2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d0a0      	beq.n	8001710 <HAL_RCC_OscConfig+0x6a0>
 80017ce:	e08d      	b.n	80018ec <HAL_RCC_OscConfig+0x87c>
 80017d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80017d8:	2201      	movs	r2, #1
 80017da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017e0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	fa93 f2a3 	rbit	r2, r3
 80017ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ee:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80017f2:	601a      	str	r2, [r3, #0]
  return result;
 80017f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80017fc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017fe:	fab3 f383 	clz	r3, r3
 8001802:	b2db      	uxtb	r3, r3
 8001804:	461a      	mov	r2, r3
 8001806:	4b68      	ldr	r3, [pc, #416]	; (80019a8 <HAL_RCC_OscConfig+0x938>)
 8001808:	4413      	add	r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	461a      	mov	r2, r3
 800180e:	2300      	movs	r3, #0
 8001810:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001812:	f7ff f9a5 	bl	8000b60 <HAL_GetTick>
 8001816:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800181a:	e00a      	b.n	8001832 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800181c:	f7ff f9a0 	bl	8000b60 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d902      	bls.n	8001832 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	f000 bc55 	b.w	80020dc <HAL_RCC_OscConfig+0x106c>
 8001832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001836:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800183a:	2202      	movs	r2, #2
 800183c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001842:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	fa93 f2a3 	rbit	r2, r3
 800184c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001850:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800185a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800185e:	2202      	movs	r2, #2
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001866:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	fa93 f2a3 	rbit	r2, r3
 8001870:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001874:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800187e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001882:	2202      	movs	r2, #2
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800188a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	fa93 f2a3 	rbit	r2, r3
 8001894:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001898:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800189c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800189e:	4b41      	ldr	r3, [pc, #260]	; (80019a4 <HAL_RCC_OscConfig+0x934>)
 80018a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80018aa:	2102      	movs	r1, #2
 80018ac:	6019      	str	r1, [r3, #0]
 80018ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	fa93 f1a3 	rbit	r1, r3
 80018bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80018c4:	6019      	str	r1, [r3, #0]
  return result;
 80018c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ca:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	fab3 f383 	clz	r3, r3
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	f003 031f 	and.w	r3, r3, #31
 80018e0:	2101      	movs	r1, #1
 80018e2:	fa01 f303 	lsl.w	r3, r1, r3
 80018e6:	4013      	ands	r3, r2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d197      	bne.n	800181c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0304 	and.w	r3, r3, #4
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f000 81a1 	beq.w	8001c44 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001902:	2300      	movs	r3, #0
 8001904:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001908:	4b26      	ldr	r3, [pc, #152]	; (80019a4 <HAL_RCC_OscConfig+0x934>)
 800190a:	69db      	ldr	r3, [r3, #28]
 800190c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d116      	bne.n	8001942 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001914:	4b23      	ldr	r3, [pc, #140]	; (80019a4 <HAL_RCC_OscConfig+0x934>)
 8001916:	69db      	ldr	r3, [r3, #28]
 8001918:	4a22      	ldr	r2, [pc, #136]	; (80019a4 <HAL_RCC_OscConfig+0x934>)
 800191a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800191e:	61d3      	str	r3, [r2, #28]
 8001920:	4b20      	ldr	r3, [pc, #128]	; (80019a4 <HAL_RCC_OscConfig+0x934>)
 8001922:	69db      	ldr	r3, [r3, #28]
 8001924:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001928:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800192c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001936:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800193a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800193c:	2301      	movs	r3, #1
 800193e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001942:	4b1a      	ldr	r3, [pc, #104]	; (80019ac <HAL_RCC_OscConfig+0x93c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800194a:	2b00      	cmp	r3, #0
 800194c:	d11a      	bne.n	8001984 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800194e:	4b17      	ldr	r3, [pc, #92]	; (80019ac <HAL_RCC_OscConfig+0x93c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a16      	ldr	r2, [pc, #88]	; (80019ac <HAL_RCC_OscConfig+0x93c>)
 8001954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001958:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800195a:	f7ff f901 	bl	8000b60 <HAL_GetTick>
 800195e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001962:	e009      	b.n	8001978 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001964:	f7ff f8fc 	bl	8000b60 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b64      	cmp	r3, #100	; 0x64
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e3b1      	b.n	80020dc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001978:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <HAL_RCC_OscConfig+0x93c>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001980:	2b00      	cmp	r3, #0
 8001982:	d0ef      	beq.n	8001964 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001984:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001988:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d10d      	bne.n	80019b0 <HAL_RCC_OscConfig+0x940>
 8001994:	4b03      	ldr	r3, [pc, #12]	; (80019a4 <HAL_RCC_OscConfig+0x934>)
 8001996:	6a1b      	ldr	r3, [r3, #32]
 8001998:	4a02      	ldr	r2, [pc, #8]	; (80019a4 <HAL_RCC_OscConfig+0x934>)
 800199a:	f043 0301 	orr.w	r3, r3, #1
 800199e:	6213      	str	r3, [r2, #32]
 80019a0:	e03c      	b.n	8001a1c <HAL_RCC_OscConfig+0x9ac>
 80019a2:	bf00      	nop
 80019a4:	40021000 	.word	0x40021000
 80019a8:	10908120 	.word	0x10908120
 80019ac:	40007000 	.word	0x40007000
 80019b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d10c      	bne.n	80019da <HAL_RCC_OscConfig+0x96a>
 80019c0:	4bc1      	ldr	r3, [pc, #772]	; (8001cc8 <HAL_RCC_OscConfig+0xc58>)
 80019c2:	6a1b      	ldr	r3, [r3, #32]
 80019c4:	4ac0      	ldr	r2, [pc, #768]	; (8001cc8 <HAL_RCC_OscConfig+0xc58>)
 80019c6:	f023 0301 	bic.w	r3, r3, #1
 80019ca:	6213      	str	r3, [r2, #32]
 80019cc:	4bbe      	ldr	r3, [pc, #760]	; (8001cc8 <HAL_RCC_OscConfig+0xc58>)
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	4abd      	ldr	r2, [pc, #756]	; (8001cc8 <HAL_RCC_OscConfig+0xc58>)
 80019d2:	f023 0304 	bic.w	r3, r3, #4
 80019d6:	6213      	str	r3, [r2, #32]
 80019d8:	e020      	b.n	8001a1c <HAL_RCC_OscConfig+0x9ac>
 80019da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	2b05      	cmp	r3, #5
 80019e8:	d10c      	bne.n	8001a04 <HAL_RCC_OscConfig+0x994>
 80019ea:	4bb7      	ldr	r3, [pc, #732]	; (8001cc8 <HAL_RCC_OscConfig+0xc58>)
 80019ec:	6a1b      	ldr	r3, [r3, #32]
 80019ee:	4ab6      	ldr	r2, [pc, #728]	; (8001cc8 <HAL_RCC_OscConfig+0xc58>)
 80019f0:	f043 0304 	orr.w	r3, r3, #4
 80019f4:	6213      	str	r3, [r2, #32]
 80019f6:	4bb4      	ldr	r3, [pc, #720]	; (8001cc8 <HAL_RCC_OscConfig+0xc58>)
 80019f8:	6a1b      	ldr	r3, [r3, #32]
 80019fa:	4ab3      	ldr	r2, [pc, #716]	; (8001cc8 <HAL_RCC_OscConfig+0xc58>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	6213      	str	r3, [r2, #32]
 8001a02:	e00b      	b.n	8001a1c <HAL_RCC_OscConfig+0x9ac>
 8001a04:	4bb0      	ldr	r3, [pc, #704]	; (8001cc8 <HAL_RCC_OscConfig+0xc58>)
 8001a06:	6a1b      	ldr	r3, [r3, #32]
 8001a08:	4aaf      	ldr	r2, [pc, #700]	; (8001cc8 <HAL_RCC_OscConfig+0xc58>)
 8001a0a:	f023 0301 	bic.w	r3, r3, #1
 8001a0e:	6213      	str	r3, [r2, #32]
 8001a10:	4bad      	ldr	r3, [pc, #692]	; (8001cc8 <HAL_RCC_OscConfig+0xc58>)
 8001a12:	6a1b      	ldr	r3, [r3, #32]
 8001a14:	4aac      	ldr	r2, [pc, #688]	; (8001cc8 <HAL_RCC_OscConfig+0xc58>)
 8001a16:	f023 0304 	bic.w	r3, r3, #4
 8001a1a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a20:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f000 8081 	beq.w	8001b30 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a2e:	f7ff f897 	bl	8000b60 <HAL_GetTick>
 8001a32:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a36:	e00b      	b.n	8001a50 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a38:	f7ff f892 	bl	8000b60 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e345      	b.n	80020dc <HAL_RCC_OscConfig+0x106c>
 8001a50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a54:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001a58:	2202      	movs	r2, #2
 8001a5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a60:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	fa93 f2a3 	rbit	r2, r3
 8001a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a6e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a78:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001a7c:	2202      	movs	r2, #2
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a84:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	fa93 f2a3 	rbit	r2, r3
 8001a8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a92:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001a96:	601a      	str	r2, [r3, #0]
  return result;
 8001a98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a9c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001aa0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aa2:	fab3 f383 	clz	r3, r3
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	095b      	lsrs	r3, r3, #5
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	f043 0302 	orr.w	r3, r3, #2
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d102      	bne.n	8001abc <HAL_RCC_OscConfig+0xa4c>
 8001ab6:	4b84      	ldr	r3, [pc, #528]	; (8001cc8 <HAL_RCC_OscConfig+0xc58>)
 8001ab8:	6a1b      	ldr	r3, [r3, #32]
 8001aba:	e013      	b.n	8001ae4 <HAL_RCC_OscConfig+0xa74>
 8001abc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001acc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	fa93 f2a3 	rbit	r2, r3
 8001ad6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ada:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	4b79      	ldr	r3, [pc, #484]	; (8001cc8 <HAL_RCC_OscConfig+0xc58>)
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ae8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001aec:	2102      	movs	r1, #2
 8001aee:	6011      	str	r1, [r2, #0]
 8001af0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001af4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001af8:	6812      	ldr	r2, [r2, #0]
 8001afa:	fa92 f1a2 	rbit	r1, r2
 8001afe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b02:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001b06:	6011      	str	r1, [r2, #0]
  return result;
 8001b08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b0c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001b10:	6812      	ldr	r2, [r2, #0]
 8001b12:	fab2 f282 	clz	r2, r2
 8001b16:	b2d2      	uxtb	r2, r2
 8001b18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b1c:	b2d2      	uxtb	r2, r2
 8001b1e:	f002 021f 	and.w	r2, r2, #31
 8001b22:	2101      	movs	r1, #1
 8001b24:	fa01 f202 	lsl.w	r2, r1, r2
 8001b28:	4013      	ands	r3, r2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d084      	beq.n	8001a38 <HAL_RCC_OscConfig+0x9c8>
 8001b2e:	e07f      	b.n	8001c30 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b30:	f7ff f816 	bl	8000b60 <HAL_GetTick>
 8001b34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b38:	e00b      	b.n	8001b52 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b3a:	f7ff f811 	bl	8000b60 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e2c4      	b.n	80020dc <HAL_RCC_OscConfig+0x106c>
 8001b52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b56:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b62:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	fa93 f2a3 	rbit	r2, r3
 8001b6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b70:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b7a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001b7e:	2202      	movs	r2, #2
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b86:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	fa93 f2a3 	rbit	r2, r3
 8001b90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b94:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001b98:	601a      	str	r2, [r3, #0]
  return result;
 8001b9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b9e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001ba2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ba4:	fab3 f383 	clz	r3, r3
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	095b      	lsrs	r3, r3, #5
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	f043 0302 	orr.w	r3, r3, #2
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d102      	bne.n	8001bbe <HAL_RCC_OscConfig+0xb4e>
 8001bb8:	4b43      	ldr	r3, [pc, #268]	; (8001cc8 <HAL_RCC_OscConfig+0xc58>)
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	e013      	b.n	8001be6 <HAL_RCC_OscConfig+0xb76>
 8001bbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bce:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	fa93 f2a3 	rbit	r2, r3
 8001bd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bdc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	4b39      	ldr	r3, [pc, #228]	; (8001cc8 <HAL_RCC_OscConfig+0xc58>)
 8001be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bea:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001bee:	2102      	movs	r1, #2
 8001bf0:	6011      	str	r1, [r2, #0]
 8001bf2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bf6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001bfa:	6812      	ldr	r2, [r2, #0]
 8001bfc:	fa92 f1a2 	rbit	r1, r2
 8001c00:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c04:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001c08:	6011      	str	r1, [r2, #0]
  return result;
 8001c0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c0e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001c12:	6812      	ldr	r2, [r2, #0]
 8001c14:	fab2 f282 	clz	r2, r2
 8001c18:	b2d2      	uxtb	r2, r2
 8001c1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c1e:	b2d2      	uxtb	r2, r2
 8001c20:	f002 021f 	and.w	r2, r2, #31
 8001c24:	2101      	movs	r1, #1
 8001c26:	fa01 f202 	lsl.w	r2, r1, r2
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d184      	bne.n	8001b3a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c30:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d105      	bne.n	8001c44 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c38:	4b23      	ldr	r3, [pc, #140]	; (8001cc8 <HAL_RCC_OscConfig+0xc58>)
 8001c3a:	69db      	ldr	r3, [r3, #28]
 8001c3c:	4a22      	ldr	r2, [pc, #136]	; (8001cc8 <HAL_RCC_OscConfig+0xc58>)
 8001c3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c42:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c48:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	69db      	ldr	r3, [r3, #28]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f000 8242 	beq.w	80020da <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c56:	4b1c      	ldr	r3, [pc, #112]	; (8001cc8 <HAL_RCC_OscConfig+0xc58>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f003 030c 	and.w	r3, r3, #12
 8001c5e:	2b08      	cmp	r3, #8
 8001c60:	f000 8213 	beq.w	800208a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c68:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	69db      	ldr	r3, [r3, #28]
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	f040 8162 	bne.w	8001f3a <HAL_RCC_OscConfig+0xeca>
 8001c76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c7a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001c7e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c88:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	fa93 f2a3 	rbit	r2, r3
 8001c92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c96:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001c9a:	601a      	str	r2, [r3, #0]
  return result;
 8001c9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001ca4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ca6:	fab3 f383 	clz	r3, r3
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cb0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	2300      	movs	r3, #0
 8001cba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cbc:	f7fe ff50 	bl	8000b60 <HAL_GetTick>
 8001cc0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cc4:	e00c      	b.n	8001ce0 <HAL_RCC_OscConfig+0xc70>
 8001cc6:	bf00      	nop
 8001cc8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ccc:	f7fe ff48 	bl	8000b60 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e1fd      	b.n	80020dc <HAL_RCC_OscConfig+0x106c>
 8001ce0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001ce8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	fa93 f2a3 	rbit	r2, r3
 8001cfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d00:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001d04:	601a      	str	r2, [r3, #0]
  return result;
 8001d06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d0a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001d0e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d10:	fab3 f383 	clz	r3, r3
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	095b      	lsrs	r3, r3, #5
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d102      	bne.n	8001d2a <HAL_RCC_OscConfig+0xcba>
 8001d24:	4bb0      	ldr	r3, [pc, #704]	; (8001fe8 <HAL_RCC_OscConfig+0xf78>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	e027      	b.n	8001d7a <HAL_RCC_OscConfig+0xd0a>
 8001d2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d2e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001d32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d3c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	fa93 f2a3 	rbit	r2, r3
 8001d46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d4a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d54:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001d58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d62:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	fa93 f2a3 	rbit	r2, r3
 8001d6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d70:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	4b9c      	ldr	r3, [pc, #624]	; (8001fe8 <HAL_RCC_OscConfig+0xf78>)
 8001d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d7e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001d82:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d86:	6011      	str	r1, [r2, #0]
 8001d88:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d8c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001d90:	6812      	ldr	r2, [r2, #0]
 8001d92:	fa92 f1a2 	rbit	r1, r2
 8001d96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d9a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001d9e:	6011      	str	r1, [r2, #0]
  return result;
 8001da0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001da4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001da8:	6812      	ldr	r2, [r2, #0]
 8001daa:	fab2 f282 	clz	r2, r2
 8001dae:	b2d2      	uxtb	r2, r2
 8001db0:	f042 0220 	orr.w	r2, r2, #32
 8001db4:	b2d2      	uxtb	r2, r2
 8001db6:	f002 021f 	and.w	r2, r2, #31
 8001dba:	2101      	movs	r1, #1
 8001dbc:	fa01 f202 	lsl.w	r2, r1, r2
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d182      	bne.n	8001ccc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dc6:	4b88      	ldr	r3, [pc, #544]	; (8001fe8 <HAL_RCC_OscConfig+0xf78>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001dce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001dda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6a1b      	ldr	r3, [r3, #32]
 8001de6:	430b      	orrs	r3, r1
 8001de8:	497f      	ldr	r1, [pc, #508]	; (8001fe8 <HAL_RCC_OscConfig+0xf78>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	604b      	str	r3, [r1, #4]
 8001dee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001df6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001dfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e00:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	fa93 f2a3 	rbit	r2, r3
 8001e0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e0e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001e12:	601a      	str	r2, [r3, #0]
  return result;
 8001e14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e18:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001e1c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e1e:	fab3 f383 	clz	r3, r3
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e28:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	461a      	mov	r2, r3
 8001e30:	2301      	movs	r3, #1
 8001e32:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e34:	f7fe fe94 	bl	8000b60 <HAL_GetTick>
 8001e38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e3c:	e009      	b.n	8001e52 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e3e:	f7fe fe8f 	bl	8000b60 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e144      	b.n	80020dc <HAL_RCC_OscConfig+0x106c>
 8001e52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e56:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001e5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e64:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	fa93 f2a3 	rbit	r2, r3
 8001e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e72:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001e76:	601a      	str	r2, [r3, #0]
  return result;
 8001e78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e7c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001e80:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e82:	fab3 f383 	clz	r3, r3
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	095b      	lsrs	r3, r3, #5
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d102      	bne.n	8001e9c <HAL_RCC_OscConfig+0xe2c>
 8001e96:	4b54      	ldr	r3, [pc, #336]	; (8001fe8 <HAL_RCC_OscConfig+0xf78>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	e027      	b.n	8001eec <HAL_RCC_OscConfig+0xe7c>
 8001e9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ea4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ea8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eae:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	fa93 f2a3 	rbit	r2, r3
 8001eb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ebc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001eca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	fa93 f2a3 	rbit	r2, r3
 8001ede:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	4b3f      	ldr	r3, [pc, #252]	; (8001fe8 <HAL_RCC_OscConfig+0xf78>)
 8001eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ef0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001ef4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ef8:	6011      	str	r1, [r2, #0]
 8001efa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001efe:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001f02:	6812      	ldr	r2, [r2, #0]
 8001f04:	fa92 f1a2 	rbit	r1, r2
 8001f08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f0c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001f10:	6011      	str	r1, [r2, #0]
  return result;
 8001f12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f16:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001f1a:	6812      	ldr	r2, [r2, #0]
 8001f1c:	fab2 f282 	clz	r2, r2
 8001f20:	b2d2      	uxtb	r2, r2
 8001f22:	f042 0220 	orr.w	r2, r2, #32
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	f002 021f 	and.w	r2, r2, #31
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f32:	4013      	ands	r3, r2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d082      	beq.n	8001e3e <HAL_RCC_OscConfig+0xdce>
 8001f38:	e0cf      	b.n	80020da <HAL_RCC_OscConfig+0x106a>
 8001f3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f3e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001f42:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f4c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	fa93 f2a3 	rbit	r2, r3
 8001f56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f5a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001f5e:	601a      	str	r2, [r3, #0]
  return result;
 8001f60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f64:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001f68:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f6a:	fab3 f383 	clz	r3, r3
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f74:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f80:	f7fe fdee 	bl	8000b60 <HAL_GetTick>
 8001f84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f88:	e009      	b.n	8001f9e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f8a:	f7fe fde9 	bl	8000b60 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e09e      	b.n	80020dc <HAL_RCC_OscConfig+0x106c>
 8001f9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001fa6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001faa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fb0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	fa93 f2a3 	rbit	r2, r3
 8001fba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fbe:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001fc2:	601a      	str	r2, [r3, #0]
  return result;
 8001fc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001fcc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fce:	fab3 f383 	clz	r3, r3
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	095b      	lsrs	r3, r3, #5
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	f043 0301 	orr.w	r3, r3, #1
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d104      	bne.n	8001fec <HAL_RCC_OscConfig+0xf7c>
 8001fe2:	4b01      	ldr	r3, [pc, #4]	; (8001fe8 <HAL_RCC_OscConfig+0xf78>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	e029      	b.n	800203c <HAL_RCC_OscConfig+0xfcc>
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001ff4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ff8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ffe:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	fa93 f2a3 	rbit	r2, r3
 8002008:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800200c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002016:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800201a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002024:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	fa93 f2a3 	rbit	r2, r3
 800202e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002032:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	4b2b      	ldr	r3, [pc, #172]	; (80020e8 <HAL_RCC_OscConfig+0x1078>)
 800203a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002040:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002044:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002048:	6011      	str	r1, [r2, #0]
 800204a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800204e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002052:	6812      	ldr	r2, [r2, #0]
 8002054:	fa92 f1a2 	rbit	r1, r2
 8002058:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800205c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002060:	6011      	str	r1, [r2, #0]
  return result;
 8002062:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002066:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800206a:	6812      	ldr	r2, [r2, #0]
 800206c:	fab2 f282 	clz	r2, r2
 8002070:	b2d2      	uxtb	r2, r2
 8002072:	f042 0220 	orr.w	r2, r2, #32
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	f002 021f 	and.w	r2, r2, #31
 800207c:	2101      	movs	r1, #1
 800207e:	fa01 f202 	lsl.w	r2, r1, r2
 8002082:	4013      	ands	r3, r2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d180      	bne.n	8001f8a <HAL_RCC_OscConfig+0xf1a>
 8002088:	e027      	b.n	80020da <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800208a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800208e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d101      	bne.n	800209e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e01e      	b.n	80020dc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800209e:	4b12      	ldr	r3, [pc, #72]	; (80020e8 <HAL_RCC_OscConfig+0x1078>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80020a6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80020aa:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d10b      	bne.n	80020d6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80020be:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80020c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d001      	beq.n	80020da <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e000      	b.n	80020dc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40021000 	.word	0x40021000

080020ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b09e      	sub	sp, #120	; 0x78
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d101      	bne.n	8002104 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e162      	b.n	80023ca <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002104:	4b90      	ldr	r3, [pc, #576]	; (8002348 <HAL_RCC_ClockConfig+0x25c>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0307 	and.w	r3, r3, #7
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	429a      	cmp	r2, r3
 8002110:	d910      	bls.n	8002134 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002112:	4b8d      	ldr	r3, [pc, #564]	; (8002348 <HAL_RCC_ClockConfig+0x25c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f023 0207 	bic.w	r2, r3, #7
 800211a:	498b      	ldr	r1, [pc, #556]	; (8002348 <HAL_RCC_ClockConfig+0x25c>)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	4313      	orrs	r3, r2
 8002120:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002122:	4b89      	ldr	r3, [pc, #548]	; (8002348 <HAL_RCC_ClockConfig+0x25c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	429a      	cmp	r2, r3
 800212e:	d001      	beq.n	8002134 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e14a      	b.n	80023ca <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d008      	beq.n	8002152 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002140:	4b82      	ldr	r3, [pc, #520]	; (800234c <HAL_RCC_ClockConfig+0x260>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	497f      	ldr	r1, [pc, #508]	; (800234c <HAL_RCC_ClockConfig+0x260>)
 800214e:	4313      	orrs	r3, r2
 8002150:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b00      	cmp	r3, #0
 800215c:	f000 80dc 	beq.w	8002318 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d13c      	bne.n	80021e2 <HAL_RCC_ClockConfig+0xf6>
 8002168:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800216c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002170:	fa93 f3a3 	rbit	r3, r3
 8002174:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002176:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002178:	fab3 f383 	clz	r3, r3
 800217c:	b2db      	uxtb	r3, r3
 800217e:	095b      	lsrs	r3, r3, #5
 8002180:	b2db      	uxtb	r3, r3
 8002182:	f043 0301 	orr.w	r3, r3, #1
 8002186:	b2db      	uxtb	r3, r3
 8002188:	2b01      	cmp	r3, #1
 800218a:	d102      	bne.n	8002192 <HAL_RCC_ClockConfig+0xa6>
 800218c:	4b6f      	ldr	r3, [pc, #444]	; (800234c <HAL_RCC_ClockConfig+0x260>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	e00f      	b.n	80021b2 <HAL_RCC_ClockConfig+0xc6>
 8002192:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002196:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002198:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800219a:	fa93 f3a3 	rbit	r3, r3
 800219e:	667b      	str	r3, [r7, #100]	; 0x64
 80021a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021a4:	663b      	str	r3, [r7, #96]	; 0x60
 80021a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021a8:	fa93 f3a3 	rbit	r3, r3
 80021ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80021ae:	4b67      	ldr	r3, [pc, #412]	; (800234c <HAL_RCC_ClockConfig+0x260>)
 80021b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021b6:	65ba      	str	r2, [r7, #88]	; 0x58
 80021b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80021ba:	fa92 f2a2 	rbit	r2, r2
 80021be:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80021c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80021c2:	fab2 f282 	clz	r2, r2
 80021c6:	b2d2      	uxtb	r2, r2
 80021c8:	f042 0220 	orr.w	r2, r2, #32
 80021cc:	b2d2      	uxtb	r2, r2
 80021ce:	f002 021f 	and.w	r2, r2, #31
 80021d2:	2101      	movs	r1, #1
 80021d4:	fa01 f202 	lsl.w	r2, r1, r2
 80021d8:	4013      	ands	r3, r2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d17b      	bne.n	80022d6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e0f3      	b.n	80023ca <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d13c      	bne.n	8002264 <HAL_RCC_ClockConfig+0x178>
 80021ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021ee:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021f2:	fa93 f3a3 	rbit	r3, r3
 80021f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80021f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021fa:	fab3 f383 	clz	r3, r3
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	095b      	lsrs	r3, r3, #5
 8002202:	b2db      	uxtb	r3, r3
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b01      	cmp	r3, #1
 800220c:	d102      	bne.n	8002214 <HAL_RCC_ClockConfig+0x128>
 800220e:	4b4f      	ldr	r3, [pc, #316]	; (800234c <HAL_RCC_ClockConfig+0x260>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	e00f      	b.n	8002234 <HAL_RCC_ClockConfig+0x148>
 8002214:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002218:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800221c:	fa93 f3a3 	rbit	r3, r3
 8002220:	647b      	str	r3, [r7, #68]	; 0x44
 8002222:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002226:	643b      	str	r3, [r7, #64]	; 0x40
 8002228:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800222a:	fa93 f3a3 	rbit	r3, r3
 800222e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002230:	4b46      	ldr	r3, [pc, #280]	; (800234c <HAL_RCC_ClockConfig+0x260>)
 8002232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002234:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002238:	63ba      	str	r2, [r7, #56]	; 0x38
 800223a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800223c:	fa92 f2a2 	rbit	r2, r2
 8002240:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002242:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002244:	fab2 f282 	clz	r2, r2
 8002248:	b2d2      	uxtb	r2, r2
 800224a:	f042 0220 	orr.w	r2, r2, #32
 800224e:	b2d2      	uxtb	r2, r2
 8002250:	f002 021f 	and.w	r2, r2, #31
 8002254:	2101      	movs	r1, #1
 8002256:	fa01 f202 	lsl.w	r2, r1, r2
 800225a:	4013      	ands	r3, r2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d13a      	bne.n	80022d6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e0b2      	b.n	80023ca <HAL_RCC_ClockConfig+0x2de>
 8002264:	2302      	movs	r3, #2
 8002266:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800226a:	fa93 f3a3 	rbit	r3, r3
 800226e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002272:	fab3 f383 	clz	r3, r3
 8002276:	b2db      	uxtb	r3, r3
 8002278:	095b      	lsrs	r3, r3, #5
 800227a:	b2db      	uxtb	r3, r3
 800227c:	f043 0301 	orr.w	r3, r3, #1
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b01      	cmp	r3, #1
 8002284:	d102      	bne.n	800228c <HAL_RCC_ClockConfig+0x1a0>
 8002286:	4b31      	ldr	r3, [pc, #196]	; (800234c <HAL_RCC_ClockConfig+0x260>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	e00d      	b.n	80022a8 <HAL_RCC_ClockConfig+0x1bc>
 800228c:	2302      	movs	r3, #2
 800228e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002292:	fa93 f3a3 	rbit	r3, r3
 8002296:	627b      	str	r3, [r7, #36]	; 0x24
 8002298:	2302      	movs	r3, #2
 800229a:	623b      	str	r3, [r7, #32]
 800229c:	6a3b      	ldr	r3, [r7, #32]
 800229e:	fa93 f3a3 	rbit	r3, r3
 80022a2:	61fb      	str	r3, [r7, #28]
 80022a4:	4b29      	ldr	r3, [pc, #164]	; (800234c <HAL_RCC_ClockConfig+0x260>)
 80022a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a8:	2202      	movs	r2, #2
 80022aa:	61ba      	str	r2, [r7, #24]
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	fa92 f2a2 	rbit	r2, r2
 80022b2:	617a      	str	r2, [r7, #20]
  return result;
 80022b4:	697a      	ldr	r2, [r7, #20]
 80022b6:	fab2 f282 	clz	r2, r2
 80022ba:	b2d2      	uxtb	r2, r2
 80022bc:	f042 0220 	orr.w	r2, r2, #32
 80022c0:	b2d2      	uxtb	r2, r2
 80022c2:	f002 021f 	and.w	r2, r2, #31
 80022c6:	2101      	movs	r1, #1
 80022c8:	fa01 f202 	lsl.w	r2, r1, r2
 80022cc:	4013      	ands	r3, r2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e079      	b.n	80023ca <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022d6:	4b1d      	ldr	r3, [pc, #116]	; (800234c <HAL_RCC_ClockConfig+0x260>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f023 0203 	bic.w	r2, r3, #3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	491a      	ldr	r1, [pc, #104]	; (800234c <HAL_RCC_ClockConfig+0x260>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022e8:	f7fe fc3a 	bl	8000b60 <HAL_GetTick>
 80022ec:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ee:	e00a      	b.n	8002306 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022f0:	f7fe fc36 	bl	8000b60 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80022fe:	4293      	cmp	r3, r2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e061      	b.n	80023ca <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002306:	4b11      	ldr	r3, [pc, #68]	; (800234c <HAL_RCC_ClockConfig+0x260>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f003 020c 	and.w	r2, r3, #12
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	429a      	cmp	r2, r3
 8002316:	d1eb      	bne.n	80022f0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002318:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <HAL_RCC_ClockConfig+0x25c>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0307 	and.w	r3, r3, #7
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	429a      	cmp	r2, r3
 8002324:	d214      	bcs.n	8002350 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002326:	4b08      	ldr	r3, [pc, #32]	; (8002348 <HAL_RCC_ClockConfig+0x25c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f023 0207 	bic.w	r2, r3, #7
 800232e:	4906      	ldr	r1, [pc, #24]	; (8002348 <HAL_RCC_ClockConfig+0x25c>)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	4313      	orrs	r3, r2
 8002334:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002336:	4b04      	ldr	r3, [pc, #16]	; (8002348 <HAL_RCC_ClockConfig+0x25c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	429a      	cmp	r2, r3
 8002342:	d005      	beq.n	8002350 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e040      	b.n	80023ca <HAL_RCC_ClockConfig+0x2de>
 8002348:	40022000 	.word	0x40022000
 800234c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	2b00      	cmp	r3, #0
 800235a:	d008      	beq.n	800236e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800235c:	4b1d      	ldr	r3, [pc, #116]	; (80023d4 <HAL_RCC_ClockConfig+0x2e8>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	491a      	ldr	r1, [pc, #104]	; (80023d4 <HAL_RCC_ClockConfig+0x2e8>)
 800236a:	4313      	orrs	r3, r2
 800236c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0308 	and.w	r3, r3, #8
 8002376:	2b00      	cmp	r3, #0
 8002378:	d009      	beq.n	800238e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800237a:	4b16      	ldr	r3, [pc, #88]	; (80023d4 <HAL_RCC_ClockConfig+0x2e8>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	4912      	ldr	r1, [pc, #72]	; (80023d4 <HAL_RCC_ClockConfig+0x2e8>)
 800238a:	4313      	orrs	r3, r2
 800238c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800238e:	f000 f829 	bl	80023e4 <HAL_RCC_GetSysClockFreq>
 8002392:	4601      	mov	r1, r0
 8002394:	4b0f      	ldr	r3, [pc, #60]	; (80023d4 <HAL_RCC_ClockConfig+0x2e8>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800239c:	22f0      	movs	r2, #240	; 0xf0
 800239e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	fa92 f2a2 	rbit	r2, r2
 80023a6:	60fa      	str	r2, [r7, #12]
  return result;
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	fab2 f282 	clz	r2, r2
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	40d3      	lsrs	r3, r2
 80023b2:	4a09      	ldr	r2, [pc, #36]	; (80023d8 <HAL_RCC_ClockConfig+0x2ec>)
 80023b4:	5cd3      	ldrb	r3, [r2, r3]
 80023b6:	fa21 f303 	lsr.w	r3, r1, r3
 80023ba:	4a08      	ldr	r2, [pc, #32]	; (80023dc <HAL_RCC_ClockConfig+0x2f0>)
 80023bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80023be:	4b08      	ldr	r3, [pc, #32]	; (80023e0 <HAL_RCC_ClockConfig+0x2f4>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7fe fb88 	bl	8000ad8 <HAL_InitTick>
  
  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3778      	adds	r7, #120	; 0x78
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40021000 	.word	0x40021000
 80023d8:	08004be4 	.word	0x08004be4
 80023dc:	20000038 	.word	0x20000038
 80023e0:	2000003c 	.word	0x2000003c

080023e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b08b      	sub	sp, #44	; 0x2c
 80023e8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023ea:	2300      	movs	r3, #0
 80023ec:	61fb      	str	r3, [r7, #28]
 80023ee:	2300      	movs	r3, #0
 80023f0:	61bb      	str	r3, [r7, #24]
 80023f2:	2300      	movs	r3, #0
 80023f4:	627b      	str	r3, [r7, #36]	; 0x24
 80023f6:	2300      	movs	r3, #0
 80023f8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80023fa:	2300      	movs	r3, #0
 80023fc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80023fe:	4b29      	ldr	r3, [pc, #164]	; (80024a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	f003 030c 	and.w	r3, r3, #12
 800240a:	2b04      	cmp	r3, #4
 800240c:	d002      	beq.n	8002414 <HAL_RCC_GetSysClockFreq+0x30>
 800240e:	2b08      	cmp	r3, #8
 8002410:	d003      	beq.n	800241a <HAL_RCC_GetSysClockFreq+0x36>
 8002412:	e03c      	b.n	800248e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002414:	4b24      	ldr	r3, [pc, #144]	; (80024a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002416:	623b      	str	r3, [r7, #32]
      break;
 8002418:	e03c      	b.n	8002494 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002420:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002424:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	fa92 f2a2 	rbit	r2, r2
 800242c:	607a      	str	r2, [r7, #4]
  return result;
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	fab2 f282 	clz	r2, r2
 8002434:	b2d2      	uxtb	r2, r2
 8002436:	40d3      	lsrs	r3, r2
 8002438:	4a1c      	ldr	r2, [pc, #112]	; (80024ac <HAL_RCC_GetSysClockFreq+0xc8>)
 800243a:	5cd3      	ldrb	r3, [r2, r3]
 800243c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800243e:	4b19      	ldr	r3, [pc, #100]	; (80024a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002442:	f003 030f 	and.w	r3, r3, #15
 8002446:	220f      	movs	r2, #15
 8002448:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	fa92 f2a2 	rbit	r2, r2
 8002450:	60fa      	str	r2, [r7, #12]
  return result;
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	fab2 f282 	clz	r2, r2
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	40d3      	lsrs	r3, r2
 800245c:	4a14      	ldr	r2, [pc, #80]	; (80024b0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800245e:	5cd3      	ldrb	r3, [r2, r3]
 8002460:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d008      	beq.n	800247e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800246c:	4a0e      	ldr	r2, [pc, #56]	; (80024a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	fbb2 f2f3 	udiv	r2, r2, r3
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	fb02 f303 	mul.w	r3, r2, r3
 800247a:	627b      	str	r3, [r7, #36]	; 0x24
 800247c:	e004      	b.n	8002488 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	4a0c      	ldr	r2, [pc, #48]	; (80024b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002482:	fb02 f303 	mul.w	r3, r2, r3
 8002486:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	623b      	str	r3, [r7, #32]
      break;
 800248c:	e002      	b.n	8002494 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800248e:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002490:	623b      	str	r3, [r7, #32]
      break;
 8002492:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002494:	6a3b      	ldr	r3, [r7, #32]
}
 8002496:	4618      	mov	r0, r3
 8002498:	372c      	adds	r7, #44	; 0x2c
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	40021000 	.word	0x40021000
 80024a8:	007a1200 	.word	0x007a1200
 80024ac:	08004bfc 	.word	0x08004bfc
 80024b0:	08004c0c 	.word	0x08004c0c
 80024b4:	003d0900 	.word	0x003d0900

080024b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024bc:	4b03      	ldr	r3, [pc, #12]	; (80024cc <HAL_RCC_GetHCLKFreq+0x14>)
 80024be:	681b      	ldr	r3, [r3, #0]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	20000038 	.word	0x20000038

080024d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80024d6:	f7ff ffef 	bl	80024b8 <HAL_RCC_GetHCLKFreq>
 80024da:	4601      	mov	r1, r0
 80024dc:	4b0b      	ldr	r3, [pc, #44]	; (800250c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80024e4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80024e8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	fa92 f2a2 	rbit	r2, r2
 80024f0:	603a      	str	r2, [r7, #0]
  return result;
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	fab2 f282 	clz	r2, r2
 80024f8:	b2d2      	uxtb	r2, r2
 80024fa:	40d3      	lsrs	r3, r2
 80024fc:	4a04      	ldr	r2, [pc, #16]	; (8002510 <HAL_RCC_GetPCLK1Freq+0x40>)
 80024fe:	5cd3      	ldrb	r3, [r2, r3]
 8002500:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002504:	4618      	mov	r0, r3
 8002506:	3708      	adds	r7, #8
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40021000 	.word	0x40021000
 8002510:	08004bf4 	.word	0x08004bf4

08002514 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800251a:	f7ff ffcd 	bl	80024b8 <HAL_RCC_GetHCLKFreq>
 800251e:	4601      	mov	r1, r0
 8002520:	4b0b      	ldr	r3, [pc, #44]	; (8002550 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002528:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800252c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	fa92 f2a2 	rbit	r2, r2
 8002534:	603a      	str	r2, [r7, #0]
  return result;
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	fab2 f282 	clz	r2, r2
 800253c:	b2d2      	uxtb	r2, r2
 800253e:	40d3      	lsrs	r3, r2
 8002540:	4a04      	ldr	r2, [pc, #16]	; (8002554 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002542:	5cd3      	ldrb	r3, [r2, r3]
 8002544:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002548:	4618      	mov	r0, r3
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40021000 	.word	0x40021000
 8002554:	08004bf4 	.word	0x08004bf4

08002558 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b092      	sub	sp, #72	; 0x48
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002560:	2300      	movs	r3, #0
 8002562:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002564:	2300      	movs	r3, #0
 8002566:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002568:	2300      	movs	r3, #0
 800256a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002576:	2b00      	cmp	r3, #0
 8002578:	f000 80cd 	beq.w	8002716 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800257c:	4b86      	ldr	r3, [pc, #536]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800257e:	69db      	ldr	r3, [r3, #28]
 8002580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10e      	bne.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002588:	4b83      	ldr	r3, [pc, #524]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800258a:	69db      	ldr	r3, [r3, #28]
 800258c:	4a82      	ldr	r2, [pc, #520]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800258e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002592:	61d3      	str	r3, [r2, #28]
 8002594:	4b80      	ldr	r3, [pc, #512]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002596:	69db      	ldr	r3, [r3, #28]
 8002598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259c:	60bb      	str	r3, [r7, #8]
 800259e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025a0:	2301      	movs	r3, #1
 80025a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a6:	4b7d      	ldr	r3, [pc, #500]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d118      	bne.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025b2:	4b7a      	ldr	r3, [pc, #488]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a79      	ldr	r2, [pc, #484]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80025b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025bc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025be:	f7fe facf 	bl	8000b60 <HAL_GetTick>
 80025c2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c4:	e008      	b.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025c6:	f7fe facb 	bl	8000b60 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b64      	cmp	r3, #100	; 0x64
 80025d2:	d901      	bls.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e0db      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d8:	4b70      	ldr	r3, [pc, #448]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0f0      	beq.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025e4:	4b6c      	ldr	r3, [pc, #432]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d07d      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025fe:	429a      	cmp	r2, r3
 8002600:	d076      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002602:	4b65      	ldr	r3, [pc, #404]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800260a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800260c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002610:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002614:	fa93 f3a3 	rbit	r3, r3
 8002618:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800261a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800261c:	fab3 f383 	clz	r3, r3
 8002620:	b2db      	uxtb	r3, r3
 8002622:	461a      	mov	r2, r3
 8002624:	4b5e      	ldr	r3, [pc, #376]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002626:	4413      	add	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	461a      	mov	r2, r3
 800262c:	2301      	movs	r3, #1
 800262e:	6013      	str	r3, [r2, #0]
 8002630:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002634:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002638:	fa93 f3a3 	rbit	r3, r3
 800263c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800263e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002640:	fab3 f383 	clz	r3, r3
 8002644:	b2db      	uxtb	r3, r3
 8002646:	461a      	mov	r2, r3
 8002648:	4b55      	ldr	r3, [pc, #340]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800264a:	4413      	add	r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	461a      	mov	r2, r3
 8002650:	2300      	movs	r3, #0
 8002652:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002654:	4a50      	ldr	r2, [pc, #320]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002658:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800265a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	2b00      	cmp	r3, #0
 8002662:	d045      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002664:	f7fe fa7c 	bl	8000b60 <HAL_GetTick>
 8002668:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800266a:	e00a      	b.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800266c:	f7fe fa78 	bl	8000b60 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	f241 3288 	movw	r2, #5000	; 0x1388
 800267a:	4293      	cmp	r3, r2
 800267c:	d901      	bls.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e086      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002682:	2302      	movs	r3, #2
 8002684:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002688:	fa93 f3a3 	rbit	r3, r3
 800268c:	627b      	str	r3, [r7, #36]	; 0x24
 800268e:	2302      	movs	r3, #2
 8002690:	623b      	str	r3, [r7, #32]
 8002692:	6a3b      	ldr	r3, [r7, #32]
 8002694:	fa93 f3a3 	rbit	r3, r3
 8002698:	61fb      	str	r3, [r7, #28]
  return result;
 800269a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800269c:	fab3 f383 	clz	r3, r3
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	095b      	lsrs	r3, r3, #5
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	f043 0302 	orr.w	r3, r3, #2
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d102      	bne.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80026b0:	4b39      	ldr	r3, [pc, #228]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	e007      	b.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80026b6:	2302      	movs	r3, #2
 80026b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	fa93 f3a3 	rbit	r3, r3
 80026c0:	617b      	str	r3, [r7, #20]
 80026c2:	4b35      	ldr	r3, [pc, #212]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80026c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c6:	2202      	movs	r2, #2
 80026c8:	613a      	str	r2, [r7, #16]
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	fa92 f2a2 	rbit	r2, r2
 80026d0:	60fa      	str	r2, [r7, #12]
  return result;
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	fab2 f282 	clz	r2, r2
 80026d8:	b2d2      	uxtb	r2, r2
 80026da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	f002 021f 	and.w	r2, r2, #31
 80026e4:	2101      	movs	r1, #1
 80026e6:	fa01 f202 	lsl.w	r2, r1, r2
 80026ea:	4013      	ands	r3, r2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d0bd      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80026f0:	4b29      	ldr	r3, [pc, #164]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	4926      	ldr	r1, [pc, #152]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002702:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002706:	2b01      	cmp	r3, #1
 8002708:	d105      	bne.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800270a:	4b23      	ldr	r3, [pc, #140]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	4a22      	ldr	r2, [pc, #136]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002710:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002714:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b00      	cmp	r3, #0
 8002720:	d008      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002722:	4b1d      	ldr	r3, [pc, #116]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	f023 0203 	bic.w	r2, r3, #3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	491a      	ldr	r1, [pc, #104]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002730:	4313      	orrs	r3, r2
 8002732:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0320 	and.w	r3, r3, #32
 800273c:	2b00      	cmp	r3, #0
 800273e:	d008      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002740:	4b15      	ldr	r3, [pc, #84]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002744:	f023 0210 	bic.w	r2, r3, #16
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	4912      	ldr	r1, [pc, #72]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800274e:	4313      	orrs	r3, r2
 8002750:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800275a:	2b00      	cmp	r3, #0
 800275c:	d008      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800275e:	4b0e      	ldr	r3, [pc, #56]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002762:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	490b      	ldr	r1, [pc, #44]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800276c:	4313      	orrs	r3, r2
 800276e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d008      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800277c:	4b06      	ldr	r3, [pc, #24]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800277e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002780:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	695b      	ldr	r3, [r3, #20]
 8002788:	4903      	ldr	r1, [pc, #12]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800278a:	4313      	orrs	r3, r2
 800278c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3748      	adds	r7, #72	; 0x48
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40021000 	.word	0x40021000
 800279c:	40007000 	.word	0x40007000
 80027a0:	10908100 	.word	0x10908100

080027a4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e073      	b.n	80028a2 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	7f5b      	ldrb	r3, [r3, #29]
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d105      	bne.n	80027d0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f7fd ffda 	bl	8000784 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2202      	movs	r2, #2
 80027d4:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	f003 0310 	and.w	r3, r3, #16
 80027e0:	2b10      	cmp	r3, #16
 80027e2:	d055      	beq.n	8002890 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	22ca      	movs	r2, #202	; 0xca
 80027ea:	625a      	str	r2, [r3, #36]	; 0x24
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2253      	movs	r2, #83	; 0x53
 80027f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f000 fa49 	bl	8002c8c <RTC_EnterInitMode>
 80027fa:	4603      	mov	r3, r0
 80027fc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80027fe:	7bfb      	ldrb	r3, [r7, #15]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d12c      	bne.n	800285e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	6812      	ldr	r2, [r2, #0]
 800280e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002812:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002816:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6899      	ldr	r1, [r3, #8]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	431a      	orrs	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	431a      	orrs	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	430a      	orrs	r2, r1
 8002834:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	68d2      	ldr	r2, [r2, #12]
 800283e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6919      	ldr	r1, [r3, #16]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	041a      	lsls	r2, r3, #16
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	430a      	orrs	r2, r1
 8002852:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f000 fa50 	bl	8002cfa <RTC_ExitInitMode>
 800285a:	4603      	mov	r3, r0
 800285c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800285e:	7bfb      	ldrb	r3, [r7, #15]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d110      	bne.n	8002886 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002872:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	699a      	ldr	r2, [r3, #24]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	430a      	orrs	r2, r1
 8002884:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	22ff      	movs	r2, #255	; 0xff
 800288c:	625a      	str	r2, [r3, #36]	; 0x24
 800288e:	e001      	b.n	8002894 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002890:	2300      	movs	r3, #0
 8002892:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002894:	7bfb      	ldrb	r3, [r7, #15]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d102      	bne.n	80028a0 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80028a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80028aa:	b590      	push	{r4, r7, lr}
 80028ac:	b087      	sub	sp, #28
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	60f8      	str	r0, [r7, #12]
 80028b2:	60b9      	str	r1, [r7, #8]
 80028b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80028b6:	2300      	movs	r3, #0
 80028b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	7f1b      	ldrb	r3, [r3, #28]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d101      	bne.n	80028c6 <HAL_RTC_SetTime+0x1c>
 80028c2:	2302      	movs	r3, #2
 80028c4:	e087      	b.n	80029d6 <HAL_RTC_SetTime+0x12c>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2201      	movs	r2, #1
 80028ca:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2202      	movs	r2, #2
 80028d0:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d126      	bne.n	8002926 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d102      	bne.n	80028ec <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	2200      	movs	r2, #0
 80028ea:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f000 fa27 	bl	8002d44 <RTC_ByteToBcd2>
 80028f6:	4603      	mov	r3, r0
 80028f8:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	785b      	ldrb	r3, [r3, #1]
 80028fe:	4618      	mov	r0, r3
 8002900:	f000 fa20 	bl	8002d44 <RTC_ByteToBcd2>
 8002904:	4603      	mov	r3, r0
 8002906:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002908:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	789b      	ldrb	r3, [r3, #2]
 800290e:	4618      	mov	r0, r3
 8002910:	f000 fa18 	bl	8002d44 <RTC_ByteToBcd2>
 8002914:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002916:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	78db      	ldrb	r3, [r3, #3]
 800291e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002920:	4313      	orrs	r3, r2
 8002922:	617b      	str	r3, [r7, #20]
 8002924:	e018      	b.n	8002958 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002930:	2b00      	cmp	r3, #0
 8002932:	d102      	bne.n	800293a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	2200      	movs	r2, #0
 8002938:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	785b      	ldrb	r3, [r3, #1]
 8002944:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002946:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002948:	68ba      	ldr	r2, [r7, #8]
 800294a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800294c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	78db      	ldrb	r3, [r3, #3]
 8002952:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002954:	4313      	orrs	r3, r2
 8002956:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	22ca      	movs	r2, #202	; 0xca
 800295e:	625a      	str	r2, [r3, #36]	; 0x24
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2253      	movs	r2, #83	; 0x53
 8002966:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f000 f98f 	bl	8002c8c <RTC_EnterInitMode>
 800296e:	4603      	mov	r3, r0
 8002970:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002972:	7cfb      	ldrb	r3, [r7, #19]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d120      	bne.n	80029ba <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002982:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002986:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689a      	ldr	r2, [r3, #8]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002996:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6899      	ldr	r1, [r3, #8]
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	68da      	ldr	r2, [r3, #12]
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	431a      	orrs	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f000 f9a2 	bl	8002cfa <RTC_ExitInitMode>
 80029b6:	4603      	mov	r3, r0
 80029b8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80029ba:	7cfb      	ldrb	r3, [r7, #19]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d102      	bne.n	80029c6 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2201      	movs	r2, #1
 80029c4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	22ff      	movs	r2, #255	; 0xff
 80029cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	771a      	strb	r2, [r3, #28]

  return status;
 80029d4:	7cfb      	ldrb	r3, [r7, #19]
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	371c      	adds	r7, #28
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd90      	pop	{r4, r7, pc}

080029de <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b086      	sub	sp, #24
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	60f8      	str	r0, [r7, #12]
 80029e6:	60b9      	str	r1, [r7, #8]
 80029e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80029ea:	2300      	movs	r3, #0
 80029ec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002a10:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002a14:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	0c1b      	lsrs	r3, r3, #16
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	0a1b      	lsrs	r3, r3, #8
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a30:	b2da      	uxtb	r2, r3
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a3e:	b2da      	uxtb	r2, r3
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	0d9b      	lsrs	r3, r3, #22
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	b2da      	uxtb	r2, r3
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d11a      	bne.n	8002a90 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f000 f98e 	bl	8002d80 <RTC_Bcd2ToByte>
 8002a64:	4603      	mov	r3, r0
 8002a66:	461a      	mov	r2, r3
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	785b      	ldrb	r3, [r3, #1]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f000 f985 	bl	8002d80 <RTC_Bcd2ToByte>
 8002a76:	4603      	mov	r3, r0
 8002a78:	461a      	mov	r2, r3
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	789b      	ldrb	r3, [r3, #2]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 f97c 	bl	8002d80 <RTC_Bcd2ToByte>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3718      	adds	r7, #24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002a9a:	b590      	push	{r4, r7, lr}
 8002a9c:	b087      	sub	sp, #28
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	60f8      	str	r0, [r7, #12]
 8002aa2:	60b9      	str	r1, [r7, #8]
 8002aa4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	7f1b      	ldrb	r3, [r3, #28]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d101      	bne.n	8002ab6 <HAL_RTC_SetDate+0x1c>
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	e071      	b.n	8002b9a <HAL_RTC_SetDate+0x100>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2202      	movs	r2, #2
 8002ac0:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10e      	bne.n	8002ae6 <HAL_RTC_SetDate+0x4c>
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	785b      	ldrb	r3, [r3, #1]
 8002acc:	f003 0310 	and.w	r3, r3, #16
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d008      	beq.n	8002ae6 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	785b      	ldrb	r3, [r3, #1]
 8002ad8:	f023 0310 	bic.w	r3, r3, #16
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	330a      	adds	r3, #10
 8002ae0:	b2da      	uxtb	r2, r3
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d11c      	bne.n	8002b26 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	78db      	ldrb	r3, [r3, #3]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f000 f927 	bl	8002d44 <RTC_ByteToBcd2>
 8002af6:	4603      	mov	r3, r0
 8002af8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	785b      	ldrb	r3, [r3, #1]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 f920 	bl	8002d44 <RTC_ByteToBcd2>
 8002b04:	4603      	mov	r3, r0
 8002b06:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002b08:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	789b      	ldrb	r3, [r3, #2]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f000 f918 	bl	8002d44 <RTC_ByteToBcd2>
 8002b14:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002b16:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002b20:	4313      	orrs	r3, r2
 8002b22:	617b      	str	r3, [r7, #20]
 8002b24:	e00e      	b.n	8002b44 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	78db      	ldrb	r3, [r3, #3]
 8002b2a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	785b      	ldrb	r3, [r3, #1]
 8002b30:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002b32:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002b34:	68ba      	ldr	r2, [r7, #8]
 8002b36:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002b38:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002b40:	4313      	orrs	r3, r2
 8002b42:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	22ca      	movs	r2, #202	; 0xca
 8002b4a:	625a      	str	r2, [r3, #36]	; 0x24
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2253      	movs	r2, #83	; 0x53
 8002b52:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f000 f899 	bl	8002c8c <RTC_EnterInitMode>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002b5e:	7cfb      	ldrb	r3, [r7, #19]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d10c      	bne.n	8002b7e <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002b6e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002b72:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f000 f8c0 	bl	8002cfa <RTC_ExitInitMode>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002b7e:	7cfb      	ldrb	r3, [r7, #19]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d102      	bne.n	8002b8a <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2201      	movs	r2, #1
 8002b88:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	22ff      	movs	r2, #255	; 0xff
 8002b90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2200      	movs	r2, #0
 8002b96:	771a      	strb	r2, [r3, #28]

  return status;
 8002b98:	7cfb      	ldrb	r3, [r7, #19]
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	371c      	adds	r7, #28
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd90      	pop	{r4, r7, pc}

08002ba2 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b086      	sub	sp, #24
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	60f8      	str	r0, [r7, #12]
 8002baa:	60b9      	str	r1, [r7, #8]
 8002bac:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002bbc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002bc0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	0c1b      	lsrs	r3, r3, #16
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	0a1b      	lsrs	r3, r3, #8
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	f003 031f 	and.w	r3, r3, #31
 8002bd6:	b2da      	uxtb	r2, r3
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	0b5b      	lsrs	r3, r3, #13
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	f003 0307 	and.w	r3, r3, #7
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d11a      	bne.n	8002c36 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	78db      	ldrb	r3, [r3, #3]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f000 f8bb 	bl	8002d80 <RTC_Bcd2ToByte>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	785b      	ldrb	r3, [r3, #1]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f000 f8b2 	bl	8002d80 <RTC_Bcd2ToByte>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	461a      	mov	r2, r3
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	789b      	ldrb	r3, [r3, #2]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f000 f8a9 	bl	8002d80 <RTC_Bcd2ToByte>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	461a      	mov	r2, r3
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3718      	adds	r7, #24
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a0d      	ldr	r2, [pc, #52]	; (8002c88 <HAL_RTC_WaitForSynchro+0x48>)
 8002c52:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c54:	f7fd ff84 	bl	8000b60 <HAL_GetTick>
 8002c58:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002c5a:	e009      	b.n	8002c70 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002c5c:	f7fd ff80 	bl	8000b60 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c6a:	d901      	bls.n	8002c70 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e007      	b.n	8002c80 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	f003 0320 	and.w	r3, r3, #32
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d0ee      	beq.n	8002c5c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	00017f5f 	.word	0x00017f5f

08002c8c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c94:	2300      	movs	r3, #0
 8002c96:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d122      	bne.n	8002cf0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68da      	ldr	r2, [r3, #12]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002cb8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002cba:	f7fd ff51 	bl	8000b60 <HAL_GetTick>
 8002cbe:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002cc0:	e00c      	b.n	8002cdc <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002cc2:	f7fd ff4d 	bl	8000b60 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cd0:	d904      	bls.n	8002cdc <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2204      	movs	r2, #4
 8002cd6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d102      	bne.n	8002cf0 <RTC_EnterInitMode+0x64>
 8002cea:	7bfb      	ldrb	r3, [r7, #15]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d1e8      	bne.n	8002cc2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b084      	sub	sp, #16
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d02:	2300      	movs	r3, #0
 8002d04:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68da      	ldr	r2, [r3, #12]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d14:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 0320 	and.w	r3, r3, #32
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10a      	bne.n	8002d3a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f7ff ff8b 	bl	8002c40 <HAL_RTC_WaitForSynchro>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d004      	beq.n	8002d3a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2204      	movs	r2, #4
 8002d34:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8002d52:	e005      	b.n	8002d60 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	3301      	adds	r3, #1
 8002d58:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8002d5a:	79fb      	ldrb	r3, [r7, #7]
 8002d5c:	3b0a      	subs	r3, #10
 8002d5e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8002d60:	79fb      	ldrb	r3, [r7, #7]
 8002d62:	2b09      	cmp	r3, #9
 8002d64:	d8f6      	bhi.n	8002d54 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	011b      	lsls	r3, r3, #4
 8002d6c:	b2da      	uxtb	r2, r3
 8002d6e:	79fb      	ldrb	r3, [r7, #7]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	b2db      	uxtb	r3, r3
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3714      	adds	r7, #20
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	4603      	mov	r3, r0
 8002d88:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8002d8e:	79fb      	ldrb	r3, [r7, #7]
 8002d90:	091b      	lsrs	r3, r3, #4
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	461a      	mov	r2, r3
 8002d96:	4613      	mov	r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	4413      	add	r3, r2
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	79fb      	ldrb	r3, [r7, #7]
 8002da6:	f003 030f 	and.w	r3, r3, #15
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	4413      	add	r3, r2
 8002dae:	b2db      	uxtb	r3, r3
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3714      	adds	r7, #20
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e040      	b.n	8002e50 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d106      	bne.n	8002de4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f7fd fcf6 	bl	80007d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2224      	movs	r2, #36	; 0x24
 8002de8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 0201 	bic.w	r2, r2, #1
 8002df8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 f8b6 	bl	8002f6c <UART_SetConfig>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d101      	bne.n	8002e0a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e022      	b.n	8002e50 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d002      	beq.n	8002e18 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f9e0 	bl	80031d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f042 0201 	orr.w	r2, r2, #1
 8002e46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 fa67 	bl	800331c <UART_CheckIdleState>
 8002e4e:	4603      	mov	r3, r0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b08a      	sub	sp, #40	; 0x28
 8002e5c:	af02      	add	r7, sp, #8
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	603b      	str	r3, [r7, #0]
 8002e64:	4613      	mov	r3, r2
 8002e66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e6c:	2b20      	cmp	r3, #32
 8002e6e:	d178      	bne.n	8002f62 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d002      	beq.n	8002e7c <HAL_UART_Transmit+0x24>
 8002e76:	88fb      	ldrh	r3, [r7, #6]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e071      	b.n	8002f64 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2221      	movs	r2, #33	; 0x21
 8002e8c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e8e:	f7fd fe67 	bl	8000b60 <HAL_GetTick>
 8002e92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	88fa      	ldrh	r2, [r7, #6]
 8002e98:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	88fa      	ldrh	r2, [r7, #6]
 8002ea0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eac:	d108      	bne.n	8002ec0 <HAL_UART_Transmit+0x68>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d104      	bne.n	8002ec0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	61bb      	str	r3, [r7, #24]
 8002ebe:	e003      	b.n	8002ec8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ec8:	e030      	b.n	8002f2c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	2180      	movs	r1, #128	; 0x80
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f000 fac9 	bl	800346c <UART_WaitOnFlagUntilTimeout>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d004      	beq.n	8002eea <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e03c      	b.n	8002f64 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10b      	bne.n	8002f08 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	881a      	ldrh	r2, [r3, #0]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002efc:	b292      	uxth	r2, r2
 8002efe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	3302      	adds	r3, #2
 8002f04:	61bb      	str	r3, [r7, #24]
 8002f06:	e008      	b.n	8002f1a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	781a      	ldrb	r2, [r3, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	b292      	uxth	r2, r2
 8002f12:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	3301      	adds	r3, #1
 8002f18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	3b01      	subs	r3, #1
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1c8      	bne.n	8002eca <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	9300      	str	r3, [sp, #0]
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	2140      	movs	r1, #64	; 0x40
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f000 fa92 	bl	800346c <UART_WaitOnFlagUntilTimeout>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d004      	beq.n	8002f58 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2220      	movs	r2, #32
 8002f52:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e005      	b.n	8002f64 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	e000      	b.n	8002f64 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002f62:	2302      	movs	r3, #2
  }
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3720      	adds	r7, #32
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b088      	sub	sp, #32
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f74:	2300      	movs	r3, #0
 8002f76:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	431a      	orrs	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	431a      	orrs	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	69db      	ldr	r3, [r3, #28]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	4b8a      	ldr	r3, [pc, #552]	; (80031c0 <UART_SetConfig+0x254>)
 8002f98:	4013      	ands	r3, r2
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	6812      	ldr	r2, [r2, #0]
 8002f9e:	6979      	ldr	r1, [r7, #20]
 8002fa0:	430b      	orrs	r3, r1
 8002fa2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68da      	ldr	r2, [r3, #12]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	697a      	ldr	r2, [r7, #20]
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a78      	ldr	r2, [pc, #480]	; (80031c4 <UART_SetConfig+0x258>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d120      	bne.n	800302a <UART_SetConfig+0xbe>
 8002fe8:	4b77      	ldr	r3, [pc, #476]	; (80031c8 <UART_SetConfig+0x25c>)
 8002fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fec:	f003 0303 	and.w	r3, r3, #3
 8002ff0:	2b03      	cmp	r3, #3
 8002ff2:	d817      	bhi.n	8003024 <UART_SetConfig+0xb8>
 8002ff4:	a201      	add	r2, pc, #4	; (adr r2, 8002ffc <UART_SetConfig+0x90>)
 8002ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ffa:	bf00      	nop
 8002ffc:	0800300d 	.word	0x0800300d
 8003000:	08003019 	.word	0x08003019
 8003004:	0800301f 	.word	0x0800301f
 8003008:	08003013 	.word	0x08003013
 800300c:	2300      	movs	r3, #0
 800300e:	77fb      	strb	r3, [r7, #31]
 8003010:	e01d      	b.n	800304e <UART_SetConfig+0xe2>
 8003012:	2302      	movs	r3, #2
 8003014:	77fb      	strb	r3, [r7, #31]
 8003016:	e01a      	b.n	800304e <UART_SetConfig+0xe2>
 8003018:	2304      	movs	r3, #4
 800301a:	77fb      	strb	r3, [r7, #31]
 800301c:	e017      	b.n	800304e <UART_SetConfig+0xe2>
 800301e:	2308      	movs	r3, #8
 8003020:	77fb      	strb	r3, [r7, #31]
 8003022:	e014      	b.n	800304e <UART_SetConfig+0xe2>
 8003024:	2310      	movs	r3, #16
 8003026:	77fb      	strb	r3, [r7, #31]
 8003028:	e011      	b.n	800304e <UART_SetConfig+0xe2>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a67      	ldr	r2, [pc, #412]	; (80031cc <UART_SetConfig+0x260>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d102      	bne.n	800303a <UART_SetConfig+0xce>
 8003034:	2300      	movs	r3, #0
 8003036:	77fb      	strb	r3, [r7, #31]
 8003038:	e009      	b.n	800304e <UART_SetConfig+0xe2>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a64      	ldr	r2, [pc, #400]	; (80031d0 <UART_SetConfig+0x264>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d102      	bne.n	800304a <UART_SetConfig+0xde>
 8003044:	2300      	movs	r3, #0
 8003046:	77fb      	strb	r3, [r7, #31]
 8003048:	e001      	b.n	800304e <UART_SetConfig+0xe2>
 800304a:	2310      	movs	r3, #16
 800304c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003056:	d15a      	bne.n	800310e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003058:	7ffb      	ldrb	r3, [r7, #31]
 800305a:	2b08      	cmp	r3, #8
 800305c:	d827      	bhi.n	80030ae <UART_SetConfig+0x142>
 800305e:	a201      	add	r2, pc, #4	; (adr r2, 8003064 <UART_SetConfig+0xf8>)
 8003060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003064:	08003089 	.word	0x08003089
 8003068:	08003091 	.word	0x08003091
 800306c:	08003099 	.word	0x08003099
 8003070:	080030af 	.word	0x080030af
 8003074:	0800309f 	.word	0x0800309f
 8003078:	080030af 	.word	0x080030af
 800307c:	080030af 	.word	0x080030af
 8003080:	080030af 	.word	0x080030af
 8003084:	080030a7 	.word	0x080030a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003088:	f7ff fa22 	bl	80024d0 <HAL_RCC_GetPCLK1Freq>
 800308c:	61b8      	str	r0, [r7, #24]
        break;
 800308e:	e013      	b.n	80030b8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003090:	f7ff fa40 	bl	8002514 <HAL_RCC_GetPCLK2Freq>
 8003094:	61b8      	str	r0, [r7, #24]
        break;
 8003096:	e00f      	b.n	80030b8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003098:	4b4e      	ldr	r3, [pc, #312]	; (80031d4 <UART_SetConfig+0x268>)
 800309a:	61bb      	str	r3, [r7, #24]
        break;
 800309c:	e00c      	b.n	80030b8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800309e:	f7ff f9a1 	bl	80023e4 <HAL_RCC_GetSysClockFreq>
 80030a2:	61b8      	str	r0, [r7, #24]
        break;
 80030a4:	e008      	b.n	80030b8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030aa:	61bb      	str	r3, [r7, #24]
        break;
 80030ac:	e004      	b.n	80030b8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80030ae:	2300      	movs	r3, #0
 80030b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	77bb      	strb	r3, [r7, #30]
        break;
 80030b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d074      	beq.n	80031a8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	005a      	lsls	r2, r3, #1
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	085b      	lsrs	r3, r3, #1
 80030c8:	441a      	add	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	2b0f      	cmp	r3, #15
 80030d8:	d916      	bls.n	8003108 <UART_SetConfig+0x19c>
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030e0:	d212      	bcs.n	8003108 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	f023 030f 	bic.w	r3, r3, #15
 80030ea:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	085b      	lsrs	r3, r3, #1
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	89fb      	ldrh	r3, [r7, #14]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	89fa      	ldrh	r2, [r7, #14]
 8003104:	60da      	str	r2, [r3, #12]
 8003106:	e04f      	b.n	80031a8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	77bb      	strb	r3, [r7, #30]
 800310c:	e04c      	b.n	80031a8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800310e:	7ffb      	ldrb	r3, [r7, #31]
 8003110:	2b08      	cmp	r3, #8
 8003112:	d828      	bhi.n	8003166 <UART_SetConfig+0x1fa>
 8003114:	a201      	add	r2, pc, #4	; (adr r2, 800311c <UART_SetConfig+0x1b0>)
 8003116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311a:	bf00      	nop
 800311c:	08003141 	.word	0x08003141
 8003120:	08003149 	.word	0x08003149
 8003124:	08003151 	.word	0x08003151
 8003128:	08003167 	.word	0x08003167
 800312c:	08003157 	.word	0x08003157
 8003130:	08003167 	.word	0x08003167
 8003134:	08003167 	.word	0x08003167
 8003138:	08003167 	.word	0x08003167
 800313c:	0800315f 	.word	0x0800315f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003140:	f7ff f9c6 	bl	80024d0 <HAL_RCC_GetPCLK1Freq>
 8003144:	61b8      	str	r0, [r7, #24]
        break;
 8003146:	e013      	b.n	8003170 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003148:	f7ff f9e4 	bl	8002514 <HAL_RCC_GetPCLK2Freq>
 800314c:	61b8      	str	r0, [r7, #24]
        break;
 800314e:	e00f      	b.n	8003170 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003150:	4b20      	ldr	r3, [pc, #128]	; (80031d4 <UART_SetConfig+0x268>)
 8003152:	61bb      	str	r3, [r7, #24]
        break;
 8003154:	e00c      	b.n	8003170 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003156:	f7ff f945 	bl	80023e4 <HAL_RCC_GetSysClockFreq>
 800315a:	61b8      	str	r0, [r7, #24]
        break;
 800315c:	e008      	b.n	8003170 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800315e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003162:	61bb      	str	r3, [r7, #24]
        break;
 8003164:	e004      	b.n	8003170 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003166:	2300      	movs	r3, #0
 8003168:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	77bb      	strb	r3, [r7, #30]
        break;
 800316e:	bf00      	nop
    }

    if (pclk != 0U)
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d018      	beq.n	80031a8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	085a      	lsrs	r2, r3, #1
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	441a      	add	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	fbb2 f3f3 	udiv	r3, r2, r3
 8003188:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	2b0f      	cmp	r3, #15
 800318e:	d909      	bls.n	80031a4 <UART_SetConfig+0x238>
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003196:	d205      	bcs.n	80031a4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	b29a      	uxth	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	60da      	str	r2, [r3, #12]
 80031a2:	e001      	b.n	80031a8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80031b4:	7fbb      	ldrb	r3, [r7, #30]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3720      	adds	r7, #32
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	efff69f3 	.word	0xefff69f3
 80031c4:	40013800 	.word	0x40013800
 80031c8:	40021000 	.word	0x40021000
 80031cc:	40004400 	.word	0x40004400
 80031d0:	40004800 	.word	0x40004800
 80031d4:	007a1200 	.word	0x007a1200

080031d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00a      	beq.n	8003202 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	430a      	orrs	r2, r1
 8003200:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00a      	beq.n	8003224 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	430a      	orrs	r2, r1
 8003222:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00a      	beq.n	8003246 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324a:	f003 0308 	and.w	r3, r3, #8
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00a      	beq.n	8003268 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326c:	f003 0310 	and.w	r3, r3, #16
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00a      	beq.n	800328a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	f003 0320 	and.w	r3, r3, #32
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00a      	beq.n	80032ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d01a      	beq.n	80032ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032d6:	d10a      	bne.n	80032ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00a      	beq.n	8003310 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	430a      	orrs	r2, r1
 800330e:	605a      	str	r2, [r3, #4]
  }
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b098      	sub	sp, #96	; 0x60
 8003320:	af02      	add	r7, sp, #8
 8003322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800332c:	f7fd fc18 	bl	8000b60 <HAL_GetTick>
 8003330:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0308 	and.w	r3, r3, #8
 800333c:	2b08      	cmp	r3, #8
 800333e:	d12e      	bne.n	800339e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003340:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003348:	2200      	movs	r2, #0
 800334a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f88c 	bl	800346c <UART_WaitOnFlagUntilTimeout>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d021      	beq.n	800339e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003362:	e853 3f00 	ldrex	r3, [r3]
 8003366:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800336a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800336e:	653b      	str	r3, [r7, #80]	; 0x50
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	461a      	mov	r2, r3
 8003376:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003378:	647b      	str	r3, [r7, #68]	; 0x44
 800337a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800337c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800337e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003380:	e841 2300 	strex	r3, r2, [r1]
 8003384:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1e6      	bne.n	800335a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2220      	movs	r2, #32
 8003390:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e062      	b.n	8003464 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b04      	cmp	r3, #4
 80033aa:	d149      	bne.n	8003440 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033b4:	2200      	movs	r2, #0
 80033b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f856 	bl	800346c <UART_WaitOnFlagUntilTimeout>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d03c      	beq.n	8003440 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ce:	e853 3f00 	ldrex	r3, [r3]
 80033d2:	623b      	str	r3, [r7, #32]
   return(result);
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	461a      	mov	r2, r3
 80033e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033e4:	633b      	str	r3, [r7, #48]	; 0x30
 80033e6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033ec:	e841 2300 	strex	r3, r2, [r1]
 80033f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80033f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1e6      	bne.n	80033c6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	3308      	adds	r3, #8
 80033fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	e853 3f00 	ldrex	r3, [r3]
 8003406:	60fb      	str	r3, [r7, #12]
   return(result);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f023 0301 	bic.w	r3, r3, #1
 800340e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	3308      	adds	r3, #8
 8003416:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003418:	61fa      	str	r2, [r7, #28]
 800341a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800341c:	69b9      	ldr	r1, [r7, #24]
 800341e:	69fa      	ldr	r2, [r7, #28]
 8003420:	e841 2300 	strex	r3, r2, [r1]
 8003424:	617b      	str	r3, [r7, #20]
   return(result);
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1e5      	bne.n	80033f8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2220      	movs	r2, #32
 8003430:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e011      	b.n	8003464 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2220      	movs	r2, #32
 8003444:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2220      	movs	r2, #32
 800344a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3758      	adds	r7, #88	; 0x58
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	603b      	str	r3, [r7, #0]
 8003478:	4613      	mov	r3, r2
 800347a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800347c:	e049      	b.n	8003512 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003484:	d045      	beq.n	8003512 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003486:	f7fd fb6b 	bl	8000b60 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	429a      	cmp	r2, r3
 8003494:	d302      	bcc.n	800349c <UART_WaitOnFlagUntilTimeout+0x30>
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d101      	bne.n	80034a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e048      	b.n	8003532 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0304 	and.w	r3, r3, #4
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d031      	beq.n	8003512 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	69db      	ldr	r3, [r3, #28]
 80034b4:	f003 0308 	and.w	r3, r3, #8
 80034b8:	2b08      	cmp	r3, #8
 80034ba:	d110      	bne.n	80034de <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2208      	movs	r2, #8
 80034c2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f000 f838 	bl	800353a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2208      	movs	r2, #8
 80034ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e029      	b.n	8003532 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	69db      	ldr	r3, [r3, #28]
 80034e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034ec:	d111      	bne.n	8003512 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	f000 f81e 	bl	800353a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2220      	movs	r2, #32
 8003502:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e00f      	b.n	8003532 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	69da      	ldr	r2, [r3, #28]
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	4013      	ands	r3, r2
 800351c:	68ba      	ldr	r2, [r7, #8]
 800351e:	429a      	cmp	r2, r3
 8003520:	bf0c      	ite	eq
 8003522:	2301      	moveq	r3, #1
 8003524:	2300      	movne	r3, #0
 8003526:	b2db      	uxtb	r3, r3
 8003528:	461a      	mov	r2, r3
 800352a:	79fb      	ldrb	r3, [r7, #7]
 800352c:	429a      	cmp	r2, r3
 800352e:	d0a6      	beq.n	800347e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800353a:	b480      	push	{r7}
 800353c:	b095      	sub	sp, #84	; 0x54
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800354a:	e853 3f00 	ldrex	r3, [r3]
 800354e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003552:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003556:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	461a      	mov	r2, r3
 800355e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003560:	643b      	str	r3, [r7, #64]	; 0x40
 8003562:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003564:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003566:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003568:	e841 2300 	strex	r3, r2, [r1]
 800356c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800356e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1e6      	bne.n	8003542 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	3308      	adds	r3, #8
 800357a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800357c:	6a3b      	ldr	r3, [r7, #32]
 800357e:	e853 3f00 	ldrex	r3, [r3]
 8003582:	61fb      	str	r3, [r7, #28]
   return(result);
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	f023 0301 	bic.w	r3, r3, #1
 800358a:	64bb      	str	r3, [r7, #72]	; 0x48
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	3308      	adds	r3, #8
 8003592:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003594:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003596:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003598:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800359a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800359c:	e841 2300 	strex	r3, r2, [r1]
 80035a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1e5      	bne.n	8003574 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d118      	bne.n	80035e2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	e853 3f00 	ldrex	r3, [r3]
 80035bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	f023 0310 	bic.w	r3, r3, #16
 80035c4:	647b      	str	r3, [r7, #68]	; 0x44
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	461a      	mov	r2, r3
 80035cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035ce:	61bb      	str	r3, [r7, #24]
 80035d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d2:	6979      	ldr	r1, [r7, #20]
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	e841 2300 	strex	r3, r2, [r1]
 80035da:	613b      	str	r3, [r7, #16]
   return(result);
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1e6      	bne.n	80035b0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2220      	movs	r2, #32
 80035e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80035f6:	bf00      	nop
 80035f8:	3754      	adds	r7, #84	; 0x54
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <atoi>:
 8003602:	220a      	movs	r2, #10
 8003604:	2100      	movs	r1, #0
 8003606:	f000 b883 	b.w	8003710 <strtol>
	...

0800360c <_strtol_l.constprop.0>:
 800360c:	2b01      	cmp	r3, #1
 800360e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003612:	d001      	beq.n	8003618 <_strtol_l.constprop.0+0xc>
 8003614:	2b24      	cmp	r3, #36	; 0x24
 8003616:	d906      	bls.n	8003626 <_strtol_l.constprop.0+0x1a>
 8003618:	f000 fa7a 	bl	8003b10 <__errno>
 800361c:	2316      	movs	r3, #22
 800361e:	6003      	str	r3, [r0, #0]
 8003620:	2000      	movs	r0, #0
 8003622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003626:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800370c <_strtol_l.constprop.0+0x100>
 800362a:	460d      	mov	r5, r1
 800362c:	462e      	mov	r6, r5
 800362e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003632:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8003636:	f017 0708 	ands.w	r7, r7, #8
 800363a:	d1f7      	bne.n	800362c <_strtol_l.constprop.0+0x20>
 800363c:	2c2d      	cmp	r4, #45	; 0x2d
 800363e:	d132      	bne.n	80036a6 <_strtol_l.constprop.0+0x9a>
 8003640:	782c      	ldrb	r4, [r5, #0]
 8003642:	2701      	movs	r7, #1
 8003644:	1cb5      	adds	r5, r6, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d05b      	beq.n	8003702 <_strtol_l.constprop.0+0xf6>
 800364a:	2b10      	cmp	r3, #16
 800364c:	d109      	bne.n	8003662 <_strtol_l.constprop.0+0x56>
 800364e:	2c30      	cmp	r4, #48	; 0x30
 8003650:	d107      	bne.n	8003662 <_strtol_l.constprop.0+0x56>
 8003652:	782c      	ldrb	r4, [r5, #0]
 8003654:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003658:	2c58      	cmp	r4, #88	; 0x58
 800365a:	d14d      	bne.n	80036f8 <_strtol_l.constprop.0+0xec>
 800365c:	786c      	ldrb	r4, [r5, #1]
 800365e:	2310      	movs	r3, #16
 8003660:	3502      	adds	r5, #2
 8003662:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8003666:	f108 38ff 	add.w	r8, r8, #4294967295
 800366a:	f04f 0e00 	mov.w	lr, #0
 800366e:	fbb8 f9f3 	udiv	r9, r8, r3
 8003672:	4676      	mov	r6, lr
 8003674:	fb03 8a19 	mls	sl, r3, r9, r8
 8003678:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800367c:	f1bc 0f09 	cmp.w	ip, #9
 8003680:	d816      	bhi.n	80036b0 <_strtol_l.constprop.0+0xa4>
 8003682:	4664      	mov	r4, ip
 8003684:	42a3      	cmp	r3, r4
 8003686:	dd24      	ble.n	80036d2 <_strtol_l.constprop.0+0xc6>
 8003688:	f1be 3fff 	cmp.w	lr, #4294967295
 800368c:	d008      	beq.n	80036a0 <_strtol_l.constprop.0+0x94>
 800368e:	45b1      	cmp	r9, r6
 8003690:	d31c      	bcc.n	80036cc <_strtol_l.constprop.0+0xc0>
 8003692:	d101      	bne.n	8003698 <_strtol_l.constprop.0+0x8c>
 8003694:	45a2      	cmp	sl, r4
 8003696:	db19      	blt.n	80036cc <_strtol_l.constprop.0+0xc0>
 8003698:	fb06 4603 	mla	r6, r6, r3, r4
 800369c:	f04f 0e01 	mov.w	lr, #1
 80036a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80036a4:	e7e8      	b.n	8003678 <_strtol_l.constprop.0+0x6c>
 80036a6:	2c2b      	cmp	r4, #43	; 0x2b
 80036a8:	bf04      	itt	eq
 80036aa:	782c      	ldrbeq	r4, [r5, #0]
 80036ac:	1cb5      	addeq	r5, r6, #2
 80036ae:	e7ca      	b.n	8003646 <_strtol_l.constprop.0+0x3a>
 80036b0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80036b4:	f1bc 0f19 	cmp.w	ip, #25
 80036b8:	d801      	bhi.n	80036be <_strtol_l.constprop.0+0xb2>
 80036ba:	3c37      	subs	r4, #55	; 0x37
 80036bc:	e7e2      	b.n	8003684 <_strtol_l.constprop.0+0x78>
 80036be:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80036c2:	f1bc 0f19 	cmp.w	ip, #25
 80036c6:	d804      	bhi.n	80036d2 <_strtol_l.constprop.0+0xc6>
 80036c8:	3c57      	subs	r4, #87	; 0x57
 80036ca:	e7db      	b.n	8003684 <_strtol_l.constprop.0+0x78>
 80036cc:	f04f 3eff 	mov.w	lr, #4294967295
 80036d0:	e7e6      	b.n	80036a0 <_strtol_l.constprop.0+0x94>
 80036d2:	f1be 3fff 	cmp.w	lr, #4294967295
 80036d6:	d105      	bne.n	80036e4 <_strtol_l.constprop.0+0xd8>
 80036d8:	2322      	movs	r3, #34	; 0x22
 80036da:	6003      	str	r3, [r0, #0]
 80036dc:	4646      	mov	r6, r8
 80036de:	b942      	cbnz	r2, 80036f2 <_strtol_l.constprop.0+0xe6>
 80036e0:	4630      	mov	r0, r6
 80036e2:	e79e      	b.n	8003622 <_strtol_l.constprop.0+0x16>
 80036e4:	b107      	cbz	r7, 80036e8 <_strtol_l.constprop.0+0xdc>
 80036e6:	4276      	negs	r6, r6
 80036e8:	2a00      	cmp	r2, #0
 80036ea:	d0f9      	beq.n	80036e0 <_strtol_l.constprop.0+0xd4>
 80036ec:	f1be 0f00 	cmp.w	lr, #0
 80036f0:	d000      	beq.n	80036f4 <_strtol_l.constprop.0+0xe8>
 80036f2:	1e69      	subs	r1, r5, #1
 80036f4:	6011      	str	r1, [r2, #0]
 80036f6:	e7f3      	b.n	80036e0 <_strtol_l.constprop.0+0xd4>
 80036f8:	2430      	movs	r4, #48	; 0x30
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1b1      	bne.n	8003662 <_strtol_l.constprop.0+0x56>
 80036fe:	2308      	movs	r3, #8
 8003700:	e7af      	b.n	8003662 <_strtol_l.constprop.0+0x56>
 8003702:	2c30      	cmp	r4, #48	; 0x30
 8003704:	d0a5      	beq.n	8003652 <_strtol_l.constprop.0+0x46>
 8003706:	230a      	movs	r3, #10
 8003708:	e7ab      	b.n	8003662 <_strtol_l.constprop.0+0x56>
 800370a:	bf00      	nop
 800370c:	08004c1d 	.word	0x08004c1d

08003710 <strtol>:
 8003710:	4613      	mov	r3, r2
 8003712:	460a      	mov	r2, r1
 8003714:	4601      	mov	r1, r0
 8003716:	4802      	ldr	r0, [pc, #8]	; (8003720 <strtol+0x10>)
 8003718:	6800      	ldr	r0, [r0, #0]
 800371a:	f7ff bf77 	b.w	800360c <_strtol_l.constprop.0>
 800371e:	bf00      	nop
 8003720:	2000009c 	.word	0x2000009c

08003724 <std>:
 8003724:	2300      	movs	r3, #0
 8003726:	b510      	push	{r4, lr}
 8003728:	4604      	mov	r4, r0
 800372a:	e9c0 3300 	strd	r3, r3, [r0]
 800372e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003732:	6083      	str	r3, [r0, #8]
 8003734:	8181      	strh	r1, [r0, #12]
 8003736:	6643      	str	r3, [r0, #100]	; 0x64
 8003738:	81c2      	strh	r2, [r0, #14]
 800373a:	6183      	str	r3, [r0, #24]
 800373c:	4619      	mov	r1, r3
 800373e:	2208      	movs	r2, #8
 8003740:	305c      	adds	r0, #92	; 0x5c
 8003742:	f000 f928 	bl	8003996 <memset>
 8003746:	4b0d      	ldr	r3, [pc, #52]	; (800377c <std+0x58>)
 8003748:	6263      	str	r3, [r4, #36]	; 0x24
 800374a:	4b0d      	ldr	r3, [pc, #52]	; (8003780 <std+0x5c>)
 800374c:	62a3      	str	r3, [r4, #40]	; 0x28
 800374e:	4b0d      	ldr	r3, [pc, #52]	; (8003784 <std+0x60>)
 8003750:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003752:	4b0d      	ldr	r3, [pc, #52]	; (8003788 <std+0x64>)
 8003754:	6323      	str	r3, [r4, #48]	; 0x30
 8003756:	4b0d      	ldr	r3, [pc, #52]	; (800378c <std+0x68>)
 8003758:	6224      	str	r4, [r4, #32]
 800375a:	429c      	cmp	r4, r3
 800375c:	d006      	beq.n	800376c <std+0x48>
 800375e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003762:	4294      	cmp	r4, r2
 8003764:	d002      	beq.n	800376c <std+0x48>
 8003766:	33d0      	adds	r3, #208	; 0xd0
 8003768:	429c      	cmp	r4, r3
 800376a:	d105      	bne.n	8003778 <std+0x54>
 800376c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003774:	f000 b9f6 	b.w	8003b64 <__retarget_lock_init_recursive>
 8003778:	bd10      	pop	{r4, pc}
 800377a:	bf00      	nop
 800377c:	08003911 	.word	0x08003911
 8003780:	08003933 	.word	0x08003933
 8003784:	0800396b 	.word	0x0800396b
 8003788:	0800398f 	.word	0x0800398f
 800378c:	200001a8 	.word	0x200001a8

08003790 <stdio_exit_handler>:
 8003790:	4a02      	ldr	r2, [pc, #8]	; (800379c <stdio_exit_handler+0xc>)
 8003792:	4903      	ldr	r1, [pc, #12]	; (80037a0 <stdio_exit_handler+0x10>)
 8003794:	4803      	ldr	r0, [pc, #12]	; (80037a4 <stdio_exit_handler+0x14>)
 8003796:	f000 b869 	b.w	800386c <_fwalk_sglue>
 800379a:	bf00      	nop
 800379c:	20000044 	.word	0x20000044
 80037a0:	08004485 	.word	0x08004485
 80037a4:	20000050 	.word	0x20000050

080037a8 <cleanup_stdio>:
 80037a8:	6841      	ldr	r1, [r0, #4]
 80037aa:	4b0c      	ldr	r3, [pc, #48]	; (80037dc <cleanup_stdio+0x34>)
 80037ac:	4299      	cmp	r1, r3
 80037ae:	b510      	push	{r4, lr}
 80037b0:	4604      	mov	r4, r0
 80037b2:	d001      	beq.n	80037b8 <cleanup_stdio+0x10>
 80037b4:	f000 fe66 	bl	8004484 <_fflush_r>
 80037b8:	68a1      	ldr	r1, [r4, #8]
 80037ba:	4b09      	ldr	r3, [pc, #36]	; (80037e0 <cleanup_stdio+0x38>)
 80037bc:	4299      	cmp	r1, r3
 80037be:	d002      	beq.n	80037c6 <cleanup_stdio+0x1e>
 80037c0:	4620      	mov	r0, r4
 80037c2:	f000 fe5f 	bl	8004484 <_fflush_r>
 80037c6:	68e1      	ldr	r1, [r4, #12]
 80037c8:	4b06      	ldr	r3, [pc, #24]	; (80037e4 <cleanup_stdio+0x3c>)
 80037ca:	4299      	cmp	r1, r3
 80037cc:	d004      	beq.n	80037d8 <cleanup_stdio+0x30>
 80037ce:	4620      	mov	r0, r4
 80037d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037d4:	f000 be56 	b.w	8004484 <_fflush_r>
 80037d8:	bd10      	pop	{r4, pc}
 80037da:	bf00      	nop
 80037dc:	200001a8 	.word	0x200001a8
 80037e0:	20000210 	.word	0x20000210
 80037e4:	20000278 	.word	0x20000278

080037e8 <global_stdio_init.part.0>:
 80037e8:	b510      	push	{r4, lr}
 80037ea:	4b0b      	ldr	r3, [pc, #44]	; (8003818 <global_stdio_init.part.0+0x30>)
 80037ec:	4c0b      	ldr	r4, [pc, #44]	; (800381c <global_stdio_init.part.0+0x34>)
 80037ee:	4a0c      	ldr	r2, [pc, #48]	; (8003820 <global_stdio_init.part.0+0x38>)
 80037f0:	601a      	str	r2, [r3, #0]
 80037f2:	4620      	mov	r0, r4
 80037f4:	2200      	movs	r2, #0
 80037f6:	2104      	movs	r1, #4
 80037f8:	f7ff ff94 	bl	8003724 <std>
 80037fc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003800:	2201      	movs	r2, #1
 8003802:	2109      	movs	r1, #9
 8003804:	f7ff ff8e 	bl	8003724 <std>
 8003808:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800380c:	2202      	movs	r2, #2
 800380e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003812:	2112      	movs	r1, #18
 8003814:	f7ff bf86 	b.w	8003724 <std>
 8003818:	200002e0 	.word	0x200002e0
 800381c:	200001a8 	.word	0x200001a8
 8003820:	08003791 	.word	0x08003791

08003824 <__sfp_lock_acquire>:
 8003824:	4801      	ldr	r0, [pc, #4]	; (800382c <__sfp_lock_acquire+0x8>)
 8003826:	f000 b99e 	b.w	8003b66 <__retarget_lock_acquire_recursive>
 800382a:	bf00      	nop
 800382c:	200002e9 	.word	0x200002e9

08003830 <__sfp_lock_release>:
 8003830:	4801      	ldr	r0, [pc, #4]	; (8003838 <__sfp_lock_release+0x8>)
 8003832:	f000 b999 	b.w	8003b68 <__retarget_lock_release_recursive>
 8003836:	bf00      	nop
 8003838:	200002e9 	.word	0x200002e9

0800383c <__sinit>:
 800383c:	b510      	push	{r4, lr}
 800383e:	4604      	mov	r4, r0
 8003840:	f7ff fff0 	bl	8003824 <__sfp_lock_acquire>
 8003844:	6a23      	ldr	r3, [r4, #32]
 8003846:	b11b      	cbz	r3, 8003850 <__sinit+0x14>
 8003848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800384c:	f7ff bff0 	b.w	8003830 <__sfp_lock_release>
 8003850:	4b04      	ldr	r3, [pc, #16]	; (8003864 <__sinit+0x28>)
 8003852:	6223      	str	r3, [r4, #32]
 8003854:	4b04      	ldr	r3, [pc, #16]	; (8003868 <__sinit+0x2c>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1f5      	bne.n	8003848 <__sinit+0xc>
 800385c:	f7ff ffc4 	bl	80037e8 <global_stdio_init.part.0>
 8003860:	e7f2      	b.n	8003848 <__sinit+0xc>
 8003862:	bf00      	nop
 8003864:	080037a9 	.word	0x080037a9
 8003868:	200002e0 	.word	0x200002e0

0800386c <_fwalk_sglue>:
 800386c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003870:	4607      	mov	r7, r0
 8003872:	4688      	mov	r8, r1
 8003874:	4614      	mov	r4, r2
 8003876:	2600      	movs	r6, #0
 8003878:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800387c:	f1b9 0901 	subs.w	r9, r9, #1
 8003880:	d505      	bpl.n	800388e <_fwalk_sglue+0x22>
 8003882:	6824      	ldr	r4, [r4, #0]
 8003884:	2c00      	cmp	r4, #0
 8003886:	d1f7      	bne.n	8003878 <_fwalk_sglue+0xc>
 8003888:	4630      	mov	r0, r6
 800388a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800388e:	89ab      	ldrh	r3, [r5, #12]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d907      	bls.n	80038a4 <_fwalk_sglue+0x38>
 8003894:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003898:	3301      	adds	r3, #1
 800389a:	d003      	beq.n	80038a4 <_fwalk_sglue+0x38>
 800389c:	4629      	mov	r1, r5
 800389e:	4638      	mov	r0, r7
 80038a0:	47c0      	blx	r8
 80038a2:	4306      	orrs	r6, r0
 80038a4:	3568      	adds	r5, #104	; 0x68
 80038a6:	e7e9      	b.n	800387c <_fwalk_sglue+0x10>

080038a8 <sniprintf>:
 80038a8:	b40c      	push	{r2, r3}
 80038aa:	b530      	push	{r4, r5, lr}
 80038ac:	4b17      	ldr	r3, [pc, #92]	; (800390c <sniprintf+0x64>)
 80038ae:	1e0c      	subs	r4, r1, #0
 80038b0:	681d      	ldr	r5, [r3, #0]
 80038b2:	b09d      	sub	sp, #116	; 0x74
 80038b4:	da08      	bge.n	80038c8 <sniprintf+0x20>
 80038b6:	238b      	movs	r3, #139	; 0x8b
 80038b8:	602b      	str	r3, [r5, #0]
 80038ba:	f04f 30ff 	mov.w	r0, #4294967295
 80038be:	b01d      	add	sp, #116	; 0x74
 80038c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80038c4:	b002      	add	sp, #8
 80038c6:	4770      	bx	lr
 80038c8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80038cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80038d0:	bf14      	ite	ne
 80038d2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80038d6:	4623      	moveq	r3, r4
 80038d8:	9304      	str	r3, [sp, #16]
 80038da:	9307      	str	r3, [sp, #28]
 80038dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80038e0:	9002      	str	r0, [sp, #8]
 80038e2:	9006      	str	r0, [sp, #24]
 80038e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80038e8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80038ea:	ab21      	add	r3, sp, #132	; 0x84
 80038ec:	a902      	add	r1, sp, #8
 80038ee:	4628      	mov	r0, r5
 80038f0:	9301      	str	r3, [sp, #4]
 80038f2:	f000 fab3 	bl	8003e5c <_svfiprintf_r>
 80038f6:	1c43      	adds	r3, r0, #1
 80038f8:	bfbc      	itt	lt
 80038fa:	238b      	movlt	r3, #139	; 0x8b
 80038fc:	602b      	strlt	r3, [r5, #0]
 80038fe:	2c00      	cmp	r4, #0
 8003900:	d0dd      	beq.n	80038be <sniprintf+0x16>
 8003902:	9b02      	ldr	r3, [sp, #8]
 8003904:	2200      	movs	r2, #0
 8003906:	701a      	strb	r2, [r3, #0]
 8003908:	e7d9      	b.n	80038be <sniprintf+0x16>
 800390a:	bf00      	nop
 800390c:	2000009c 	.word	0x2000009c

08003910 <__sread>:
 8003910:	b510      	push	{r4, lr}
 8003912:	460c      	mov	r4, r1
 8003914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003918:	f000 f8d6 	bl	8003ac8 <_read_r>
 800391c:	2800      	cmp	r0, #0
 800391e:	bfab      	itete	ge
 8003920:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003922:	89a3      	ldrhlt	r3, [r4, #12]
 8003924:	181b      	addge	r3, r3, r0
 8003926:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800392a:	bfac      	ite	ge
 800392c:	6563      	strge	r3, [r4, #84]	; 0x54
 800392e:	81a3      	strhlt	r3, [r4, #12]
 8003930:	bd10      	pop	{r4, pc}

08003932 <__swrite>:
 8003932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003936:	461f      	mov	r7, r3
 8003938:	898b      	ldrh	r3, [r1, #12]
 800393a:	05db      	lsls	r3, r3, #23
 800393c:	4605      	mov	r5, r0
 800393e:	460c      	mov	r4, r1
 8003940:	4616      	mov	r6, r2
 8003942:	d505      	bpl.n	8003950 <__swrite+0x1e>
 8003944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003948:	2302      	movs	r3, #2
 800394a:	2200      	movs	r2, #0
 800394c:	f000 f8aa 	bl	8003aa4 <_lseek_r>
 8003950:	89a3      	ldrh	r3, [r4, #12]
 8003952:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003956:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800395a:	81a3      	strh	r3, [r4, #12]
 800395c:	4632      	mov	r2, r6
 800395e:	463b      	mov	r3, r7
 8003960:	4628      	mov	r0, r5
 8003962:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003966:	f000 b8c1 	b.w	8003aec <_write_r>

0800396a <__sseek>:
 800396a:	b510      	push	{r4, lr}
 800396c:	460c      	mov	r4, r1
 800396e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003972:	f000 f897 	bl	8003aa4 <_lseek_r>
 8003976:	1c43      	adds	r3, r0, #1
 8003978:	89a3      	ldrh	r3, [r4, #12]
 800397a:	bf15      	itete	ne
 800397c:	6560      	strne	r0, [r4, #84]	; 0x54
 800397e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003982:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003986:	81a3      	strheq	r3, [r4, #12]
 8003988:	bf18      	it	ne
 800398a:	81a3      	strhne	r3, [r4, #12]
 800398c:	bd10      	pop	{r4, pc}

0800398e <__sclose>:
 800398e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003992:	f000 b877 	b.w	8003a84 <_close_r>

08003996 <memset>:
 8003996:	4402      	add	r2, r0
 8003998:	4603      	mov	r3, r0
 800399a:	4293      	cmp	r3, r2
 800399c:	d100      	bne.n	80039a0 <memset+0xa>
 800399e:	4770      	bx	lr
 80039a0:	f803 1b01 	strb.w	r1, [r3], #1
 80039a4:	e7f9      	b.n	800399a <memset+0x4>

080039a6 <strncmp>:
 80039a6:	b510      	push	{r4, lr}
 80039a8:	b16a      	cbz	r2, 80039c6 <strncmp+0x20>
 80039aa:	3901      	subs	r1, #1
 80039ac:	1884      	adds	r4, r0, r2
 80039ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80039b2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d103      	bne.n	80039c2 <strncmp+0x1c>
 80039ba:	42a0      	cmp	r0, r4
 80039bc:	d001      	beq.n	80039c2 <strncmp+0x1c>
 80039be:	2a00      	cmp	r2, #0
 80039c0:	d1f5      	bne.n	80039ae <strncmp+0x8>
 80039c2:	1ad0      	subs	r0, r2, r3
 80039c4:	bd10      	pop	{r4, pc}
 80039c6:	4610      	mov	r0, r2
 80039c8:	e7fc      	b.n	80039c4 <strncmp+0x1e>
	...

080039cc <strtok>:
 80039cc:	4b16      	ldr	r3, [pc, #88]	; (8003a28 <strtok+0x5c>)
 80039ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80039d0:	681e      	ldr	r6, [r3, #0]
 80039d2:	6c74      	ldr	r4, [r6, #68]	; 0x44
 80039d4:	4605      	mov	r5, r0
 80039d6:	b9fc      	cbnz	r4, 8003a18 <strtok+0x4c>
 80039d8:	2050      	movs	r0, #80	; 0x50
 80039da:	9101      	str	r1, [sp, #4]
 80039dc:	f000 f930 	bl	8003c40 <malloc>
 80039e0:	9901      	ldr	r1, [sp, #4]
 80039e2:	6470      	str	r0, [r6, #68]	; 0x44
 80039e4:	4602      	mov	r2, r0
 80039e6:	b920      	cbnz	r0, 80039f2 <strtok+0x26>
 80039e8:	4b10      	ldr	r3, [pc, #64]	; (8003a2c <strtok+0x60>)
 80039ea:	4811      	ldr	r0, [pc, #68]	; (8003a30 <strtok+0x64>)
 80039ec:	215b      	movs	r1, #91	; 0x5b
 80039ee:	f000 f8bd 	bl	8003b6c <__assert_func>
 80039f2:	e9c0 4400 	strd	r4, r4, [r0]
 80039f6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80039fa:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80039fe:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8003a02:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8003a06:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8003a0a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8003a0e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8003a12:	6184      	str	r4, [r0, #24]
 8003a14:	7704      	strb	r4, [r0, #28]
 8003a16:	6244      	str	r4, [r0, #36]	; 0x24
 8003a18:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	4628      	mov	r0, r5
 8003a1e:	b002      	add	sp, #8
 8003a20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003a24:	f000 b806 	b.w	8003a34 <__strtok_r>
 8003a28:	2000009c 	.word	0x2000009c
 8003a2c:	08004d1d 	.word	0x08004d1d
 8003a30:	08004d34 	.word	0x08004d34

08003a34 <__strtok_r>:
 8003a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a36:	b908      	cbnz	r0, 8003a3c <__strtok_r+0x8>
 8003a38:	6810      	ldr	r0, [r2, #0]
 8003a3a:	b188      	cbz	r0, 8003a60 <__strtok_r+0x2c>
 8003a3c:	4604      	mov	r4, r0
 8003a3e:	4620      	mov	r0, r4
 8003a40:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003a44:	460f      	mov	r7, r1
 8003a46:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003a4a:	b91e      	cbnz	r6, 8003a54 <__strtok_r+0x20>
 8003a4c:	b965      	cbnz	r5, 8003a68 <__strtok_r+0x34>
 8003a4e:	6015      	str	r5, [r2, #0]
 8003a50:	4628      	mov	r0, r5
 8003a52:	e005      	b.n	8003a60 <__strtok_r+0x2c>
 8003a54:	42b5      	cmp	r5, r6
 8003a56:	d1f6      	bne.n	8003a46 <__strtok_r+0x12>
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1f0      	bne.n	8003a3e <__strtok_r+0xa>
 8003a5c:	6014      	str	r4, [r2, #0]
 8003a5e:	7003      	strb	r3, [r0, #0]
 8003a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a62:	461c      	mov	r4, r3
 8003a64:	e00c      	b.n	8003a80 <__strtok_r+0x4c>
 8003a66:	b915      	cbnz	r5, 8003a6e <__strtok_r+0x3a>
 8003a68:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003a6c:	460e      	mov	r6, r1
 8003a6e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003a72:	42ab      	cmp	r3, r5
 8003a74:	d1f7      	bne.n	8003a66 <__strtok_r+0x32>
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d0f3      	beq.n	8003a62 <__strtok_r+0x2e>
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003a80:	6014      	str	r4, [r2, #0]
 8003a82:	e7ed      	b.n	8003a60 <__strtok_r+0x2c>

08003a84 <_close_r>:
 8003a84:	b538      	push	{r3, r4, r5, lr}
 8003a86:	4d06      	ldr	r5, [pc, #24]	; (8003aa0 <_close_r+0x1c>)
 8003a88:	2300      	movs	r3, #0
 8003a8a:	4604      	mov	r4, r0
 8003a8c:	4608      	mov	r0, r1
 8003a8e:	602b      	str	r3, [r5, #0]
 8003a90:	f7fc ff65 	bl	800095e <_close>
 8003a94:	1c43      	adds	r3, r0, #1
 8003a96:	d102      	bne.n	8003a9e <_close_r+0x1a>
 8003a98:	682b      	ldr	r3, [r5, #0]
 8003a9a:	b103      	cbz	r3, 8003a9e <_close_r+0x1a>
 8003a9c:	6023      	str	r3, [r4, #0]
 8003a9e:	bd38      	pop	{r3, r4, r5, pc}
 8003aa0:	200002e4 	.word	0x200002e4

08003aa4 <_lseek_r>:
 8003aa4:	b538      	push	{r3, r4, r5, lr}
 8003aa6:	4d07      	ldr	r5, [pc, #28]	; (8003ac4 <_lseek_r+0x20>)
 8003aa8:	4604      	mov	r4, r0
 8003aaa:	4608      	mov	r0, r1
 8003aac:	4611      	mov	r1, r2
 8003aae:	2200      	movs	r2, #0
 8003ab0:	602a      	str	r2, [r5, #0]
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	f7fc ff7a 	bl	80009ac <_lseek>
 8003ab8:	1c43      	adds	r3, r0, #1
 8003aba:	d102      	bne.n	8003ac2 <_lseek_r+0x1e>
 8003abc:	682b      	ldr	r3, [r5, #0]
 8003abe:	b103      	cbz	r3, 8003ac2 <_lseek_r+0x1e>
 8003ac0:	6023      	str	r3, [r4, #0]
 8003ac2:	bd38      	pop	{r3, r4, r5, pc}
 8003ac4:	200002e4 	.word	0x200002e4

08003ac8 <_read_r>:
 8003ac8:	b538      	push	{r3, r4, r5, lr}
 8003aca:	4d07      	ldr	r5, [pc, #28]	; (8003ae8 <_read_r+0x20>)
 8003acc:	4604      	mov	r4, r0
 8003ace:	4608      	mov	r0, r1
 8003ad0:	4611      	mov	r1, r2
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	602a      	str	r2, [r5, #0]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	f7fc ff08 	bl	80008ec <_read>
 8003adc:	1c43      	adds	r3, r0, #1
 8003ade:	d102      	bne.n	8003ae6 <_read_r+0x1e>
 8003ae0:	682b      	ldr	r3, [r5, #0]
 8003ae2:	b103      	cbz	r3, 8003ae6 <_read_r+0x1e>
 8003ae4:	6023      	str	r3, [r4, #0]
 8003ae6:	bd38      	pop	{r3, r4, r5, pc}
 8003ae8:	200002e4 	.word	0x200002e4

08003aec <_write_r>:
 8003aec:	b538      	push	{r3, r4, r5, lr}
 8003aee:	4d07      	ldr	r5, [pc, #28]	; (8003b0c <_write_r+0x20>)
 8003af0:	4604      	mov	r4, r0
 8003af2:	4608      	mov	r0, r1
 8003af4:	4611      	mov	r1, r2
 8003af6:	2200      	movs	r2, #0
 8003af8:	602a      	str	r2, [r5, #0]
 8003afa:	461a      	mov	r2, r3
 8003afc:	f7fc ff13 	bl	8000926 <_write>
 8003b00:	1c43      	adds	r3, r0, #1
 8003b02:	d102      	bne.n	8003b0a <_write_r+0x1e>
 8003b04:	682b      	ldr	r3, [r5, #0]
 8003b06:	b103      	cbz	r3, 8003b0a <_write_r+0x1e>
 8003b08:	6023      	str	r3, [r4, #0]
 8003b0a:	bd38      	pop	{r3, r4, r5, pc}
 8003b0c:	200002e4 	.word	0x200002e4

08003b10 <__errno>:
 8003b10:	4b01      	ldr	r3, [pc, #4]	; (8003b18 <__errno+0x8>)
 8003b12:	6818      	ldr	r0, [r3, #0]
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	2000009c 	.word	0x2000009c

08003b1c <__libc_init_array>:
 8003b1c:	b570      	push	{r4, r5, r6, lr}
 8003b1e:	4d0d      	ldr	r5, [pc, #52]	; (8003b54 <__libc_init_array+0x38>)
 8003b20:	4c0d      	ldr	r4, [pc, #52]	; (8003b58 <__libc_init_array+0x3c>)
 8003b22:	1b64      	subs	r4, r4, r5
 8003b24:	10a4      	asrs	r4, r4, #2
 8003b26:	2600      	movs	r6, #0
 8003b28:	42a6      	cmp	r6, r4
 8003b2a:	d109      	bne.n	8003b40 <__libc_init_array+0x24>
 8003b2c:	4d0b      	ldr	r5, [pc, #44]	; (8003b5c <__libc_init_array+0x40>)
 8003b2e:	4c0c      	ldr	r4, [pc, #48]	; (8003b60 <__libc_init_array+0x44>)
 8003b30:	f000 fffa 	bl	8004b28 <_init>
 8003b34:	1b64      	subs	r4, r4, r5
 8003b36:	10a4      	asrs	r4, r4, #2
 8003b38:	2600      	movs	r6, #0
 8003b3a:	42a6      	cmp	r6, r4
 8003b3c:	d105      	bne.n	8003b4a <__libc_init_array+0x2e>
 8003b3e:	bd70      	pop	{r4, r5, r6, pc}
 8003b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b44:	4798      	blx	r3
 8003b46:	3601      	adds	r6, #1
 8003b48:	e7ee      	b.n	8003b28 <__libc_init_array+0xc>
 8003b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b4e:	4798      	blx	r3
 8003b50:	3601      	adds	r6, #1
 8003b52:	e7f2      	b.n	8003b3a <__libc_init_array+0x1e>
 8003b54:	08004e00 	.word	0x08004e00
 8003b58:	08004e00 	.word	0x08004e00
 8003b5c:	08004e00 	.word	0x08004e00
 8003b60:	08004e04 	.word	0x08004e04

08003b64 <__retarget_lock_init_recursive>:
 8003b64:	4770      	bx	lr

08003b66 <__retarget_lock_acquire_recursive>:
 8003b66:	4770      	bx	lr

08003b68 <__retarget_lock_release_recursive>:
 8003b68:	4770      	bx	lr
	...

08003b6c <__assert_func>:
 8003b6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003b6e:	4614      	mov	r4, r2
 8003b70:	461a      	mov	r2, r3
 8003b72:	4b09      	ldr	r3, [pc, #36]	; (8003b98 <__assert_func+0x2c>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4605      	mov	r5, r0
 8003b78:	68d8      	ldr	r0, [r3, #12]
 8003b7a:	b14c      	cbz	r4, 8003b90 <__assert_func+0x24>
 8003b7c:	4b07      	ldr	r3, [pc, #28]	; (8003b9c <__assert_func+0x30>)
 8003b7e:	9100      	str	r1, [sp, #0]
 8003b80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003b84:	4906      	ldr	r1, [pc, #24]	; (8003ba0 <__assert_func+0x34>)
 8003b86:	462b      	mov	r3, r5
 8003b88:	f000 fca4 	bl	80044d4 <fiprintf>
 8003b8c:	f000 fcec 	bl	8004568 <abort>
 8003b90:	4b04      	ldr	r3, [pc, #16]	; (8003ba4 <__assert_func+0x38>)
 8003b92:	461c      	mov	r4, r3
 8003b94:	e7f3      	b.n	8003b7e <__assert_func+0x12>
 8003b96:	bf00      	nop
 8003b98:	2000009c 	.word	0x2000009c
 8003b9c:	08004d8e 	.word	0x08004d8e
 8003ba0:	08004d9b 	.word	0x08004d9b
 8003ba4:	08004dc9 	.word	0x08004dc9

08003ba8 <_free_r>:
 8003ba8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003baa:	2900      	cmp	r1, #0
 8003bac:	d044      	beq.n	8003c38 <_free_r+0x90>
 8003bae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bb2:	9001      	str	r0, [sp, #4]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f1a1 0404 	sub.w	r4, r1, #4
 8003bba:	bfb8      	it	lt
 8003bbc:	18e4      	addlt	r4, r4, r3
 8003bbe:	f000 f8e7 	bl	8003d90 <__malloc_lock>
 8003bc2:	4a1e      	ldr	r2, [pc, #120]	; (8003c3c <_free_r+0x94>)
 8003bc4:	9801      	ldr	r0, [sp, #4]
 8003bc6:	6813      	ldr	r3, [r2, #0]
 8003bc8:	b933      	cbnz	r3, 8003bd8 <_free_r+0x30>
 8003bca:	6063      	str	r3, [r4, #4]
 8003bcc:	6014      	str	r4, [r2, #0]
 8003bce:	b003      	add	sp, #12
 8003bd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003bd4:	f000 b8e2 	b.w	8003d9c <__malloc_unlock>
 8003bd8:	42a3      	cmp	r3, r4
 8003bda:	d908      	bls.n	8003bee <_free_r+0x46>
 8003bdc:	6825      	ldr	r5, [r4, #0]
 8003bde:	1961      	adds	r1, r4, r5
 8003be0:	428b      	cmp	r3, r1
 8003be2:	bf01      	itttt	eq
 8003be4:	6819      	ldreq	r1, [r3, #0]
 8003be6:	685b      	ldreq	r3, [r3, #4]
 8003be8:	1949      	addeq	r1, r1, r5
 8003bea:	6021      	streq	r1, [r4, #0]
 8003bec:	e7ed      	b.n	8003bca <_free_r+0x22>
 8003bee:	461a      	mov	r2, r3
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	b10b      	cbz	r3, 8003bf8 <_free_r+0x50>
 8003bf4:	42a3      	cmp	r3, r4
 8003bf6:	d9fa      	bls.n	8003bee <_free_r+0x46>
 8003bf8:	6811      	ldr	r1, [r2, #0]
 8003bfa:	1855      	adds	r5, r2, r1
 8003bfc:	42a5      	cmp	r5, r4
 8003bfe:	d10b      	bne.n	8003c18 <_free_r+0x70>
 8003c00:	6824      	ldr	r4, [r4, #0]
 8003c02:	4421      	add	r1, r4
 8003c04:	1854      	adds	r4, r2, r1
 8003c06:	42a3      	cmp	r3, r4
 8003c08:	6011      	str	r1, [r2, #0]
 8003c0a:	d1e0      	bne.n	8003bce <_free_r+0x26>
 8003c0c:	681c      	ldr	r4, [r3, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	6053      	str	r3, [r2, #4]
 8003c12:	440c      	add	r4, r1
 8003c14:	6014      	str	r4, [r2, #0]
 8003c16:	e7da      	b.n	8003bce <_free_r+0x26>
 8003c18:	d902      	bls.n	8003c20 <_free_r+0x78>
 8003c1a:	230c      	movs	r3, #12
 8003c1c:	6003      	str	r3, [r0, #0]
 8003c1e:	e7d6      	b.n	8003bce <_free_r+0x26>
 8003c20:	6825      	ldr	r5, [r4, #0]
 8003c22:	1961      	adds	r1, r4, r5
 8003c24:	428b      	cmp	r3, r1
 8003c26:	bf04      	itt	eq
 8003c28:	6819      	ldreq	r1, [r3, #0]
 8003c2a:	685b      	ldreq	r3, [r3, #4]
 8003c2c:	6063      	str	r3, [r4, #4]
 8003c2e:	bf04      	itt	eq
 8003c30:	1949      	addeq	r1, r1, r5
 8003c32:	6021      	streq	r1, [r4, #0]
 8003c34:	6054      	str	r4, [r2, #4]
 8003c36:	e7ca      	b.n	8003bce <_free_r+0x26>
 8003c38:	b003      	add	sp, #12
 8003c3a:	bd30      	pop	{r4, r5, pc}
 8003c3c:	200002ec 	.word	0x200002ec

08003c40 <malloc>:
 8003c40:	4b02      	ldr	r3, [pc, #8]	; (8003c4c <malloc+0xc>)
 8003c42:	4601      	mov	r1, r0
 8003c44:	6818      	ldr	r0, [r3, #0]
 8003c46:	f000 b823 	b.w	8003c90 <_malloc_r>
 8003c4a:	bf00      	nop
 8003c4c:	2000009c 	.word	0x2000009c

08003c50 <sbrk_aligned>:
 8003c50:	b570      	push	{r4, r5, r6, lr}
 8003c52:	4e0e      	ldr	r6, [pc, #56]	; (8003c8c <sbrk_aligned+0x3c>)
 8003c54:	460c      	mov	r4, r1
 8003c56:	6831      	ldr	r1, [r6, #0]
 8003c58:	4605      	mov	r5, r0
 8003c5a:	b911      	cbnz	r1, 8003c62 <sbrk_aligned+0x12>
 8003c5c:	f000 fc66 	bl	800452c <_sbrk_r>
 8003c60:	6030      	str	r0, [r6, #0]
 8003c62:	4621      	mov	r1, r4
 8003c64:	4628      	mov	r0, r5
 8003c66:	f000 fc61 	bl	800452c <_sbrk_r>
 8003c6a:	1c43      	adds	r3, r0, #1
 8003c6c:	d00a      	beq.n	8003c84 <sbrk_aligned+0x34>
 8003c6e:	1cc4      	adds	r4, r0, #3
 8003c70:	f024 0403 	bic.w	r4, r4, #3
 8003c74:	42a0      	cmp	r0, r4
 8003c76:	d007      	beq.n	8003c88 <sbrk_aligned+0x38>
 8003c78:	1a21      	subs	r1, r4, r0
 8003c7a:	4628      	mov	r0, r5
 8003c7c:	f000 fc56 	bl	800452c <_sbrk_r>
 8003c80:	3001      	adds	r0, #1
 8003c82:	d101      	bne.n	8003c88 <sbrk_aligned+0x38>
 8003c84:	f04f 34ff 	mov.w	r4, #4294967295
 8003c88:	4620      	mov	r0, r4
 8003c8a:	bd70      	pop	{r4, r5, r6, pc}
 8003c8c:	200002f0 	.word	0x200002f0

08003c90 <_malloc_r>:
 8003c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c94:	1ccd      	adds	r5, r1, #3
 8003c96:	f025 0503 	bic.w	r5, r5, #3
 8003c9a:	3508      	adds	r5, #8
 8003c9c:	2d0c      	cmp	r5, #12
 8003c9e:	bf38      	it	cc
 8003ca0:	250c      	movcc	r5, #12
 8003ca2:	2d00      	cmp	r5, #0
 8003ca4:	4607      	mov	r7, r0
 8003ca6:	db01      	blt.n	8003cac <_malloc_r+0x1c>
 8003ca8:	42a9      	cmp	r1, r5
 8003caa:	d905      	bls.n	8003cb8 <_malloc_r+0x28>
 8003cac:	230c      	movs	r3, #12
 8003cae:	603b      	str	r3, [r7, #0]
 8003cb0:	2600      	movs	r6, #0
 8003cb2:	4630      	mov	r0, r6
 8003cb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cb8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003d8c <_malloc_r+0xfc>
 8003cbc:	f000 f868 	bl	8003d90 <__malloc_lock>
 8003cc0:	f8d8 3000 	ldr.w	r3, [r8]
 8003cc4:	461c      	mov	r4, r3
 8003cc6:	bb5c      	cbnz	r4, 8003d20 <_malloc_r+0x90>
 8003cc8:	4629      	mov	r1, r5
 8003cca:	4638      	mov	r0, r7
 8003ccc:	f7ff ffc0 	bl	8003c50 <sbrk_aligned>
 8003cd0:	1c43      	adds	r3, r0, #1
 8003cd2:	4604      	mov	r4, r0
 8003cd4:	d155      	bne.n	8003d82 <_malloc_r+0xf2>
 8003cd6:	f8d8 4000 	ldr.w	r4, [r8]
 8003cda:	4626      	mov	r6, r4
 8003cdc:	2e00      	cmp	r6, #0
 8003cde:	d145      	bne.n	8003d6c <_malloc_r+0xdc>
 8003ce0:	2c00      	cmp	r4, #0
 8003ce2:	d048      	beq.n	8003d76 <_malloc_r+0xe6>
 8003ce4:	6823      	ldr	r3, [r4, #0]
 8003ce6:	4631      	mov	r1, r6
 8003ce8:	4638      	mov	r0, r7
 8003cea:	eb04 0903 	add.w	r9, r4, r3
 8003cee:	f000 fc1d 	bl	800452c <_sbrk_r>
 8003cf2:	4581      	cmp	r9, r0
 8003cf4:	d13f      	bne.n	8003d76 <_malloc_r+0xe6>
 8003cf6:	6821      	ldr	r1, [r4, #0]
 8003cf8:	1a6d      	subs	r5, r5, r1
 8003cfa:	4629      	mov	r1, r5
 8003cfc:	4638      	mov	r0, r7
 8003cfe:	f7ff ffa7 	bl	8003c50 <sbrk_aligned>
 8003d02:	3001      	adds	r0, #1
 8003d04:	d037      	beq.n	8003d76 <_malloc_r+0xe6>
 8003d06:	6823      	ldr	r3, [r4, #0]
 8003d08:	442b      	add	r3, r5
 8003d0a:	6023      	str	r3, [r4, #0]
 8003d0c:	f8d8 3000 	ldr.w	r3, [r8]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d038      	beq.n	8003d86 <_malloc_r+0xf6>
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	42a2      	cmp	r2, r4
 8003d18:	d12b      	bne.n	8003d72 <_malloc_r+0xe2>
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	605a      	str	r2, [r3, #4]
 8003d1e:	e00f      	b.n	8003d40 <_malloc_r+0xb0>
 8003d20:	6822      	ldr	r2, [r4, #0]
 8003d22:	1b52      	subs	r2, r2, r5
 8003d24:	d41f      	bmi.n	8003d66 <_malloc_r+0xd6>
 8003d26:	2a0b      	cmp	r2, #11
 8003d28:	d917      	bls.n	8003d5a <_malloc_r+0xca>
 8003d2a:	1961      	adds	r1, r4, r5
 8003d2c:	42a3      	cmp	r3, r4
 8003d2e:	6025      	str	r5, [r4, #0]
 8003d30:	bf18      	it	ne
 8003d32:	6059      	strne	r1, [r3, #4]
 8003d34:	6863      	ldr	r3, [r4, #4]
 8003d36:	bf08      	it	eq
 8003d38:	f8c8 1000 	streq.w	r1, [r8]
 8003d3c:	5162      	str	r2, [r4, r5]
 8003d3e:	604b      	str	r3, [r1, #4]
 8003d40:	4638      	mov	r0, r7
 8003d42:	f104 060b 	add.w	r6, r4, #11
 8003d46:	f000 f829 	bl	8003d9c <__malloc_unlock>
 8003d4a:	f026 0607 	bic.w	r6, r6, #7
 8003d4e:	1d23      	adds	r3, r4, #4
 8003d50:	1af2      	subs	r2, r6, r3
 8003d52:	d0ae      	beq.n	8003cb2 <_malloc_r+0x22>
 8003d54:	1b9b      	subs	r3, r3, r6
 8003d56:	50a3      	str	r3, [r4, r2]
 8003d58:	e7ab      	b.n	8003cb2 <_malloc_r+0x22>
 8003d5a:	42a3      	cmp	r3, r4
 8003d5c:	6862      	ldr	r2, [r4, #4]
 8003d5e:	d1dd      	bne.n	8003d1c <_malloc_r+0x8c>
 8003d60:	f8c8 2000 	str.w	r2, [r8]
 8003d64:	e7ec      	b.n	8003d40 <_malloc_r+0xb0>
 8003d66:	4623      	mov	r3, r4
 8003d68:	6864      	ldr	r4, [r4, #4]
 8003d6a:	e7ac      	b.n	8003cc6 <_malloc_r+0x36>
 8003d6c:	4634      	mov	r4, r6
 8003d6e:	6876      	ldr	r6, [r6, #4]
 8003d70:	e7b4      	b.n	8003cdc <_malloc_r+0x4c>
 8003d72:	4613      	mov	r3, r2
 8003d74:	e7cc      	b.n	8003d10 <_malloc_r+0x80>
 8003d76:	230c      	movs	r3, #12
 8003d78:	603b      	str	r3, [r7, #0]
 8003d7a:	4638      	mov	r0, r7
 8003d7c:	f000 f80e 	bl	8003d9c <__malloc_unlock>
 8003d80:	e797      	b.n	8003cb2 <_malloc_r+0x22>
 8003d82:	6025      	str	r5, [r4, #0]
 8003d84:	e7dc      	b.n	8003d40 <_malloc_r+0xb0>
 8003d86:	605b      	str	r3, [r3, #4]
 8003d88:	deff      	udf	#255	; 0xff
 8003d8a:	bf00      	nop
 8003d8c:	200002ec 	.word	0x200002ec

08003d90 <__malloc_lock>:
 8003d90:	4801      	ldr	r0, [pc, #4]	; (8003d98 <__malloc_lock+0x8>)
 8003d92:	f7ff bee8 	b.w	8003b66 <__retarget_lock_acquire_recursive>
 8003d96:	bf00      	nop
 8003d98:	200002e8 	.word	0x200002e8

08003d9c <__malloc_unlock>:
 8003d9c:	4801      	ldr	r0, [pc, #4]	; (8003da4 <__malloc_unlock+0x8>)
 8003d9e:	f7ff bee3 	b.w	8003b68 <__retarget_lock_release_recursive>
 8003da2:	bf00      	nop
 8003da4:	200002e8 	.word	0x200002e8

08003da8 <__ssputs_r>:
 8003da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dac:	688e      	ldr	r6, [r1, #8]
 8003dae:	461f      	mov	r7, r3
 8003db0:	42be      	cmp	r6, r7
 8003db2:	680b      	ldr	r3, [r1, #0]
 8003db4:	4682      	mov	sl, r0
 8003db6:	460c      	mov	r4, r1
 8003db8:	4690      	mov	r8, r2
 8003dba:	d82c      	bhi.n	8003e16 <__ssputs_r+0x6e>
 8003dbc:	898a      	ldrh	r2, [r1, #12]
 8003dbe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003dc2:	d026      	beq.n	8003e12 <__ssputs_r+0x6a>
 8003dc4:	6965      	ldr	r5, [r4, #20]
 8003dc6:	6909      	ldr	r1, [r1, #16]
 8003dc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003dcc:	eba3 0901 	sub.w	r9, r3, r1
 8003dd0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003dd4:	1c7b      	adds	r3, r7, #1
 8003dd6:	444b      	add	r3, r9
 8003dd8:	106d      	asrs	r5, r5, #1
 8003dda:	429d      	cmp	r5, r3
 8003ddc:	bf38      	it	cc
 8003dde:	461d      	movcc	r5, r3
 8003de0:	0553      	lsls	r3, r2, #21
 8003de2:	d527      	bpl.n	8003e34 <__ssputs_r+0x8c>
 8003de4:	4629      	mov	r1, r5
 8003de6:	f7ff ff53 	bl	8003c90 <_malloc_r>
 8003dea:	4606      	mov	r6, r0
 8003dec:	b360      	cbz	r0, 8003e48 <__ssputs_r+0xa0>
 8003dee:	6921      	ldr	r1, [r4, #16]
 8003df0:	464a      	mov	r2, r9
 8003df2:	f000 fbab 	bl	800454c <memcpy>
 8003df6:	89a3      	ldrh	r3, [r4, #12]
 8003df8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e00:	81a3      	strh	r3, [r4, #12]
 8003e02:	6126      	str	r6, [r4, #16]
 8003e04:	6165      	str	r5, [r4, #20]
 8003e06:	444e      	add	r6, r9
 8003e08:	eba5 0509 	sub.w	r5, r5, r9
 8003e0c:	6026      	str	r6, [r4, #0]
 8003e0e:	60a5      	str	r5, [r4, #8]
 8003e10:	463e      	mov	r6, r7
 8003e12:	42be      	cmp	r6, r7
 8003e14:	d900      	bls.n	8003e18 <__ssputs_r+0x70>
 8003e16:	463e      	mov	r6, r7
 8003e18:	6820      	ldr	r0, [r4, #0]
 8003e1a:	4632      	mov	r2, r6
 8003e1c:	4641      	mov	r1, r8
 8003e1e:	f000 fb6b 	bl	80044f8 <memmove>
 8003e22:	68a3      	ldr	r3, [r4, #8]
 8003e24:	1b9b      	subs	r3, r3, r6
 8003e26:	60a3      	str	r3, [r4, #8]
 8003e28:	6823      	ldr	r3, [r4, #0]
 8003e2a:	4433      	add	r3, r6
 8003e2c:	6023      	str	r3, [r4, #0]
 8003e2e:	2000      	movs	r0, #0
 8003e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e34:	462a      	mov	r2, r5
 8003e36:	f000 fb9e 	bl	8004576 <_realloc_r>
 8003e3a:	4606      	mov	r6, r0
 8003e3c:	2800      	cmp	r0, #0
 8003e3e:	d1e0      	bne.n	8003e02 <__ssputs_r+0x5a>
 8003e40:	6921      	ldr	r1, [r4, #16]
 8003e42:	4650      	mov	r0, sl
 8003e44:	f7ff feb0 	bl	8003ba8 <_free_r>
 8003e48:	230c      	movs	r3, #12
 8003e4a:	f8ca 3000 	str.w	r3, [sl]
 8003e4e:	89a3      	ldrh	r3, [r4, #12]
 8003e50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e54:	81a3      	strh	r3, [r4, #12]
 8003e56:	f04f 30ff 	mov.w	r0, #4294967295
 8003e5a:	e7e9      	b.n	8003e30 <__ssputs_r+0x88>

08003e5c <_svfiprintf_r>:
 8003e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e60:	4698      	mov	r8, r3
 8003e62:	898b      	ldrh	r3, [r1, #12]
 8003e64:	061b      	lsls	r3, r3, #24
 8003e66:	b09d      	sub	sp, #116	; 0x74
 8003e68:	4607      	mov	r7, r0
 8003e6a:	460d      	mov	r5, r1
 8003e6c:	4614      	mov	r4, r2
 8003e6e:	d50e      	bpl.n	8003e8e <_svfiprintf_r+0x32>
 8003e70:	690b      	ldr	r3, [r1, #16]
 8003e72:	b963      	cbnz	r3, 8003e8e <_svfiprintf_r+0x32>
 8003e74:	2140      	movs	r1, #64	; 0x40
 8003e76:	f7ff ff0b 	bl	8003c90 <_malloc_r>
 8003e7a:	6028      	str	r0, [r5, #0]
 8003e7c:	6128      	str	r0, [r5, #16]
 8003e7e:	b920      	cbnz	r0, 8003e8a <_svfiprintf_r+0x2e>
 8003e80:	230c      	movs	r3, #12
 8003e82:	603b      	str	r3, [r7, #0]
 8003e84:	f04f 30ff 	mov.w	r0, #4294967295
 8003e88:	e0d0      	b.n	800402c <_svfiprintf_r+0x1d0>
 8003e8a:	2340      	movs	r3, #64	; 0x40
 8003e8c:	616b      	str	r3, [r5, #20]
 8003e8e:	2300      	movs	r3, #0
 8003e90:	9309      	str	r3, [sp, #36]	; 0x24
 8003e92:	2320      	movs	r3, #32
 8003e94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e98:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e9c:	2330      	movs	r3, #48	; 0x30
 8003e9e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004044 <_svfiprintf_r+0x1e8>
 8003ea2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ea6:	f04f 0901 	mov.w	r9, #1
 8003eaa:	4623      	mov	r3, r4
 8003eac:	469a      	mov	sl, r3
 8003eae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003eb2:	b10a      	cbz	r2, 8003eb8 <_svfiprintf_r+0x5c>
 8003eb4:	2a25      	cmp	r2, #37	; 0x25
 8003eb6:	d1f9      	bne.n	8003eac <_svfiprintf_r+0x50>
 8003eb8:	ebba 0b04 	subs.w	fp, sl, r4
 8003ebc:	d00b      	beq.n	8003ed6 <_svfiprintf_r+0x7a>
 8003ebe:	465b      	mov	r3, fp
 8003ec0:	4622      	mov	r2, r4
 8003ec2:	4629      	mov	r1, r5
 8003ec4:	4638      	mov	r0, r7
 8003ec6:	f7ff ff6f 	bl	8003da8 <__ssputs_r>
 8003eca:	3001      	adds	r0, #1
 8003ecc:	f000 80a9 	beq.w	8004022 <_svfiprintf_r+0x1c6>
 8003ed0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ed2:	445a      	add	r2, fp
 8003ed4:	9209      	str	r2, [sp, #36]	; 0x24
 8003ed6:	f89a 3000 	ldrb.w	r3, [sl]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f000 80a1 	beq.w	8004022 <_svfiprintf_r+0x1c6>
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ee6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003eea:	f10a 0a01 	add.w	sl, sl, #1
 8003eee:	9304      	str	r3, [sp, #16]
 8003ef0:	9307      	str	r3, [sp, #28]
 8003ef2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ef6:	931a      	str	r3, [sp, #104]	; 0x68
 8003ef8:	4654      	mov	r4, sl
 8003efa:	2205      	movs	r2, #5
 8003efc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f00:	4850      	ldr	r0, [pc, #320]	; (8004044 <_svfiprintf_r+0x1e8>)
 8003f02:	f7fc f96d 	bl	80001e0 <memchr>
 8003f06:	9a04      	ldr	r2, [sp, #16]
 8003f08:	b9d8      	cbnz	r0, 8003f42 <_svfiprintf_r+0xe6>
 8003f0a:	06d0      	lsls	r0, r2, #27
 8003f0c:	bf44      	itt	mi
 8003f0e:	2320      	movmi	r3, #32
 8003f10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f14:	0711      	lsls	r1, r2, #28
 8003f16:	bf44      	itt	mi
 8003f18:	232b      	movmi	r3, #43	; 0x2b
 8003f1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f1e:	f89a 3000 	ldrb.w	r3, [sl]
 8003f22:	2b2a      	cmp	r3, #42	; 0x2a
 8003f24:	d015      	beq.n	8003f52 <_svfiprintf_r+0xf6>
 8003f26:	9a07      	ldr	r2, [sp, #28]
 8003f28:	4654      	mov	r4, sl
 8003f2a:	2000      	movs	r0, #0
 8003f2c:	f04f 0c0a 	mov.w	ip, #10
 8003f30:	4621      	mov	r1, r4
 8003f32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f36:	3b30      	subs	r3, #48	; 0x30
 8003f38:	2b09      	cmp	r3, #9
 8003f3a:	d94d      	bls.n	8003fd8 <_svfiprintf_r+0x17c>
 8003f3c:	b1b0      	cbz	r0, 8003f6c <_svfiprintf_r+0x110>
 8003f3e:	9207      	str	r2, [sp, #28]
 8003f40:	e014      	b.n	8003f6c <_svfiprintf_r+0x110>
 8003f42:	eba0 0308 	sub.w	r3, r0, r8
 8003f46:	fa09 f303 	lsl.w	r3, r9, r3
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	9304      	str	r3, [sp, #16]
 8003f4e:	46a2      	mov	sl, r4
 8003f50:	e7d2      	b.n	8003ef8 <_svfiprintf_r+0x9c>
 8003f52:	9b03      	ldr	r3, [sp, #12]
 8003f54:	1d19      	adds	r1, r3, #4
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	9103      	str	r1, [sp, #12]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	bfbb      	ittet	lt
 8003f5e:	425b      	neglt	r3, r3
 8003f60:	f042 0202 	orrlt.w	r2, r2, #2
 8003f64:	9307      	strge	r3, [sp, #28]
 8003f66:	9307      	strlt	r3, [sp, #28]
 8003f68:	bfb8      	it	lt
 8003f6a:	9204      	strlt	r2, [sp, #16]
 8003f6c:	7823      	ldrb	r3, [r4, #0]
 8003f6e:	2b2e      	cmp	r3, #46	; 0x2e
 8003f70:	d10c      	bne.n	8003f8c <_svfiprintf_r+0x130>
 8003f72:	7863      	ldrb	r3, [r4, #1]
 8003f74:	2b2a      	cmp	r3, #42	; 0x2a
 8003f76:	d134      	bne.n	8003fe2 <_svfiprintf_r+0x186>
 8003f78:	9b03      	ldr	r3, [sp, #12]
 8003f7a:	1d1a      	adds	r2, r3, #4
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	9203      	str	r2, [sp, #12]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	bfb8      	it	lt
 8003f84:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f88:	3402      	adds	r4, #2
 8003f8a:	9305      	str	r3, [sp, #20]
 8003f8c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004054 <_svfiprintf_r+0x1f8>
 8003f90:	7821      	ldrb	r1, [r4, #0]
 8003f92:	2203      	movs	r2, #3
 8003f94:	4650      	mov	r0, sl
 8003f96:	f7fc f923 	bl	80001e0 <memchr>
 8003f9a:	b138      	cbz	r0, 8003fac <_svfiprintf_r+0x150>
 8003f9c:	9b04      	ldr	r3, [sp, #16]
 8003f9e:	eba0 000a 	sub.w	r0, r0, sl
 8003fa2:	2240      	movs	r2, #64	; 0x40
 8003fa4:	4082      	lsls	r2, r0
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	3401      	adds	r4, #1
 8003faa:	9304      	str	r3, [sp, #16]
 8003fac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fb0:	4825      	ldr	r0, [pc, #148]	; (8004048 <_svfiprintf_r+0x1ec>)
 8003fb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003fb6:	2206      	movs	r2, #6
 8003fb8:	f7fc f912 	bl	80001e0 <memchr>
 8003fbc:	2800      	cmp	r0, #0
 8003fbe:	d038      	beq.n	8004032 <_svfiprintf_r+0x1d6>
 8003fc0:	4b22      	ldr	r3, [pc, #136]	; (800404c <_svfiprintf_r+0x1f0>)
 8003fc2:	bb1b      	cbnz	r3, 800400c <_svfiprintf_r+0x1b0>
 8003fc4:	9b03      	ldr	r3, [sp, #12]
 8003fc6:	3307      	adds	r3, #7
 8003fc8:	f023 0307 	bic.w	r3, r3, #7
 8003fcc:	3308      	adds	r3, #8
 8003fce:	9303      	str	r3, [sp, #12]
 8003fd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fd2:	4433      	add	r3, r6
 8003fd4:	9309      	str	r3, [sp, #36]	; 0x24
 8003fd6:	e768      	b.n	8003eaa <_svfiprintf_r+0x4e>
 8003fd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8003fdc:	460c      	mov	r4, r1
 8003fde:	2001      	movs	r0, #1
 8003fe0:	e7a6      	b.n	8003f30 <_svfiprintf_r+0xd4>
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	3401      	adds	r4, #1
 8003fe6:	9305      	str	r3, [sp, #20]
 8003fe8:	4619      	mov	r1, r3
 8003fea:	f04f 0c0a 	mov.w	ip, #10
 8003fee:	4620      	mov	r0, r4
 8003ff0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ff4:	3a30      	subs	r2, #48	; 0x30
 8003ff6:	2a09      	cmp	r2, #9
 8003ff8:	d903      	bls.n	8004002 <_svfiprintf_r+0x1a6>
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d0c6      	beq.n	8003f8c <_svfiprintf_r+0x130>
 8003ffe:	9105      	str	r1, [sp, #20]
 8004000:	e7c4      	b.n	8003f8c <_svfiprintf_r+0x130>
 8004002:	fb0c 2101 	mla	r1, ip, r1, r2
 8004006:	4604      	mov	r4, r0
 8004008:	2301      	movs	r3, #1
 800400a:	e7f0      	b.n	8003fee <_svfiprintf_r+0x192>
 800400c:	ab03      	add	r3, sp, #12
 800400e:	9300      	str	r3, [sp, #0]
 8004010:	462a      	mov	r2, r5
 8004012:	4b0f      	ldr	r3, [pc, #60]	; (8004050 <_svfiprintf_r+0x1f4>)
 8004014:	a904      	add	r1, sp, #16
 8004016:	4638      	mov	r0, r7
 8004018:	f3af 8000 	nop.w
 800401c:	1c42      	adds	r2, r0, #1
 800401e:	4606      	mov	r6, r0
 8004020:	d1d6      	bne.n	8003fd0 <_svfiprintf_r+0x174>
 8004022:	89ab      	ldrh	r3, [r5, #12]
 8004024:	065b      	lsls	r3, r3, #25
 8004026:	f53f af2d 	bmi.w	8003e84 <_svfiprintf_r+0x28>
 800402a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800402c:	b01d      	add	sp, #116	; 0x74
 800402e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004032:	ab03      	add	r3, sp, #12
 8004034:	9300      	str	r3, [sp, #0]
 8004036:	462a      	mov	r2, r5
 8004038:	4b05      	ldr	r3, [pc, #20]	; (8004050 <_svfiprintf_r+0x1f4>)
 800403a:	a904      	add	r1, sp, #16
 800403c:	4638      	mov	r0, r7
 800403e:	f000 f879 	bl	8004134 <_printf_i>
 8004042:	e7eb      	b.n	800401c <_svfiprintf_r+0x1c0>
 8004044:	08004dca 	.word	0x08004dca
 8004048:	08004dd4 	.word	0x08004dd4
 800404c:	00000000 	.word	0x00000000
 8004050:	08003da9 	.word	0x08003da9
 8004054:	08004dd0 	.word	0x08004dd0

08004058 <_printf_common>:
 8004058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800405c:	4616      	mov	r6, r2
 800405e:	4699      	mov	r9, r3
 8004060:	688a      	ldr	r2, [r1, #8]
 8004062:	690b      	ldr	r3, [r1, #16]
 8004064:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004068:	4293      	cmp	r3, r2
 800406a:	bfb8      	it	lt
 800406c:	4613      	movlt	r3, r2
 800406e:	6033      	str	r3, [r6, #0]
 8004070:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004074:	4607      	mov	r7, r0
 8004076:	460c      	mov	r4, r1
 8004078:	b10a      	cbz	r2, 800407e <_printf_common+0x26>
 800407a:	3301      	adds	r3, #1
 800407c:	6033      	str	r3, [r6, #0]
 800407e:	6823      	ldr	r3, [r4, #0]
 8004080:	0699      	lsls	r1, r3, #26
 8004082:	bf42      	ittt	mi
 8004084:	6833      	ldrmi	r3, [r6, #0]
 8004086:	3302      	addmi	r3, #2
 8004088:	6033      	strmi	r3, [r6, #0]
 800408a:	6825      	ldr	r5, [r4, #0]
 800408c:	f015 0506 	ands.w	r5, r5, #6
 8004090:	d106      	bne.n	80040a0 <_printf_common+0x48>
 8004092:	f104 0a19 	add.w	sl, r4, #25
 8004096:	68e3      	ldr	r3, [r4, #12]
 8004098:	6832      	ldr	r2, [r6, #0]
 800409a:	1a9b      	subs	r3, r3, r2
 800409c:	42ab      	cmp	r3, r5
 800409e:	dc26      	bgt.n	80040ee <_printf_common+0x96>
 80040a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80040a4:	1e13      	subs	r3, r2, #0
 80040a6:	6822      	ldr	r2, [r4, #0]
 80040a8:	bf18      	it	ne
 80040aa:	2301      	movne	r3, #1
 80040ac:	0692      	lsls	r2, r2, #26
 80040ae:	d42b      	bmi.n	8004108 <_printf_common+0xb0>
 80040b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040b4:	4649      	mov	r1, r9
 80040b6:	4638      	mov	r0, r7
 80040b8:	47c0      	blx	r8
 80040ba:	3001      	adds	r0, #1
 80040bc:	d01e      	beq.n	80040fc <_printf_common+0xa4>
 80040be:	6823      	ldr	r3, [r4, #0]
 80040c0:	6922      	ldr	r2, [r4, #16]
 80040c2:	f003 0306 	and.w	r3, r3, #6
 80040c6:	2b04      	cmp	r3, #4
 80040c8:	bf02      	ittt	eq
 80040ca:	68e5      	ldreq	r5, [r4, #12]
 80040cc:	6833      	ldreq	r3, [r6, #0]
 80040ce:	1aed      	subeq	r5, r5, r3
 80040d0:	68a3      	ldr	r3, [r4, #8]
 80040d2:	bf0c      	ite	eq
 80040d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040d8:	2500      	movne	r5, #0
 80040da:	4293      	cmp	r3, r2
 80040dc:	bfc4      	itt	gt
 80040de:	1a9b      	subgt	r3, r3, r2
 80040e0:	18ed      	addgt	r5, r5, r3
 80040e2:	2600      	movs	r6, #0
 80040e4:	341a      	adds	r4, #26
 80040e6:	42b5      	cmp	r5, r6
 80040e8:	d11a      	bne.n	8004120 <_printf_common+0xc8>
 80040ea:	2000      	movs	r0, #0
 80040ec:	e008      	b.n	8004100 <_printf_common+0xa8>
 80040ee:	2301      	movs	r3, #1
 80040f0:	4652      	mov	r2, sl
 80040f2:	4649      	mov	r1, r9
 80040f4:	4638      	mov	r0, r7
 80040f6:	47c0      	blx	r8
 80040f8:	3001      	adds	r0, #1
 80040fa:	d103      	bne.n	8004104 <_printf_common+0xac>
 80040fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004104:	3501      	adds	r5, #1
 8004106:	e7c6      	b.n	8004096 <_printf_common+0x3e>
 8004108:	18e1      	adds	r1, r4, r3
 800410a:	1c5a      	adds	r2, r3, #1
 800410c:	2030      	movs	r0, #48	; 0x30
 800410e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004112:	4422      	add	r2, r4
 8004114:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004118:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800411c:	3302      	adds	r3, #2
 800411e:	e7c7      	b.n	80040b0 <_printf_common+0x58>
 8004120:	2301      	movs	r3, #1
 8004122:	4622      	mov	r2, r4
 8004124:	4649      	mov	r1, r9
 8004126:	4638      	mov	r0, r7
 8004128:	47c0      	blx	r8
 800412a:	3001      	adds	r0, #1
 800412c:	d0e6      	beq.n	80040fc <_printf_common+0xa4>
 800412e:	3601      	adds	r6, #1
 8004130:	e7d9      	b.n	80040e6 <_printf_common+0x8e>
	...

08004134 <_printf_i>:
 8004134:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004138:	7e0f      	ldrb	r7, [r1, #24]
 800413a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800413c:	2f78      	cmp	r7, #120	; 0x78
 800413e:	4691      	mov	r9, r2
 8004140:	4680      	mov	r8, r0
 8004142:	460c      	mov	r4, r1
 8004144:	469a      	mov	sl, r3
 8004146:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800414a:	d807      	bhi.n	800415c <_printf_i+0x28>
 800414c:	2f62      	cmp	r7, #98	; 0x62
 800414e:	d80a      	bhi.n	8004166 <_printf_i+0x32>
 8004150:	2f00      	cmp	r7, #0
 8004152:	f000 80d4 	beq.w	80042fe <_printf_i+0x1ca>
 8004156:	2f58      	cmp	r7, #88	; 0x58
 8004158:	f000 80c0 	beq.w	80042dc <_printf_i+0x1a8>
 800415c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004160:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004164:	e03a      	b.n	80041dc <_printf_i+0xa8>
 8004166:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800416a:	2b15      	cmp	r3, #21
 800416c:	d8f6      	bhi.n	800415c <_printf_i+0x28>
 800416e:	a101      	add	r1, pc, #4	; (adr r1, 8004174 <_printf_i+0x40>)
 8004170:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004174:	080041cd 	.word	0x080041cd
 8004178:	080041e1 	.word	0x080041e1
 800417c:	0800415d 	.word	0x0800415d
 8004180:	0800415d 	.word	0x0800415d
 8004184:	0800415d 	.word	0x0800415d
 8004188:	0800415d 	.word	0x0800415d
 800418c:	080041e1 	.word	0x080041e1
 8004190:	0800415d 	.word	0x0800415d
 8004194:	0800415d 	.word	0x0800415d
 8004198:	0800415d 	.word	0x0800415d
 800419c:	0800415d 	.word	0x0800415d
 80041a0:	080042e5 	.word	0x080042e5
 80041a4:	0800420d 	.word	0x0800420d
 80041a8:	0800429f 	.word	0x0800429f
 80041ac:	0800415d 	.word	0x0800415d
 80041b0:	0800415d 	.word	0x0800415d
 80041b4:	08004307 	.word	0x08004307
 80041b8:	0800415d 	.word	0x0800415d
 80041bc:	0800420d 	.word	0x0800420d
 80041c0:	0800415d 	.word	0x0800415d
 80041c4:	0800415d 	.word	0x0800415d
 80041c8:	080042a7 	.word	0x080042a7
 80041cc:	682b      	ldr	r3, [r5, #0]
 80041ce:	1d1a      	adds	r2, r3, #4
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	602a      	str	r2, [r5, #0]
 80041d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041dc:	2301      	movs	r3, #1
 80041de:	e09f      	b.n	8004320 <_printf_i+0x1ec>
 80041e0:	6820      	ldr	r0, [r4, #0]
 80041e2:	682b      	ldr	r3, [r5, #0]
 80041e4:	0607      	lsls	r7, r0, #24
 80041e6:	f103 0104 	add.w	r1, r3, #4
 80041ea:	6029      	str	r1, [r5, #0]
 80041ec:	d501      	bpl.n	80041f2 <_printf_i+0xbe>
 80041ee:	681e      	ldr	r6, [r3, #0]
 80041f0:	e003      	b.n	80041fa <_printf_i+0xc6>
 80041f2:	0646      	lsls	r6, r0, #25
 80041f4:	d5fb      	bpl.n	80041ee <_printf_i+0xba>
 80041f6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80041fa:	2e00      	cmp	r6, #0
 80041fc:	da03      	bge.n	8004206 <_printf_i+0xd2>
 80041fe:	232d      	movs	r3, #45	; 0x2d
 8004200:	4276      	negs	r6, r6
 8004202:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004206:	485a      	ldr	r0, [pc, #360]	; (8004370 <_printf_i+0x23c>)
 8004208:	230a      	movs	r3, #10
 800420a:	e012      	b.n	8004232 <_printf_i+0xfe>
 800420c:	682b      	ldr	r3, [r5, #0]
 800420e:	6820      	ldr	r0, [r4, #0]
 8004210:	1d19      	adds	r1, r3, #4
 8004212:	6029      	str	r1, [r5, #0]
 8004214:	0605      	lsls	r5, r0, #24
 8004216:	d501      	bpl.n	800421c <_printf_i+0xe8>
 8004218:	681e      	ldr	r6, [r3, #0]
 800421a:	e002      	b.n	8004222 <_printf_i+0xee>
 800421c:	0641      	lsls	r1, r0, #25
 800421e:	d5fb      	bpl.n	8004218 <_printf_i+0xe4>
 8004220:	881e      	ldrh	r6, [r3, #0]
 8004222:	4853      	ldr	r0, [pc, #332]	; (8004370 <_printf_i+0x23c>)
 8004224:	2f6f      	cmp	r7, #111	; 0x6f
 8004226:	bf0c      	ite	eq
 8004228:	2308      	moveq	r3, #8
 800422a:	230a      	movne	r3, #10
 800422c:	2100      	movs	r1, #0
 800422e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004232:	6865      	ldr	r5, [r4, #4]
 8004234:	60a5      	str	r5, [r4, #8]
 8004236:	2d00      	cmp	r5, #0
 8004238:	bfa2      	ittt	ge
 800423a:	6821      	ldrge	r1, [r4, #0]
 800423c:	f021 0104 	bicge.w	r1, r1, #4
 8004240:	6021      	strge	r1, [r4, #0]
 8004242:	b90e      	cbnz	r6, 8004248 <_printf_i+0x114>
 8004244:	2d00      	cmp	r5, #0
 8004246:	d04b      	beq.n	80042e0 <_printf_i+0x1ac>
 8004248:	4615      	mov	r5, r2
 800424a:	fbb6 f1f3 	udiv	r1, r6, r3
 800424e:	fb03 6711 	mls	r7, r3, r1, r6
 8004252:	5dc7      	ldrb	r7, [r0, r7]
 8004254:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004258:	4637      	mov	r7, r6
 800425a:	42bb      	cmp	r3, r7
 800425c:	460e      	mov	r6, r1
 800425e:	d9f4      	bls.n	800424a <_printf_i+0x116>
 8004260:	2b08      	cmp	r3, #8
 8004262:	d10b      	bne.n	800427c <_printf_i+0x148>
 8004264:	6823      	ldr	r3, [r4, #0]
 8004266:	07de      	lsls	r6, r3, #31
 8004268:	d508      	bpl.n	800427c <_printf_i+0x148>
 800426a:	6923      	ldr	r3, [r4, #16]
 800426c:	6861      	ldr	r1, [r4, #4]
 800426e:	4299      	cmp	r1, r3
 8004270:	bfde      	ittt	le
 8004272:	2330      	movle	r3, #48	; 0x30
 8004274:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004278:	f105 35ff 	addle.w	r5, r5, #4294967295
 800427c:	1b52      	subs	r2, r2, r5
 800427e:	6122      	str	r2, [r4, #16]
 8004280:	f8cd a000 	str.w	sl, [sp]
 8004284:	464b      	mov	r3, r9
 8004286:	aa03      	add	r2, sp, #12
 8004288:	4621      	mov	r1, r4
 800428a:	4640      	mov	r0, r8
 800428c:	f7ff fee4 	bl	8004058 <_printf_common>
 8004290:	3001      	adds	r0, #1
 8004292:	d14a      	bne.n	800432a <_printf_i+0x1f6>
 8004294:	f04f 30ff 	mov.w	r0, #4294967295
 8004298:	b004      	add	sp, #16
 800429a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800429e:	6823      	ldr	r3, [r4, #0]
 80042a0:	f043 0320 	orr.w	r3, r3, #32
 80042a4:	6023      	str	r3, [r4, #0]
 80042a6:	4833      	ldr	r0, [pc, #204]	; (8004374 <_printf_i+0x240>)
 80042a8:	2778      	movs	r7, #120	; 0x78
 80042aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80042ae:	6823      	ldr	r3, [r4, #0]
 80042b0:	6829      	ldr	r1, [r5, #0]
 80042b2:	061f      	lsls	r7, r3, #24
 80042b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80042b8:	d402      	bmi.n	80042c0 <_printf_i+0x18c>
 80042ba:	065f      	lsls	r7, r3, #25
 80042bc:	bf48      	it	mi
 80042be:	b2b6      	uxthmi	r6, r6
 80042c0:	07df      	lsls	r7, r3, #31
 80042c2:	bf48      	it	mi
 80042c4:	f043 0320 	orrmi.w	r3, r3, #32
 80042c8:	6029      	str	r1, [r5, #0]
 80042ca:	bf48      	it	mi
 80042cc:	6023      	strmi	r3, [r4, #0]
 80042ce:	b91e      	cbnz	r6, 80042d8 <_printf_i+0x1a4>
 80042d0:	6823      	ldr	r3, [r4, #0]
 80042d2:	f023 0320 	bic.w	r3, r3, #32
 80042d6:	6023      	str	r3, [r4, #0]
 80042d8:	2310      	movs	r3, #16
 80042da:	e7a7      	b.n	800422c <_printf_i+0xf8>
 80042dc:	4824      	ldr	r0, [pc, #144]	; (8004370 <_printf_i+0x23c>)
 80042de:	e7e4      	b.n	80042aa <_printf_i+0x176>
 80042e0:	4615      	mov	r5, r2
 80042e2:	e7bd      	b.n	8004260 <_printf_i+0x12c>
 80042e4:	682b      	ldr	r3, [r5, #0]
 80042e6:	6826      	ldr	r6, [r4, #0]
 80042e8:	6961      	ldr	r1, [r4, #20]
 80042ea:	1d18      	adds	r0, r3, #4
 80042ec:	6028      	str	r0, [r5, #0]
 80042ee:	0635      	lsls	r5, r6, #24
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	d501      	bpl.n	80042f8 <_printf_i+0x1c4>
 80042f4:	6019      	str	r1, [r3, #0]
 80042f6:	e002      	b.n	80042fe <_printf_i+0x1ca>
 80042f8:	0670      	lsls	r0, r6, #25
 80042fa:	d5fb      	bpl.n	80042f4 <_printf_i+0x1c0>
 80042fc:	8019      	strh	r1, [r3, #0]
 80042fe:	2300      	movs	r3, #0
 8004300:	6123      	str	r3, [r4, #16]
 8004302:	4615      	mov	r5, r2
 8004304:	e7bc      	b.n	8004280 <_printf_i+0x14c>
 8004306:	682b      	ldr	r3, [r5, #0]
 8004308:	1d1a      	adds	r2, r3, #4
 800430a:	602a      	str	r2, [r5, #0]
 800430c:	681d      	ldr	r5, [r3, #0]
 800430e:	6862      	ldr	r2, [r4, #4]
 8004310:	2100      	movs	r1, #0
 8004312:	4628      	mov	r0, r5
 8004314:	f7fb ff64 	bl	80001e0 <memchr>
 8004318:	b108      	cbz	r0, 800431e <_printf_i+0x1ea>
 800431a:	1b40      	subs	r0, r0, r5
 800431c:	6060      	str	r0, [r4, #4]
 800431e:	6863      	ldr	r3, [r4, #4]
 8004320:	6123      	str	r3, [r4, #16]
 8004322:	2300      	movs	r3, #0
 8004324:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004328:	e7aa      	b.n	8004280 <_printf_i+0x14c>
 800432a:	6923      	ldr	r3, [r4, #16]
 800432c:	462a      	mov	r2, r5
 800432e:	4649      	mov	r1, r9
 8004330:	4640      	mov	r0, r8
 8004332:	47d0      	blx	sl
 8004334:	3001      	adds	r0, #1
 8004336:	d0ad      	beq.n	8004294 <_printf_i+0x160>
 8004338:	6823      	ldr	r3, [r4, #0]
 800433a:	079b      	lsls	r3, r3, #30
 800433c:	d413      	bmi.n	8004366 <_printf_i+0x232>
 800433e:	68e0      	ldr	r0, [r4, #12]
 8004340:	9b03      	ldr	r3, [sp, #12]
 8004342:	4298      	cmp	r0, r3
 8004344:	bfb8      	it	lt
 8004346:	4618      	movlt	r0, r3
 8004348:	e7a6      	b.n	8004298 <_printf_i+0x164>
 800434a:	2301      	movs	r3, #1
 800434c:	4632      	mov	r2, r6
 800434e:	4649      	mov	r1, r9
 8004350:	4640      	mov	r0, r8
 8004352:	47d0      	blx	sl
 8004354:	3001      	adds	r0, #1
 8004356:	d09d      	beq.n	8004294 <_printf_i+0x160>
 8004358:	3501      	adds	r5, #1
 800435a:	68e3      	ldr	r3, [r4, #12]
 800435c:	9903      	ldr	r1, [sp, #12]
 800435e:	1a5b      	subs	r3, r3, r1
 8004360:	42ab      	cmp	r3, r5
 8004362:	dcf2      	bgt.n	800434a <_printf_i+0x216>
 8004364:	e7eb      	b.n	800433e <_printf_i+0x20a>
 8004366:	2500      	movs	r5, #0
 8004368:	f104 0619 	add.w	r6, r4, #25
 800436c:	e7f5      	b.n	800435a <_printf_i+0x226>
 800436e:	bf00      	nop
 8004370:	08004ddb 	.word	0x08004ddb
 8004374:	08004dec 	.word	0x08004dec

08004378 <__sflush_r>:
 8004378:	898a      	ldrh	r2, [r1, #12]
 800437a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800437e:	4605      	mov	r5, r0
 8004380:	0710      	lsls	r0, r2, #28
 8004382:	460c      	mov	r4, r1
 8004384:	d458      	bmi.n	8004438 <__sflush_r+0xc0>
 8004386:	684b      	ldr	r3, [r1, #4]
 8004388:	2b00      	cmp	r3, #0
 800438a:	dc05      	bgt.n	8004398 <__sflush_r+0x20>
 800438c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800438e:	2b00      	cmp	r3, #0
 8004390:	dc02      	bgt.n	8004398 <__sflush_r+0x20>
 8004392:	2000      	movs	r0, #0
 8004394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004398:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800439a:	2e00      	cmp	r6, #0
 800439c:	d0f9      	beq.n	8004392 <__sflush_r+0x1a>
 800439e:	2300      	movs	r3, #0
 80043a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80043a4:	682f      	ldr	r7, [r5, #0]
 80043a6:	6a21      	ldr	r1, [r4, #32]
 80043a8:	602b      	str	r3, [r5, #0]
 80043aa:	d032      	beq.n	8004412 <__sflush_r+0x9a>
 80043ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80043ae:	89a3      	ldrh	r3, [r4, #12]
 80043b0:	075a      	lsls	r2, r3, #29
 80043b2:	d505      	bpl.n	80043c0 <__sflush_r+0x48>
 80043b4:	6863      	ldr	r3, [r4, #4]
 80043b6:	1ac0      	subs	r0, r0, r3
 80043b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80043ba:	b10b      	cbz	r3, 80043c0 <__sflush_r+0x48>
 80043bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80043be:	1ac0      	subs	r0, r0, r3
 80043c0:	2300      	movs	r3, #0
 80043c2:	4602      	mov	r2, r0
 80043c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80043c6:	6a21      	ldr	r1, [r4, #32]
 80043c8:	4628      	mov	r0, r5
 80043ca:	47b0      	blx	r6
 80043cc:	1c43      	adds	r3, r0, #1
 80043ce:	89a3      	ldrh	r3, [r4, #12]
 80043d0:	d106      	bne.n	80043e0 <__sflush_r+0x68>
 80043d2:	6829      	ldr	r1, [r5, #0]
 80043d4:	291d      	cmp	r1, #29
 80043d6:	d82b      	bhi.n	8004430 <__sflush_r+0xb8>
 80043d8:	4a29      	ldr	r2, [pc, #164]	; (8004480 <__sflush_r+0x108>)
 80043da:	410a      	asrs	r2, r1
 80043dc:	07d6      	lsls	r6, r2, #31
 80043de:	d427      	bmi.n	8004430 <__sflush_r+0xb8>
 80043e0:	2200      	movs	r2, #0
 80043e2:	6062      	str	r2, [r4, #4]
 80043e4:	04d9      	lsls	r1, r3, #19
 80043e6:	6922      	ldr	r2, [r4, #16]
 80043e8:	6022      	str	r2, [r4, #0]
 80043ea:	d504      	bpl.n	80043f6 <__sflush_r+0x7e>
 80043ec:	1c42      	adds	r2, r0, #1
 80043ee:	d101      	bne.n	80043f4 <__sflush_r+0x7c>
 80043f0:	682b      	ldr	r3, [r5, #0]
 80043f2:	b903      	cbnz	r3, 80043f6 <__sflush_r+0x7e>
 80043f4:	6560      	str	r0, [r4, #84]	; 0x54
 80043f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043f8:	602f      	str	r7, [r5, #0]
 80043fa:	2900      	cmp	r1, #0
 80043fc:	d0c9      	beq.n	8004392 <__sflush_r+0x1a>
 80043fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004402:	4299      	cmp	r1, r3
 8004404:	d002      	beq.n	800440c <__sflush_r+0x94>
 8004406:	4628      	mov	r0, r5
 8004408:	f7ff fbce 	bl	8003ba8 <_free_r>
 800440c:	2000      	movs	r0, #0
 800440e:	6360      	str	r0, [r4, #52]	; 0x34
 8004410:	e7c0      	b.n	8004394 <__sflush_r+0x1c>
 8004412:	2301      	movs	r3, #1
 8004414:	4628      	mov	r0, r5
 8004416:	47b0      	blx	r6
 8004418:	1c41      	adds	r1, r0, #1
 800441a:	d1c8      	bne.n	80043ae <__sflush_r+0x36>
 800441c:	682b      	ldr	r3, [r5, #0]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d0c5      	beq.n	80043ae <__sflush_r+0x36>
 8004422:	2b1d      	cmp	r3, #29
 8004424:	d001      	beq.n	800442a <__sflush_r+0xb2>
 8004426:	2b16      	cmp	r3, #22
 8004428:	d101      	bne.n	800442e <__sflush_r+0xb6>
 800442a:	602f      	str	r7, [r5, #0]
 800442c:	e7b1      	b.n	8004392 <__sflush_r+0x1a>
 800442e:	89a3      	ldrh	r3, [r4, #12]
 8004430:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004434:	81a3      	strh	r3, [r4, #12]
 8004436:	e7ad      	b.n	8004394 <__sflush_r+0x1c>
 8004438:	690f      	ldr	r7, [r1, #16]
 800443a:	2f00      	cmp	r7, #0
 800443c:	d0a9      	beq.n	8004392 <__sflush_r+0x1a>
 800443e:	0793      	lsls	r3, r2, #30
 8004440:	680e      	ldr	r6, [r1, #0]
 8004442:	bf08      	it	eq
 8004444:	694b      	ldreq	r3, [r1, #20]
 8004446:	600f      	str	r7, [r1, #0]
 8004448:	bf18      	it	ne
 800444a:	2300      	movne	r3, #0
 800444c:	eba6 0807 	sub.w	r8, r6, r7
 8004450:	608b      	str	r3, [r1, #8]
 8004452:	f1b8 0f00 	cmp.w	r8, #0
 8004456:	dd9c      	ble.n	8004392 <__sflush_r+0x1a>
 8004458:	6a21      	ldr	r1, [r4, #32]
 800445a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800445c:	4643      	mov	r3, r8
 800445e:	463a      	mov	r2, r7
 8004460:	4628      	mov	r0, r5
 8004462:	47b0      	blx	r6
 8004464:	2800      	cmp	r0, #0
 8004466:	dc06      	bgt.n	8004476 <__sflush_r+0xfe>
 8004468:	89a3      	ldrh	r3, [r4, #12]
 800446a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800446e:	81a3      	strh	r3, [r4, #12]
 8004470:	f04f 30ff 	mov.w	r0, #4294967295
 8004474:	e78e      	b.n	8004394 <__sflush_r+0x1c>
 8004476:	4407      	add	r7, r0
 8004478:	eba8 0800 	sub.w	r8, r8, r0
 800447c:	e7e9      	b.n	8004452 <__sflush_r+0xda>
 800447e:	bf00      	nop
 8004480:	dfbffffe 	.word	0xdfbffffe

08004484 <_fflush_r>:
 8004484:	b538      	push	{r3, r4, r5, lr}
 8004486:	690b      	ldr	r3, [r1, #16]
 8004488:	4605      	mov	r5, r0
 800448a:	460c      	mov	r4, r1
 800448c:	b913      	cbnz	r3, 8004494 <_fflush_r+0x10>
 800448e:	2500      	movs	r5, #0
 8004490:	4628      	mov	r0, r5
 8004492:	bd38      	pop	{r3, r4, r5, pc}
 8004494:	b118      	cbz	r0, 800449e <_fflush_r+0x1a>
 8004496:	6a03      	ldr	r3, [r0, #32]
 8004498:	b90b      	cbnz	r3, 800449e <_fflush_r+0x1a>
 800449a:	f7ff f9cf 	bl	800383c <__sinit>
 800449e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d0f3      	beq.n	800448e <_fflush_r+0xa>
 80044a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80044a8:	07d0      	lsls	r0, r2, #31
 80044aa:	d404      	bmi.n	80044b6 <_fflush_r+0x32>
 80044ac:	0599      	lsls	r1, r3, #22
 80044ae:	d402      	bmi.n	80044b6 <_fflush_r+0x32>
 80044b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044b2:	f7ff fb58 	bl	8003b66 <__retarget_lock_acquire_recursive>
 80044b6:	4628      	mov	r0, r5
 80044b8:	4621      	mov	r1, r4
 80044ba:	f7ff ff5d 	bl	8004378 <__sflush_r>
 80044be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80044c0:	07da      	lsls	r2, r3, #31
 80044c2:	4605      	mov	r5, r0
 80044c4:	d4e4      	bmi.n	8004490 <_fflush_r+0xc>
 80044c6:	89a3      	ldrh	r3, [r4, #12]
 80044c8:	059b      	lsls	r3, r3, #22
 80044ca:	d4e1      	bmi.n	8004490 <_fflush_r+0xc>
 80044cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044ce:	f7ff fb4b 	bl	8003b68 <__retarget_lock_release_recursive>
 80044d2:	e7dd      	b.n	8004490 <_fflush_r+0xc>

080044d4 <fiprintf>:
 80044d4:	b40e      	push	{r1, r2, r3}
 80044d6:	b503      	push	{r0, r1, lr}
 80044d8:	4601      	mov	r1, r0
 80044da:	ab03      	add	r3, sp, #12
 80044dc:	4805      	ldr	r0, [pc, #20]	; (80044f4 <fiprintf+0x20>)
 80044de:	f853 2b04 	ldr.w	r2, [r3], #4
 80044e2:	6800      	ldr	r0, [r0, #0]
 80044e4:	9301      	str	r3, [sp, #4]
 80044e6:	f000 f89f 	bl	8004628 <_vfiprintf_r>
 80044ea:	b002      	add	sp, #8
 80044ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80044f0:	b003      	add	sp, #12
 80044f2:	4770      	bx	lr
 80044f4:	2000009c 	.word	0x2000009c

080044f8 <memmove>:
 80044f8:	4288      	cmp	r0, r1
 80044fa:	b510      	push	{r4, lr}
 80044fc:	eb01 0402 	add.w	r4, r1, r2
 8004500:	d902      	bls.n	8004508 <memmove+0x10>
 8004502:	4284      	cmp	r4, r0
 8004504:	4623      	mov	r3, r4
 8004506:	d807      	bhi.n	8004518 <memmove+0x20>
 8004508:	1e43      	subs	r3, r0, #1
 800450a:	42a1      	cmp	r1, r4
 800450c:	d008      	beq.n	8004520 <memmove+0x28>
 800450e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004512:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004516:	e7f8      	b.n	800450a <memmove+0x12>
 8004518:	4402      	add	r2, r0
 800451a:	4601      	mov	r1, r0
 800451c:	428a      	cmp	r2, r1
 800451e:	d100      	bne.n	8004522 <memmove+0x2a>
 8004520:	bd10      	pop	{r4, pc}
 8004522:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004526:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800452a:	e7f7      	b.n	800451c <memmove+0x24>

0800452c <_sbrk_r>:
 800452c:	b538      	push	{r3, r4, r5, lr}
 800452e:	4d06      	ldr	r5, [pc, #24]	; (8004548 <_sbrk_r+0x1c>)
 8004530:	2300      	movs	r3, #0
 8004532:	4604      	mov	r4, r0
 8004534:	4608      	mov	r0, r1
 8004536:	602b      	str	r3, [r5, #0]
 8004538:	f7fc fa46 	bl	80009c8 <_sbrk>
 800453c:	1c43      	adds	r3, r0, #1
 800453e:	d102      	bne.n	8004546 <_sbrk_r+0x1a>
 8004540:	682b      	ldr	r3, [r5, #0]
 8004542:	b103      	cbz	r3, 8004546 <_sbrk_r+0x1a>
 8004544:	6023      	str	r3, [r4, #0]
 8004546:	bd38      	pop	{r3, r4, r5, pc}
 8004548:	200002e4 	.word	0x200002e4

0800454c <memcpy>:
 800454c:	440a      	add	r2, r1
 800454e:	4291      	cmp	r1, r2
 8004550:	f100 33ff 	add.w	r3, r0, #4294967295
 8004554:	d100      	bne.n	8004558 <memcpy+0xc>
 8004556:	4770      	bx	lr
 8004558:	b510      	push	{r4, lr}
 800455a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800455e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004562:	4291      	cmp	r1, r2
 8004564:	d1f9      	bne.n	800455a <memcpy+0xe>
 8004566:	bd10      	pop	{r4, pc}

08004568 <abort>:
 8004568:	b508      	push	{r3, lr}
 800456a:	2006      	movs	r0, #6
 800456c:	f000 fa34 	bl	80049d8 <raise>
 8004570:	2001      	movs	r0, #1
 8004572:	f7fc f9b1 	bl	80008d8 <_exit>

08004576 <_realloc_r>:
 8004576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800457a:	4680      	mov	r8, r0
 800457c:	4614      	mov	r4, r2
 800457e:	460e      	mov	r6, r1
 8004580:	b921      	cbnz	r1, 800458c <_realloc_r+0x16>
 8004582:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004586:	4611      	mov	r1, r2
 8004588:	f7ff bb82 	b.w	8003c90 <_malloc_r>
 800458c:	b92a      	cbnz	r2, 800459a <_realloc_r+0x24>
 800458e:	f7ff fb0b 	bl	8003ba8 <_free_r>
 8004592:	4625      	mov	r5, r4
 8004594:	4628      	mov	r0, r5
 8004596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800459a:	f000 fa39 	bl	8004a10 <_malloc_usable_size_r>
 800459e:	4284      	cmp	r4, r0
 80045a0:	4607      	mov	r7, r0
 80045a2:	d802      	bhi.n	80045aa <_realloc_r+0x34>
 80045a4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80045a8:	d812      	bhi.n	80045d0 <_realloc_r+0x5a>
 80045aa:	4621      	mov	r1, r4
 80045ac:	4640      	mov	r0, r8
 80045ae:	f7ff fb6f 	bl	8003c90 <_malloc_r>
 80045b2:	4605      	mov	r5, r0
 80045b4:	2800      	cmp	r0, #0
 80045b6:	d0ed      	beq.n	8004594 <_realloc_r+0x1e>
 80045b8:	42bc      	cmp	r4, r7
 80045ba:	4622      	mov	r2, r4
 80045bc:	4631      	mov	r1, r6
 80045be:	bf28      	it	cs
 80045c0:	463a      	movcs	r2, r7
 80045c2:	f7ff ffc3 	bl	800454c <memcpy>
 80045c6:	4631      	mov	r1, r6
 80045c8:	4640      	mov	r0, r8
 80045ca:	f7ff faed 	bl	8003ba8 <_free_r>
 80045ce:	e7e1      	b.n	8004594 <_realloc_r+0x1e>
 80045d0:	4635      	mov	r5, r6
 80045d2:	e7df      	b.n	8004594 <_realloc_r+0x1e>

080045d4 <__sfputc_r>:
 80045d4:	6893      	ldr	r3, [r2, #8]
 80045d6:	3b01      	subs	r3, #1
 80045d8:	2b00      	cmp	r3, #0
 80045da:	b410      	push	{r4}
 80045dc:	6093      	str	r3, [r2, #8]
 80045de:	da08      	bge.n	80045f2 <__sfputc_r+0x1e>
 80045e0:	6994      	ldr	r4, [r2, #24]
 80045e2:	42a3      	cmp	r3, r4
 80045e4:	db01      	blt.n	80045ea <__sfputc_r+0x16>
 80045e6:	290a      	cmp	r1, #10
 80045e8:	d103      	bne.n	80045f2 <__sfputc_r+0x1e>
 80045ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80045ee:	f000 b935 	b.w	800485c <__swbuf_r>
 80045f2:	6813      	ldr	r3, [r2, #0]
 80045f4:	1c58      	adds	r0, r3, #1
 80045f6:	6010      	str	r0, [r2, #0]
 80045f8:	7019      	strb	r1, [r3, #0]
 80045fa:	4608      	mov	r0, r1
 80045fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004600:	4770      	bx	lr

08004602 <__sfputs_r>:
 8004602:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004604:	4606      	mov	r6, r0
 8004606:	460f      	mov	r7, r1
 8004608:	4614      	mov	r4, r2
 800460a:	18d5      	adds	r5, r2, r3
 800460c:	42ac      	cmp	r4, r5
 800460e:	d101      	bne.n	8004614 <__sfputs_r+0x12>
 8004610:	2000      	movs	r0, #0
 8004612:	e007      	b.n	8004624 <__sfputs_r+0x22>
 8004614:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004618:	463a      	mov	r2, r7
 800461a:	4630      	mov	r0, r6
 800461c:	f7ff ffda 	bl	80045d4 <__sfputc_r>
 8004620:	1c43      	adds	r3, r0, #1
 8004622:	d1f3      	bne.n	800460c <__sfputs_r+0xa>
 8004624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004628 <_vfiprintf_r>:
 8004628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800462c:	460d      	mov	r5, r1
 800462e:	b09d      	sub	sp, #116	; 0x74
 8004630:	4614      	mov	r4, r2
 8004632:	4698      	mov	r8, r3
 8004634:	4606      	mov	r6, r0
 8004636:	b118      	cbz	r0, 8004640 <_vfiprintf_r+0x18>
 8004638:	6a03      	ldr	r3, [r0, #32]
 800463a:	b90b      	cbnz	r3, 8004640 <_vfiprintf_r+0x18>
 800463c:	f7ff f8fe 	bl	800383c <__sinit>
 8004640:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004642:	07d9      	lsls	r1, r3, #31
 8004644:	d405      	bmi.n	8004652 <_vfiprintf_r+0x2a>
 8004646:	89ab      	ldrh	r3, [r5, #12]
 8004648:	059a      	lsls	r2, r3, #22
 800464a:	d402      	bmi.n	8004652 <_vfiprintf_r+0x2a>
 800464c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800464e:	f7ff fa8a 	bl	8003b66 <__retarget_lock_acquire_recursive>
 8004652:	89ab      	ldrh	r3, [r5, #12]
 8004654:	071b      	lsls	r3, r3, #28
 8004656:	d501      	bpl.n	800465c <_vfiprintf_r+0x34>
 8004658:	692b      	ldr	r3, [r5, #16]
 800465a:	b99b      	cbnz	r3, 8004684 <_vfiprintf_r+0x5c>
 800465c:	4629      	mov	r1, r5
 800465e:	4630      	mov	r0, r6
 8004660:	f000 f93a 	bl	80048d8 <__swsetup_r>
 8004664:	b170      	cbz	r0, 8004684 <_vfiprintf_r+0x5c>
 8004666:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004668:	07dc      	lsls	r4, r3, #31
 800466a:	d504      	bpl.n	8004676 <_vfiprintf_r+0x4e>
 800466c:	f04f 30ff 	mov.w	r0, #4294967295
 8004670:	b01d      	add	sp, #116	; 0x74
 8004672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004676:	89ab      	ldrh	r3, [r5, #12]
 8004678:	0598      	lsls	r0, r3, #22
 800467a:	d4f7      	bmi.n	800466c <_vfiprintf_r+0x44>
 800467c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800467e:	f7ff fa73 	bl	8003b68 <__retarget_lock_release_recursive>
 8004682:	e7f3      	b.n	800466c <_vfiprintf_r+0x44>
 8004684:	2300      	movs	r3, #0
 8004686:	9309      	str	r3, [sp, #36]	; 0x24
 8004688:	2320      	movs	r3, #32
 800468a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800468e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004692:	2330      	movs	r3, #48	; 0x30
 8004694:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004848 <_vfiprintf_r+0x220>
 8004698:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800469c:	f04f 0901 	mov.w	r9, #1
 80046a0:	4623      	mov	r3, r4
 80046a2:	469a      	mov	sl, r3
 80046a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046a8:	b10a      	cbz	r2, 80046ae <_vfiprintf_r+0x86>
 80046aa:	2a25      	cmp	r2, #37	; 0x25
 80046ac:	d1f9      	bne.n	80046a2 <_vfiprintf_r+0x7a>
 80046ae:	ebba 0b04 	subs.w	fp, sl, r4
 80046b2:	d00b      	beq.n	80046cc <_vfiprintf_r+0xa4>
 80046b4:	465b      	mov	r3, fp
 80046b6:	4622      	mov	r2, r4
 80046b8:	4629      	mov	r1, r5
 80046ba:	4630      	mov	r0, r6
 80046bc:	f7ff ffa1 	bl	8004602 <__sfputs_r>
 80046c0:	3001      	adds	r0, #1
 80046c2:	f000 80a9 	beq.w	8004818 <_vfiprintf_r+0x1f0>
 80046c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046c8:	445a      	add	r2, fp
 80046ca:	9209      	str	r2, [sp, #36]	; 0x24
 80046cc:	f89a 3000 	ldrb.w	r3, [sl]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f000 80a1 	beq.w	8004818 <_vfiprintf_r+0x1f0>
 80046d6:	2300      	movs	r3, #0
 80046d8:	f04f 32ff 	mov.w	r2, #4294967295
 80046dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046e0:	f10a 0a01 	add.w	sl, sl, #1
 80046e4:	9304      	str	r3, [sp, #16]
 80046e6:	9307      	str	r3, [sp, #28]
 80046e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80046ec:	931a      	str	r3, [sp, #104]	; 0x68
 80046ee:	4654      	mov	r4, sl
 80046f0:	2205      	movs	r2, #5
 80046f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046f6:	4854      	ldr	r0, [pc, #336]	; (8004848 <_vfiprintf_r+0x220>)
 80046f8:	f7fb fd72 	bl	80001e0 <memchr>
 80046fc:	9a04      	ldr	r2, [sp, #16]
 80046fe:	b9d8      	cbnz	r0, 8004738 <_vfiprintf_r+0x110>
 8004700:	06d1      	lsls	r1, r2, #27
 8004702:	bf44      	itt	mi
 8004704:	2320      	movmi	r3, #32
 8004706:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800470a:	0713      	lsls	r3, r2, #28
 800470c:	bf44      	itt	mi
 800470e:	232b      	movmi	r3, #43	; 0x2b
 8004710:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004714:	f89a 3000 	ldrb.w	r3, [sl]
 8004718:	2b2a      	cmp	r3, #42	; 0x2a
 800471a:	d015      	beq.n	8004748 <_vfiprintf_r+0x120>
 800471c:	9a07      	ldr	r2, [sp, #28]
 800471e:	4654      	mov	r4, sl
 8004720:	2000      	movs	r0, #0
 8004722:	f04f 0c0a 	mov.w	ip, #10
 8004726:	4621      	mov	r1, r4
 8004728:	f811 3b01 	ldrb.w	r3, [r1], #1
 800472c:	3b30      	subs	r3, #48	; 0x30
 800472e:	2b09      	cmp	r3, #9
 8004730:	d94d      	bls.n	80047ce <_vfiprintf_r+0x1a6>
 8004732:	b1b0      	cbz	r0, 8004762 <_vfiprintf_r+0x13a>
 8004734:	9207      	str	r2, [sp, #28]
 8004736:	e014      	b.n	8004762 <_vfiprintf_r+0x13a>
 8004738:	eba0 0308 	sub.w	r3, r0, r8
 800473c:	fa09 f303 	lsl.w	r3, r9, r3
 8004740:	4313      	orrs	r3, r2
 8004742:	9304      	str	r3, [sp, #16]
 8004744:	46a2      	mov	sl, r4
 8004746:	e7d2      	b.n	80046ee <_vfiprintf_r+0xc6>
 8004748:	9b03      	ldr	r3, [sp, #12]
 800474a:	1d19      	adds	r1, r3, #4
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	9103      	str	r1, [sp, #12]
 8004750:	2b00      	cmp	r3, #0
 8004752:	bfbb      	ittet	lt
 8004754:	425b      	neglt	r3, r3
 8004756:	f042 0202 	orrlt.w	r2, r2, #2
 800475a:	9307      	strge	r3, [sp, #28]
 800475c:	9307      	strlt	r3, [sp, #28]
 800475e:	bfb8      	it	lt
 8004760:	9204      	strlt	r2, [sp, #16]
 8004762:	7823      	ldrb	r3, [r4, #0]
 8004764:	2b2e      	cmp	r3, #46	; 0x2e
 8004766:	d10c      	bne.n	8004782 <_vfiprintf_r+0x15a>
 8004768:	7863      	ldrb	r3, [r4, #1]
 800476a:	2b2a      	cmp	r3, #42	; 0x2a
 800476c:	d134      	bne.n	80047d8 <_vfiprintf_r+0x1b0>
 800476e:	9b03      	ldr	r3, [sp, #12]
 8004770:	1d1a      	adds	r2, r3, #4
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	9203      	str	r2, [sp, #12]
 8004776:	2b00      	cmp	r3, #0
 8004778:	bfb8      	it	lt
 800477a:	f04f 33ff 	movlt.w	r3, #4294967295
 800477e:	3402      	adds	r4, #2
 8004780:	9305      	str	r3, [sp, #20]
 8004782:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004858 <_vfiprintf_r+0x230>
 8004786:	7821      	ldrb	r1, [r4, #0]
 8004788:	2203      	movs	r2, #3
 800478a:	4650      	mov	r0, sl
 800478c:	f7fb fd28 	bl	80001e0 <memchr>
 8004790:	b138      	cbz	r0, 80047a2 <_vfiprintf_r+0x17a>
 8004792:	9b04      	ldr	r3, [sp, #16]
 8004794:	eba0 000a 	sub.w	r0, r0, sl
 8004798:	2240      	movs	r2, #64	; 0x40
 800479a:	4082      	lsls	r2, r0
 800479c:	4313      	orrs	r3, r2
 800479e:	3401      	adds	r4, #1
 80047a0:	9304      	str	r3, [sp, #16]
 80047a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047a6:	4829      	ldr	r0, [pc, #164]	; (800484c <_vfiprintf_r+0x224>)
 80047a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80047ac:	2206      	movs	r2, #6
 80047ae:	f7fb fd17 	bl	80001e0 <memchr>
 80047b2:	2800      	cmp	r0, #0
 80047b4:	d03f      	beq.n	8004836 <_vfiprintf_r+0x20e>
 80047b6:	4b26      	ldr	r3, [pc, #152]	; (8004850 <_vfiprintf_r+0x228>)
 80047b8:	bb1b      	cbnz	r3, 8004802 <_vfiprintf_r+0x1da>
 80047ba:	9b03      	ldr	r3, [sp, #12]
 80047bc:	3307      	adds	r3, #7
 80047be:	f023 0307 	bic.w	r3, r3, #7
 80047c2:	3308      	adds	r3, #8
 80047c4:	9303      	str	r3, [sp, #12]
 80047c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047c8:	443b      	add	r3, r7
 80047ca:	9309      	str	r3, [sp, #36]	; 0x24
 80047cc:	e768      	b.n	80046a0 <_vfiprintf_r+0x78>
 80047ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80047d2:	460c      	mov	r4, r1
 80047d4:	2001      	movs	r0, #1
 80047d6:	e7a6      	b.n	8004726 <_vfiprintf_r+0xfe>
 80047d8:	2300      	movs	r3, #0
 80047da:	3401      	adds	r4, #1
 80047dc:	9305      	str	r3, [sp, #20]
 80047de:	4619      	mov	r1, r3
 80047e0:	f04f 0c0a 	mov.w	ip, #10
 80047e4:	4620      	mov	r0, r4
 80047e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047ea:	3a30      	subs	r2, #48	; 0x30
 80047ec:	2a09      	cmp	r2, #9
 80047ee:	d903      	bls.n	80047f8 <_vfiprintf_r+0x1d0>
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d0c6      	beq.n	8004782 <_vfiprintf_r+0x15a>
 80047f4:	9105      	str	r1, [sp, #20]
 80047f6:	e7c4      	b.n	8004782 <_vfiprintf_r+0x15a>
 80047f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80047fc:	4604      	mov	r4, r0
 80047fe:	2301      	movs	r3, #1
 8004800:	e7f0      	b.n	80047e4 <_vfiprintf_r+0x1bc>
 8004802:	ab03      	add	r3, sp, #12
 8004804:	9300      	str	r3, [sp, #0]
 8004806:	462a      	mov	r2, r5
 8004808:	4b12      	ldr	r3, [pc, #72]	; (8004854 <_vfiprintf_r+0x22c>)
 800480a:	a904      	add	r1, sp, #16
 800480c:	4630      	mov	r0, r6
 800480e:	f3af 8000 	nop.w
 8004812:	4607      	mov	r7, r0
 8004814:	1c78      	adds	r0, r7, #1
 8004816:	d1d6      	bne.n	80047c6 <_vfiprintf_r+0x19e>
 8004818:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800481a:	07d9      	lsls	r1, r3, #31
 800481c:	d405      	bmi.n	800482a <_vfiprintf_r+0x202>
 800481e:	89ab      	ldrh	r3, [r5, #12]
 8004820:	059a      	lsls	r2, r3, #22
 8004822:	d402      	bmi.n	800482a <_vfiprintf_r+0x202>
 8004824:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004826:	f7ff f99f 	bl	8003b68 <__retarget_lock_release_recursive>
 800482a:	89ab      	ldrh	r3, [r5, #12]
 800482c:	065b      	lsls	r3, r3, #25
 800482e:	f53f af1d 	bmi.w	800466c <_vfiprintf_r+0x44>
 8004832:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004834:	e71c      	b.n	8004670 <_vfiprintf_r+0x48>
 8004836:	ab03      	add	r3, sp, #12
 8004838:	9300      	str	r3, [sp, #0]
 800483a:	462a      	mov	r2, r5
 800483c:	4b05      	ldr	r3, [pc, #20]	; (8004854 <_vfiprintf_r+0x22c>)
 800483e:	a904      	add	r1, sp, #16
 8004840:	4630      	mov	r0, r6
 8004842:	f7ff fc77 	bl	8004134 <_printf_i>
 8004846:	e7e4      	b.n	8004812 <_vfiprintf_r+0x1ea>
 8004848:	08004dca 	.word	0x08004dca
 800484c:	08004dd4 	.word	0x08004dd4
 8004850:	00000000 	.word	0x00000000
 8004854:	08004603 	.word	0x08004603
 8004858:	08004dd0 	.word	0x08004dd0

0800485c <__swbuf_r>:
 800485c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800485e:	460e      	mov	r6, r1
 8004860:	4614      	mov	r4, r2
 8004862:	4605      	mov	r5, r0
 8004864:	b118      	cbz	r0, 800486e <__swbuf_r+0x12>
 8004866:	6a03      	ldr	r3, [r0, #32]
 8004868:	b90b      	cbnz	r3, 800486e <__swbuf_r+0x12>
 800486a:	f7fe ffe7 	bl	800383c <__sinit>
 800486e:	69a3      	ldr	r3, [r4, #24]
 8004870:	60a3      	str	r3, [r4, #8]
 8004872:	89a3      	ldrh	r3, [r4, #12]
 8004874:	071a      	lsls	r2, r3, #28
 8004876:	d525      	bpl.n	80048c4 <__swbuf_r+0x68>
 8004878:	6923      	ldr	r3, [r4, #16]
 800487a:	b31b      	cbz	r3, 80048c4 <__swbuf_r+0x68>
 800487c:	6823      	ldr	r3, [r4, #0]
 800487e:	6922      	ldr	r2, [r4, #16]
 8004880:	1a98      	subs	r0, r3, r2
 8004882:	6963      	ldr	r3, [r4, #20]
 8004884:	b2f6      	uxtb	r6, r6
 8004886:	4283      	cmp	r3, r0
 8004888:	4637      	mov	r7, r6
 800488a:	dc04      	bgt.n	8004896 <__swbuf_r+0x3a>
 800488c:	4621      	mov	r1, r4
 800488e:	4628      	mov	r0, r5
 8004890:	f7ff fdf8 	bl	8004484 <_fflush_r>
 8004894:	b9e0      	cbnz	r0, 80048d0 <__swbuf_r+0x74>
 8004896:	68a3      	ldr	r3, [r4, #8]
 8004898:	3b01      	subs	r3, #1
 800489a:	60a3      	str	r3, [r4, #8]
 800489c:	6823      	ldr	r3, [r4, #0]
 800489e:	1c5a      	adds	r2, r3, #1
 80048a0:	6022      	str	r2, [r4, #0]
 80048a2:	701e      	strb	r6, [r3, #0]
 80048a4:	6962      	ldr	r2, [r4, #20]
 80048a6:	1c43      	adds	r3, r0, #1
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d004      	beq.n	80048b6 <__swbuf_r+0x5a>
 80048ac:	89a3      	ldrh	r3, [r4, #12]
 80048ae:	07db      	lsls	r3, r3, #31
 80048b0:	d506      	bpl.n	80048c0 <__swbuf_r+0x64>
 80048b2:	2e0a      	cmp	r6, #10
 80048b4:	d104      	bne.n	80048c0 <__swbuf_r+0x64>
 80048b6:	4621      	mov	r1, r4
 80048b8:	4628      	mov	r0, r5
 80048ba:	f7ff fde3 	bl	8004484 <_fflush_r>
 80048be:	b938      	cbnz	r0, 80048d0 <__swbuf_r+0x74>
 80048c0:	4638      	mov	r0, r7
 80048c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048c4:	4621      	mov	r1, r4
 80048c6:	4628      	mov	r0, r5
 80048c8:	f000 f806 	bl	80048d8 <__swsetup_r>
 80048cc:	2800      	cmp	r0, #0
 80048ce:	d0d5      	beq.n	800487c <__swbuf_r+0x20>
 80048d0:	f04f 37ff 	mov.w	r7, #4294967295
 80048d4:	e7f4      	b.n	80048c0 <__swbuf_r+0x64>
	...

080048d8 <__swsetup_r>:
 80048d8:	b538      	push	{r3, r4, r5, lr}
 80048da:	4b2a      	ldr	r3, [pc, #168]	; (8004984 <__swsetup_r+0xac>)
 80048dc:	4605      	mov	r5, r0
 80048de:	6818      	ldr	r0, [r3, #0]
 80048e0:	460c      	mov	r4, r1
 80048e2:	b118      	cbz	r0, 80048ec <__swsetup_r+0x14>
 80048e4:	6a03      	ldr	r3, [r0, #32]
 80048e6:	b90b      	cbnz	r3, 80048ec <__swsetup_r+0x14>
 80048e8:	f7fe ffa8 	bl	800383c <__sinit>
 80048ec:	89a3      	ldrh	r3, [r4, #12]
 80048ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80048f2:	0718      	lsls	r0, r3, #28
 80048f4:	d422      	bmi.n	800493c <__swsetup_r+0x64>
 80048f6:	06d9      	lsls	r1, r3, #27
 80048f8:	d407      	bmi.n	800490a <__swsetup_r+0x32>
 80048fa:	2309      	movs	r3, #9
 80048fc:	602b      	str	r3, [r5, #0]
 80048fe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004902:	81a3      	strh	r3, [r4, #12]
 8004904:	f04f 30ff 	mov.w	r0, #4294967295
 8004908:	e034      	b.n	8004974 <__swsetup_r+0x9c>
 800490a:	0758      	lsls	r0, r3, #29
 800490c:	d512      	bpl.n	8004934 <__swsetup_r+0x5c>
 800490e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004910:	b141      	cbz	r1, 8004924 <__swsetup_r+0x4c>
 8004912:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004916:	4299      	cmp	r1, r3
 8004918:	d002      	beq.n	8004920 <__swsetup_r+0x48>
 800491a:	4628      	mov	r0, r5
 800491c:	f7ff f944 	bl	8003ba8 <_free_r>
 8004920:	2300      	movs	r3, #0
 8004922:	6363      	str	r3, [r4, #52]	; 0x34
 8004924:	89a3      	ldrh	r3, [r4, #12]
 8004926:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800492a:	81a3      	strh	r3, [r4, #12]
 800492c:	2300      	movs	r3, #0
 800492e:	6063      	str	r3, [r4, #4]
 8004930:	6923      	ldr	r3, [r4, #16]
 8004932:	6023      	str	r3, [r4, #0]
 8004934:	89a3      	ldrh	r3, [r4, #12]
 8004936:	f043 0308 	orr.w	r3, r3, #8
 800493a:	81a3      	strh	r3, [r4, #12]
 800493c:	6923      	ldr	r3, [r4, #16]
 800493e:	b94b      	cbnz	r3, 8004954 <__swsetup_r+0x7c>
 8004940:	89a3      	ldrh	r3, [r4, #12]
 8004942:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004946:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800494a:	d003      	beq.n	8004954 <__swsetup_r+0x7c>
 800494c:	4621      	mov	r1, r4
 800494e:	4628      	mov	r0, r5
 8004950:	f000 f88c 	bl	8004a6c <__smakebuf_r>
 8004954:	89a0      	ldrh	r0, [r4, #12]
 8004956:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800495a:	f010 0301 	ands.w	r3, r0, #1
 800495e:	d00a      	beq.n	8004976 <__swsetup_r+0x9e>
 8004960:	2300      	movs	r3, #0
 8004962:	60a3      	str	r3, [r4, #8]
 8004964:	6963      	ldr	r3, [r4, #20]
 8004966:	425b      	negs	r3, r3
 8004968:	61a3      	str	r3, [r4, #24]
 800496a:	6923      	ldr	r3, [r4, #16]
 800496c:	b943      	cbnz	r3, 8004980 <__swsetup_r+0xa8>
 800496e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004972:	d1c4      	bne.n	80048fe <__swsetup_r+0x26>
 8004974:	bd38      	pop	{r3, r4, r5, pc}
 8004976:	0781      	lsls	r1, r0, #30
 8004978:	bf58      	it	pl
 800497a:	6963      	ldrpl	r3, [r4, #20]
 800497c:	60a3      	str	r3, [r4, #8]
 800497e:	e7f4      	b.n	800496a <__swsetup_r+0x92>
 8004980:	2000      	movs	r0, #0
 8004982:	e7f7      	b.n	8004974 <__swsetup_r+0x9c>
 8004984:	2000009c 	.word	0x2000009c

08004988 <_raise_r>:
 8004988:	291f      	cmp	r1, #31
 800498a:	b538      	push	{r3, r4, r5, lr}
 800498c:	4604      	mov	r4, r0
 800498e:	460d      	mov	r5, r1
 8004990:	d904      	bls.n	800499c <_raise_r+0x14>
 8004992:	2316      	movs	r3, #22
 8004994:	6003      	str	r3, [r0, #0]
 8004996:	f04f 30ff 	mov.w	r0, #4294967295
 800499a:	bd38      	pop	{r3, r4, r5, pc}
 800499c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800499e:	b112      	cbz	r2, 80049a6 <_raise_r+0x1e>
 80049a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80049a4:	b94b      	cbnz	r3, 80049ba <_raise_r+0x32>
 80049a6:	4620      	mov	r0, r4
 80049a8:	f000 f830 	bl	8004a0c <_getpid_r>
 80049ac:	462a      	mov	r2, r5
 80049ae:	4601      	mov	r1, r0
 80049b0:	4620      	mov	r0, r4
 80049b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049b6:	f000 b817 	b.w	80049e8 <_kill_r>
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d00a      	beq.n	80049d4 <_raise_r+0x4c>
 80049be:	1c59      	adds	r1, r3, #1
 80049c0:	d103      	bne.n	80049ca <_raise_r+0x42>
 80049c2:	2316      	movs	r3, #22
 80049c4:	6003      	str	r3, [r0, #0]
 80049c6:	2001      	movs	r0, #1
 80049c8:	e7e7      	b.n	800499a <_raise_r+0x12>
 80049ca:	2400      	movs	r4, #0
 80049cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80049d0:	4628      	mov	r0, r5
 80049d2:	4798      	blx	r3
 80049d4:	2000      	movs	r0, #0
 80049d6:	e7e0      	b.n	800499a <_raise_r+0x12>

080049d8 <raise>:
 80049d8:	4b02      	ldr	r3, [pc, #8]	; (80049e4 <raise+0xc>)
 80049da:	4601      	mov	r1, r0
 80049dc:	6818      	ldr	r0, [r3, #0]
 80049de:	f7ff bfd3 	b.w	8004988 <_raise_r>
 80049e2:	bf00      	nop
 80049e4:	2000009c 	.word	0x2000009c

080049e8 <_kill_r>:
 80049e8:	b538      	push	{r3, r4, r5, lr}
 80049ea:	4d07      	ldr	r5, [pc, #28]	; (8004a08 <_kill_r+0x20>)
 80049ec:	2300      	movs	r3, #0
 80049ee:	4604      	mov	r4, r0
 80049f0:	4608      	mov	r0, r1
 80049f2:	4611      	mov	r1, r2
 80049f4:	602b      	str	r3, [r5, #0]
 80049f6:	f7fb ff5f 	bl	80008b8 <_kill>
 80049fa:	1c43      	adds	r3, r0, #1
 80049fc:	d102      	bne.n	8004a04 <_kill_r+0x1c>
 80049fe:	682b      	ldr	r3, [r5, #0]
 8004a00:	b103      	cbz	r3, 8004a04 <_kill_r+0x1c>
 8004a02:	6023      	str	r3, [r4, #0]
 8004a04:	bd38      	pop	{r3, r4, r5, pc}
 8004a06:	bf00      	nop
 8004a08:	200002e4 	.word	0x200002e4

08004a0c <_getpid_r>:
 8004a0c:	f7fb bf4c 	b.w	80008a8 <_getpid>

08004a10 <_malloc_usable_size_r>:
 8004a10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a14:	1f18      	subs	r0, r3, #4
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	bfbc      	itt	lt
 8004a1a:	580b      	ldrlt	r3, [r1, r0]
 8004a1c:	18c0      	addlt	r0, r0, r3
 8004a1e:	4770      	bx	lr

08004a20 <__swhatbuf_r>:
 8004a20:	b570      	push	{r4, r5, r6, lr}
 8004a22:	460c      	mov	r4, r1
 8004a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a28:	2900      	cmp	r1, #0
 8004a2a:	b096      	sub	sp, #88	; 0x58
 8004a2c:	4615      	mov	r5, r2
 8004a2e:	461e      	mov	r6, r3
 8004a30:	da0d      	bge.n	8004a4e <__swhatbuf_r+0x2e>
 8004a32:	89a3      	ldrh	r3, [r4, #12]
 8004a34:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004a38:	f04f 0100 	mov.w	r1, #0
 8004a3c:	bf0c      	ite	eq
 8004a3e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004a42:	2340      	movne	r3, #64	; 0x40
 8004a44:	2000      	movs	r0, #0
 8004a46:	6031      	str	r1, [r6, #0]
 8004a48:	602b      	str	r3, [r5, #0]
 8004a4a:	b016      	add	sp, #88	; 0x58
 8004a4c:	bd70      	pop	{r4, r5, r6, pc}
 8004a4e:	466a      	mov	r2, sp
 8004a50:	f000 f848 	bl	8004ae4 <_fstat_r>
 8004a54:	2800      	cmp	r0, #0
 8004a56:	dbec      	blt.n	8004a32 <__swhatbuf_r+0x12>
 8004a58:	9901      	ldr	r1, [sp, #4]
 8004a5a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004a5e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004a62:	4259      	negs	r1, r3
 8004a64:	4159      	adcs	r1, r3
 8004a66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a6a:	e7eb      	b.n	8004a44 <__swhatbuf_r+0x24>

08004a6c <__smakebuf_r>:
 8004a6c:	898b      	ldrh	r3, [r1, #12]
 8004a6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004a70:	079d      	lsls	r5, r3, #30
 8004a72:	4606      	mov	r6, r0
 8004a74:	460c      	mov	r4, r1
 8004a76:	d507      	bpl.n	8004a88 <__smakebuf_r+0x1c>
 8004a78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004a7c:	6023      	str	r3, [r4, #0]
 8004a7e:	6123      	str	r3, [r4, #16]
 8004a80:	2301      	movs	r3, #1
 8004a82:	6163      	str	r3, [r4, #20]
 8004a84:	b002      	add	sp, #8
 8004a86:	bd70      	pop	{r4, r5, r6, pc}
 8004a88:	ab01      	add	r3, sp, #4
 8004a8a:	466a      	mov	r2, sp
 8004a8c:	f7ff ffc8 	bl	8004a20 <__swhatbuf_r>
 8004a90:	9900      	ldr	r1, [sp, #0]
 8004a92:	4605      	mov	r5, r0
 8004a94:	4630      	mov	r0, r6
 8004a96:	f7ff f8fb 	bl	8003c90 <_malloc_r>
 8004a9a:	b948      	cbnz	r0, 8004ab0 <__smakebuf_r+0x44>
 8004a9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004aa0:	059a      	lsls	r2, r3, #22
 8004aa2:	d4ef      	bmi.n	8004a84 <__smakebuf_r+0x18>
 8004aa4:	f023 0303 	bic.w	r3, r3, #3
 8004aa8:	f043 0302 	orr.w	r3, r3, #2
 8004aac:	81a3      	strh	r3, [r4, #12]
 8004aae:	e7e3      	b.n	8004a78 <__smakebuf_r+0xc>
 8004ab0:	89a3      	ldrh	r3, [r4, #12]
 8004ab2:	6020      	str	r0, [r4, #0]
 8004ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ab8:	81a3      	strh	r3, [r4, #12]
 8004aba:	9b00      	ldr	r3, [sp, #0]
 8004abc:	6163      	str	r3, [r4, #20]
 8004abe:	9b01      	ldr	r3, [sp, #4]
 8004ac0:	6120      	str	r0, [r4, #16]
 8004ac2:	b15b      	cbz	r3, 8004adc <__smakebuf_r+0x70>
 8004ac4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ac8:	4630      	mov	r0, r6
 8004aca:	f000 f81d 	bl	8004b08 <_isatty_r>
 8004ace:	b128      	cbz	r0, 8004adc <__smakebuf_r+0x70>
 8004ad0:	89a3      	ldrh	r3, [r4, #12]
 8004ad2:	f023 0303 	bic.w	r3, r3, #3
 8004ad6:	f043 0301 	orr.w	r3, r3, #1
 8004ada:	81a3      	strh	r3, [r4, #12]
 8004adc:	89a3      	ldrh	r3, [r4, #12]
 8004ade:	431d      	orrs	r5, r3
 8004ae0:	81a5      	strh	r5, [r4, #12]
 8004ae2:	e7cf      	b.n	8004a84 <__smakebuf_r+0x18>

08004ae4 <_fstat_r>:
 8004ae4:	b538      	push	{r3, r4, r5, lr}
 8004ae6:	4d07      	ldr	r5, [pc, #28]	; (8004b04 <_fstat_r+0x20>)
 8004ae8:	2300      	movs	r3, #0
 8004aea:	4604      	mov	r4, r0
 8004aec:	4608      	mov	r0, r1
 8004aee:	4611      	mov	r1, r2
 8004af0:	602b      	str	r3, [r5, #0]
 8004af2:	f7fb ff40 	bl	8000976 <_fstat>
 8004af6:	1c43      	adds	r3, r0, #1
 8004af8:	d102      	bne.n	8004b00 <_fstat_r+0x1c>
 8004afa:	682b      	ldr	r3, [r5, #0]
 8004afc:	b103      	cbz	r3, 8004b00 <_fstat_r+0x1c>
 8004afe:	6023      	str	r3, [r4, #0]
 8004b00:	bd38      	pop	{r3, r4, r5, pc}
 8004b02:	bf00      	nop
 8004b04:	200002e4 	.word	0x200002e4

08004b08 <_isatty_r>:
 8004b08:	b538      	push	{r3, r4, r5, lr}
 8004b0a:	4d06      	ldr	r5, [pc, #24]	; (8004b24 <_isatty_r+0x1c>)
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	4604      	mov	r4, r0
 8004b10:	4608      	mov	r0, r1
 8004b12:	602b      	str	r3, [r5, #0]
 8004b14:	f7fb ff3f 	bl	8000996 <_isatty>
 8004b18:	1c43      	adds	r3, r0, #1
 8004b1a:	d102      	bne.n	8004b22 <_isatty_r+0x1a>
 8004b1c:	682b      	ldr	r3, [r5, #0]
 8004b1e:	b103      	cbz	r3, 8004b22 <_isatty_r+0x1a>
 8004b20:	6023      	str	r3, [r4, #0]
 8004b22:	bd38      	pop	{r3, r4, r5, pc}
 8004b24:	200002e4 	.word	0x200002e4

08004b28 <_init>:
 8004b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b2a:	bf00      	nop
 8004b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b2e:	bc08      	pop	{r3}
 8004b30:	469e      	mov	lr, r3
 8004b32:	4770      	bx	lr

08004b34 <_fini>:
 8004b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b36:	bf00      	nop
 8004b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b3a:	bc08      	pop	{r3}
 8004b3c:	469e      	mov	lr, r3
 8004b3e:	4770      	bx	lr
