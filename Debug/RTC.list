
RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002140  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080022c8  080022c8  000122c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022f8  080022f8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080022f8  080022f8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080022f8  080022f8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022f8  080022f8  000122f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080022fc  080022fc  000122fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002300  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000040  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000004c  2000004c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00004929  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000010fe  00000000  00000000  000249a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000004a0  00000000  00000000  00025aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000035b  00000000  00000000  00025f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00019847  00000000  00000000  000262a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000064bc  00000000  00000000  0003faea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00097bc7  00000000  00000000  00045fa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000010cc  00000000  00000000  000ddb70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  000dec3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080022b0 	.word	0x080022b0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080022b0 	.word	0x080022b0

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 f96c 	bl	80004a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f803 	bl	80001da <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_RTC_Init();
 80001d4:	f000 f858 	bl	8000288 <MX_RTC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001d8:	e7fe      	b.n	80001d8 <main+0x10>

080001da <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001da:	b580      	push	{r7, lr}
 80001dc:	b096      	sub	sp, #88	; 0x58
 80001de:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80001e4:	2228      	movs	r2, #40	; 0x28
 80001e6:	2100      	movs	r1, #0
 80001e8:	4618      	mov	r0, r3
 80001ea:	f002 f835 	bl	8002258 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ee:	f107 031c 	add.w	r3, r7, #28
 80001f2:	2200      	movs	r2, #0
 80001f4:	601a      	str	r2, [r3, #0]
 80001f6:	605a      	str	r2, [r3, #4]
 80001f8:	609a      	str	r2, [r3, #8]
 80001fa:	60da      	str	r2, [r3, #12]
 80001fc:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001fe:	1d3b      	adds	r3, r7, #4
 8000200:	2200      	movs	r2, #0
 8000202:	601a      	str	r2, [r3, #0]
 8000204:	605a      	str	r2, [r3, #4]
 8000206:	609a      	str	r2, [r3, #8]
 8000208:	60da      	str	r2, [r3, #12]
 800020a:	611a      	str	r2, [r3, #16]
 800020c:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800020e:	230a      	movs	r3, #10
 8000210:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000212:	2301      	movs	r3, #1
 8000214:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000216:	2310      	movs	r3, #16
 8000218:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800021a:	2301      	movs	r3, #1
 800021c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800021e:	2300      	movs	r3, #0
 8000220:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000222:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000226:	4618      	mov	r0, r3
 8000228:	f000 fa8a 	bl	8000740 <HAL_RCC_OscConfig>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d001      	beq.n	8000236 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000232:	f000 f883 	bl	800033c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000236:	230f      	movs	r3, #15
 8000238:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800023a:	2300      	movs	r3, #0
 800023c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800023e:	2300      	movs	r3, #0
 8000240:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000242:	2300      	movs	r3, #0
 8000244:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000246:	2300      	movs	r3, #0
 8000248:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800024a:	f107 031c 	add.w	r3, r7, #28
 800024e:	2100      	movs	r1, #0
 8000250:	4618      	mov	r0, r3
 8000252:	f001 fab3 	bl	80017bc <HAL_RCC_ClockConfig>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d001      	beq.n	8000260 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800025c:	f000 f86e 	bl	800033c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000260:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000264:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000266:	f44f 7300 	mov.w	r3, #512	; 0x200
 800026a:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800026c:	1d3b      	adds	r3, r7, #4
 800026e:	4618      	mov	r0, r3
 8000270:	f001 fc8a 	bl	8001b88 <HAL_RCCEx_PeriphCLKConfig>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800027a:	f000 f85f 	bl	800033c <Error_Handler>
  }
}
 800027e:	bf00      	nop
 8000280:	3758      	adds	r7, #88	; 0x58
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
	...

08000288 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b086      	sub	sp, #24
 800028c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800028e:	1d3b      	adds	r3, r7, #4
 8000290:	2200      	movs	r2, #0
 8000292:	601a      	str	r2, [r3, #0]
 8000294:	605a      	str	r2, [r3, #4]
 8000296:	609a      	str	r2, [r3, #8]
 8000298:	60da      	str	r2, [r3, #12]
 800029a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800029c:	2300      	movs	r3, #0
 800029e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80002a0:	4b24      	ldr	r3, [pc, #144]	; (8000334 <MX_RTC_Init+0xac>)
 80002a2:	4a25      	ldr	r2, [pc, #148]	; (8000338 <MX_RTC_Init+0xb0>)
 80002a4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80002a6:	4b23      	ldr	r3, [pc, #140]	; (8000334 <MX_RTC_Init+0xac>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80002ac:	4b21      	ldr	r3, [pc, #132]	; (8000334 <MX_RTC_Init+0xac>)
 80002ae:	227f      	movs	r2, #127	; 0x7f
 80002b0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80002b2:	4b20      	ldr	r3, [pc, #128]	; (8000334 <MX_RTC_Init+0xac>)
 80002b4:	22ff      	movs	r2, #255	; 0xff
 80002b6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80002b8:	4b1e      	ldr	r3, [pc, #120]	; (8000334 <MX_RTC_Init+0xac>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80002be:	4b1d      	ldr	r3, [pc, #116]	; (8000334 <MX_RTC_Init+0xac>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80002c4:	4b1b      	ldr	r3, [pc, #108]	; (8000334 <MX_RTC_Init+0xac>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80002ca:	481a      	ldr	r0, [pc, #104]	; (8000334 <MX_RTC_Init+0xac>)
 80002cc:	f001 fd82 	bl	8001dd4 <HAL_RTC_Init>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80002d6:	f000 f831 	bl	800033c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x23;
 80002da:	2323      	movs	r3, #35	; 0x23
 80002dc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x59;
 80002de:	2359      	movs	r3, #89	; 0x59
 80002e0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80002e2:	2300      	movs	r3, #0
 80002e4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80002e6:	2300      	movs	r3, #0
 80002e8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80002ea:	2300      	movs	r3, #0
 80002ec:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	2201      	movs	r2, #1
 80002f2:	4619      	mov	r1, r3
 80002f4:	480f      	ldr	r0, [pc, #60]	; (8000334 <MX_RTC_Init+0xac>)
 80002f6:	f001 fdf0 	bl	8001eda <HAL_RTC_SetTime>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000300:	f000 f81c 	bl	800033c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000304:	2301      	movs	r3, #1
 8000306:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000308:	2301      	movs	r3, #1
 800030a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800030c:	2301      	movs	r3, #1
 800030e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000310:	2300      	movs	r3, #0
 8000312:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000314:	463b      	mov	r3, r7
 8000316:	2201      	movs	r2, #1
 8000318:	4619      	mov	r1, r3
 800031a:	4806      	ldr	r0, [pc, #24]	; (8000334 <MX_RTC_Init+0xac>)
 800031c:	f001 fe77 	bl	800200e <HAL_RTC_SetDate>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000326:	f000 f809 	bl	800033c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800032a:	bf00      	nop
 800032c:	3718      	adds	r7, #24
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	20000028 	.word	0x20000028
 8000338:	40002800 	.word	0x40002800

0800033c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000340:	b672      	cpsid	i
}
 8000342:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000344:	e7fe      	b.n	8000344 <Error_Handler+0x8>
	...

08000348 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800034e:	4b0f      	ldr	r3, [pc, #60]	; (800038c <HAL_MspInit+0x44>)
 8000350:	699b      	ldr	r3, [r3, #24]
 8000352:	4a0e      	ldr	r2, [pc, #56]	; (800038c <HAL_MspInit+0x44>)
 8000354:	f043 0301 	orr.w	r3, r3, #1
 8000358:	6193      	str	r3, [r2, #24]
 800035a:	4b0c      	ldr	r3, [pc, #48]	; (800038c <HAL_MspInit+0x44>)
 800035c:	699b      	ldr	r3, [r3, #24]
 800035e:	f003 0301 	and.w	r3, r3, #1
 8000362:	607b      	str	r3, [r7, #4]
 8000364:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000366:	4b09      	ldr	r3, [pc, #36]	; (800038c <HAL_MspInit+0x44>)
 8000368:	69db      	ldr	r3, [r3, #28]
 800036a:	4a08      	ldr	r2, [pc, #32]	; (800038c <HAL_MspInit+0x44>)
 800036c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000370:	61d3      	str	r3, [r2, #28]
 8000372:	4b06      	ldr	r3, [pc, #24]	; (800038c <HAL_MspInit+0x44>)
 8000374:	69db      	ldr	r3, [r3, #28]
 8000376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800037a:	603b      	str	r3, [r7, #0]
 800037c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800037e:	bf00      	nop
 8000380:	370c      	adds	r7, #12
 8000382:	46bd      	mov	sp, r7
 8000384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	40021000 	.word	0x40021000

08000390 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a0d      	ldr	r2, [pc, #52]	; (80003d4 <HAL_RTC_MspInit+0x44>)
 800039e:	4293      	cmp	r3, r2
 80003a0:	d111      	bne.n	80003c6 <HAL_RTC_MspInit+0x36>
 80003a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80003a6:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	fa93 f3a3 	rbit	r3, r3
 80003ae:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80003b0:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80003b2:	fab3 f383 	clz	r3, r3
 80003b6:	b2db      	uxtb	r3, r3
 80003b8:	461a      	mov	r2, r3
 80003ba:	4b07      	ldr	r3, [pc, #28]	; (80003d8 <HAL_RTC_MspInit+0x48>)
 80003bc:	4413      	add	r3, r2
 80003be:	009b      	lsls	r3, r3, #2
 80003c0:	461a      	mov	r2, r3
 80003c2:	2301      	movs	r3, #1
 80003c4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80003c6:	bf00      	nop
 80003c8:	3714      	adds	r7, #20
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	40002800 	.word	0x40002800
 80003d8:	10908100 	.word	0x10908100

080003dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003e0:	e7fe      	b.n	80003e0 <NMI_Handler+0x4>

080003e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003e2:	b480      	push	{r7}
 80003e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003e6:	e7fe      	b.n	80003e6 <HardFault_Handler+0x4>

080003e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003ec:	e7fe      	b.n	80003ec <MemManage_Handler+0x4>

080003ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003ee:	b480      	push	{r7}
 80003f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003f2:	e7fe      	b.n	80003f2 <BusFault_Handler+0x4>

080003f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003f8:	e7fe      	b.n	80003f8 <UsageFault_Handler+0x4>

080003fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003fa:	b480      	push	{r7}
 80003fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003fe:	bf00      	nop
 8000400:	46bd      	mov	sp, r7
 8000402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000406:	4770      	bx	lr

08000408 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800040c:	bf00      	nop
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr

08000416 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000416:	b480      	push	{r7}
 8000418:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800041a:	bf00      	nop
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr

08000424 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000428:	f000 f884 	bl	8000534 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800042c:	bf00      	nop
 800042e:	bd80      	pop	{r7, pc}

08000430 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000434:	4b06      	ldr	r3, [pc, #24]	; (8000450 <SystemInit+0x20>)
 8000436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800043a:	4a05      	ldr	r2, [pc, #20]	; (8000450 <SystemInit+0x20>)
 800043c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000440:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000444:	bf00      	nop
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop
 8000450:	e000ed00 	.word	0xe000ed00

08000454 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000454:	f8df d034 	ldr.w	sp, [pc, #52]	; 800048c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000458:	f7ff ffea 	bl	8000430 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800045c:	480c      	ldr	r0, [pc, #48]	; (8000490 <LoopForever+0x6>)
  ldr r1, =_edata
 800045e:	490d      	ldr	r1, [pc, #52]	; (8000494 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000460:	4a0d      	ldr	r2, [pc, #52]	; (8000498 <LoopForever+0xe>)
  movs r3, #0
 8000462:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000464:	e002      	b.n	800046c <LoopCopyDataInit>

08000466 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000466:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000468:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800046a:	3304      	adds	r3, #4

0800046c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800046c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800046e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000470:	d3f9      	bcc.n	8000466 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000472:	4a0a      	ldr	r2, [pc, #40]	; (800049c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000474:	4c0a      	ldr	r4, [pc, #40]	; (80004a0 <LoopForever+0x16>)
  movs r3, #0
 8000476:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000478:	e001      	b.n	800047e <LoopFillZerobss>

0800047a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800047a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800047c:	3204      	adds	r2, #4

0800047e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800047e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000480:	d3fb      	bcc.n	800047a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000482:	f001 fef1 	bl	8002268 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000486:	f7ff fe9f 	bl	80001c8 <main>

0800048a <LoopForever>:

LoopForever:
    b LoopForever
 800048a:	e7fe      	b.n	800048a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800048c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000490:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000494:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000498:	08002300 	.word	0x08002300
  ldr r2, =_sbss
 800049c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80004a0:	2000004c 	.word	0x2000004c

080004a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80004a4:	e7fe      	b.n	80004a4 <ADC1_2_IRQHandler>
	...

080004a8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004ac:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <HAL_Init+0x28>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a07      	ldr	r2, [pc, #28]	; (80004d0 <HAL_Init+0x28>)
 80004b2:	f043 0310 	orr.w	r3, r3, #16
 80004b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004b8:	2003      	movs	r0, #3
 80004ba:	f000 f90d 	bl	80006d8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004be:	200f      	movs	r0, #15
 80004c0:	f000 f808 	bl	80004d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004c4:	f7ff ff40 	bl	8000348 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004c8:	2300      	movs	r3, #0
}
 80004ca:	4618      	mov	r0, r3
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	40022000 	.word	0x40022000

080004d4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004dc:	4b12      	ldr	r3, [pc, #72]	; (8000528 <HAL_InitTick+0x54>)
 80004de:	681a      	ldr	r2, [r3, #0]
 80004e0:	4b12      	ldr	r3, [pc, #72]	; (800052c <HAL_InitTick+0x58>)
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	4619      	mov	r1, r3
 80004e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80004ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80004f2:	4618      	mov	r0, r3
 80004f4:	f000 f917 	bl	8000726 <HAL_SYSTICK_Config>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80004fe:	2301      	movs	r3, #1
 8000500:	e00e      	b.n	8000520 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	2b0f      	cmp	r3, #15
 8000506:	d80a      	bhi.n	800051e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000508:	2200      	movs	r2, #0
 800050a:	6879      	ldr	r1, [r7, #4]
 800050c:	f04f 30ff 	mov.w	r0, #4294967295
 8000510:	f000 f8ed 	bl	80006ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000514:	4a06      	ldr	r2, [pc, #24]	; (8000530 <HAL_InitTick+0x5c>)
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800051a:	2300      	movs	r3, #0
 800051c:	e000      	b.n	8000520 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800051e:	2301      	movs	r3, #1
}
 8000520:	4618      	mov	r0, r3
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	20000000 	.word	0x20000000
 800052c:	20000008 	.word	0x20000008
 8000530:	20000004 	.word	0x20000004

08000534 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <HAL_IncTick+0x20>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	461a      	mov	r2, r3
 800053e:	4b06      	ldr	r3, [pc, #24]	; (8000558 <HAL_IncTick+0x24>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4413      	add	r3, r2
 8000544:	4a04      	ldr	r2, [pc, #16]	; (8000558 <HAL_IncTick+0x24>)
 8000546:	6013      	str	r3, [r2, #0]
}
 8000548:	bf00      	nop
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	20000008 	.word	0x20000008
 8000558:	20000048 	.word	0x20000048

0800055c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000560:	4b03      	ldr	r3, [pc, #12]	; (8000570 <HAL_GetTick+0x14>)
 8000562:	681b      	ldr	r3, [r3, #0]
}
 8000564:	4618      	mov	r0, r3
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	20000048 	.word	0x20000048

08000574 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	f003 0307 	and.w	r3, r3, #7
 8000582:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000584:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <__NVIC_SetPriorityGrouping+0x44>)
 8000586:	68db      	ldr	r3, [r3, #12]
 8000588:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800058a:	68ba      	ldr	r2, [r7, #8]
 800058c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000590:	4013      	ands	r3, r2
 8000592:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800059c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005a6:	4a04      	ldr	r2, [pc, #16]	; (80005b8 <__NVIC_SetPriorityGrouping+0x44>)
 80005a8:	68bb      	ldr	r3, [r7, #8]
 80005aa:	60d3      	str	r3, [r2, #12]
}
 80005ac:	bf00      	nop
 80005ae:	3714      	adds	r7, #20
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	e000ed00 	.word	0xe000ed00

080005bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005c0:	4b04      	ldr	r3, [pc, #16]	; (80005d4 <__NVIC_GetPriorityGrouping+0x18>)
 80005c2:	68db      	ldr	r3, [r3, #12]
 80005c4:	0a1b      	lsrs	r3, r3, #8
 80005c6:	f003 0307 	and.w	r3, r3, #7
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr
 80005d4:	e000ed00 	.word	0xe000ed00

080005d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	6039      	str	r1, [r7, #0]
 80005e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	db0a      	blt.n	8000602 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	b2da      	uxtb	r2, r3
 80005f0:	490c      	ldr	r1, [pc, #48]	; (8000624 <__NVIC_SetPriority+0x4c>)
 80005f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f6:	0112      	lsls	r2, r2, #4
 80005f8:	b2d2      	uxtb	r2, r2
 80005fa:	440b      	add	r3, r1
 80005fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000600:	e00a      	b.n	8000618 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	b2da      	uxtb	r2, r3
 8000606:	4908      	ldr	r1, [pc, #32]	; (8000628 <__NVIC_SetPriority+0x50>)
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	f003 030f 	and.w	r3, r3, #15
 800060e:	3b04      	subs	r3, #4
 8000610:	0112      	lsls	r2, r2, #4
 8000612:	b2d2      	uxtb	r2, r2
 8000614:	440b      	add	r3, r1
 8000616:	761a      	strb	r2, [r3, #24]
}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	e000e100 	.word	0xe000e100
 8000628:	e000ed00 	.word	0xe000ed00

0800062c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800062c:	b480      	push	{r7}
 800062e:	b089      	sub	sp, #36	; 0x24
 8000630:	af00      	add	r7, sp, #0
 8000632:	60f8      	str	r0, [r7, #12]
 8000634:	60b9      	str	r1, [r7, #8]
 8000636:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	f003 0307 	and.w	r3, r3, #7
 800063e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000640:	69fb      	ldr	r3, [r7, #28]
 8000642:	f1c3 0307 	rsb	r3, r3, #7
 8000646:	2b04      	cmp	r3, #4
 8000648:	bf28      	it	cs
 800064a:	2304      	movcs	r3, #4
 800064c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800064e:	69fb      	ldr	r3, [r7, #28]
 8000650:	3304      	adds	r3, #4
 8000652:	2b06      	cmp	r3, #6
 8000654:	d902      	bls.n	800065c <NVIC_EncodePriority+0x30>
 8000656:	69fb      	ldr	r3, [r7, #28]
 8000658:	3b03      	subs	r3, #3
 800065a:	e000      	b.n	800065e <NVIC_EncodePriority+0x32>
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000660:	f04f 32ff 	mov.w	r2, #4294967295
 8000664:	69bb      	ldr	r3, [r7, #24]
 8000666:	fa02 f303 	lsl.w	r3, r2, r3
 800066a:	43da      	mvns	r2, r3
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	401a      	ands	r2, r3
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000674:	f04f 31ff 	mov.w	r1, #4294967295
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	fa01 f303 	lsl.w	r3, r1, r3
 800067e:	43d9      	mvns	r1, r3
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000684:	4313      	orrs	r3, r2
         );
}
 8000686:	4618      	mov	r0, r3
 8000688:	3724      	adds	r7, #36	; 0x24
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
	...

08000694 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	3b01      	subs	r3, #1
 80006a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006a4:	d301      	bcc.n	80006aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006a6:	2301      	movs	r3, #1
 80006a8:	e00f      	b.n	80006ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006aa:	4a0a      	ldr	r2, [pc, #40]	; (80006d4 <SysTick_Config+0x40>)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	3b01      	subs	r3, #1
 80006b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006b2:	210f      	movs	r1, #15
 80006b4:	f04f 30ff 	mov.w	r0, #4294967295
 80006b8:	f7ff ff8e 	bl	80005d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006bc:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <SysTick_Config+0x40>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SysTick_Config+0x40>)
 80006c4:	2207      	movs	r2, #7
 80006c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006c8:	2300      	movs	r3, #0
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	e000e010 	.word	0xe000e010

080006d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006e0:	6878      	ldr	r0, [r7, #4]
 80006e2:	f7ff ff47 	bl	8000574 <__NVIC_SetPriorityGrouping>
}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}

080006ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006ee:	b580      	push	{r7, lr}
 80006f0:	b086      	sub	sp, #24
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	4603      	mov	r3, r0
 80006f6:	60b9      	str	r1, [r7, #8]
 80006f8:	607a      	str	r2, [r7, #4]
 80006fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000700:	f7ff ff5c 	bl	80005bc <__NVIC_GetPriorityGrouping>
 8000704:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	68b9      	ldr	r1, [r7, #8]
 800070a:	6978      	ldr	r0, [r7, #20]
 800070c:	f7ff ff8e 	bl	800062c <NVIC_EncodePriority>
 8000710:	4602      	mov	r2, r0
 8000712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000716:	4611      	mov	r1, r2
 8000718:	4618      	mov	r0, r3
 800071a:	f7ff ff5d 	bl	80005d8 <__NVIC_SetPriority>
}
 800071e:	bf00      	nop
 8000720:	3718      	adds	r7, #24
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}

08000726 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000726:	b580      	push	{r7, lr}
 8000728:	b082      	sub	sp, #8
 800072a:	af00      	add	r7, sp, #0
 800072c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800072e:	6878      	ldr	r0, [r7, #4]
 8000730:	f7ff ffb0 	bl	8000694 <SysTick_Config>
 8000734:	4603      	mov	r3, r0
}
 8000736:	4618      	mov	r0, r3
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
	...

08000740 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000746:	af00      	add	r7, sp, #0
 8000748:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800074c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000750:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000752:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000756:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d102      	bne.n	8000766 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000760:	2301      	movs	r3, #1
 8000762:	f001 b823 	b.w	80017ac <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800076a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	2b00      	cmp	r3, #0
 8000778:	f000 817d 	beq.w	8000a76 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800077c:	4bbc      	ldr	r3, [pc, #752]	; (8000a70 <HAL_RCC_OscConfig+0x330>)
 800077e:	685b      	ldr	r3, [r3, #4]
 8000780:	f003 030c 	and.w	r3, r3, #12
 8000784:	2b04      	cmp	r3, #4
 8000786:	d00c      	beq.n	80007a2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000788:	4bb9      	ldr	r3, [pc, #740]	; (8000a70 <HAL_RCC_OscConfig+0x330>)
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	f003 030c 	and.w	r3, r3, #12
 8000790:	2b08      	cmp	r3, #8
 8000792:	d15c      	bne.n	800084e <HAL_RCC_OscConfig+0x10e>
 8000794:	4bb6      	ldr	r3, [pc, #728]	; (8000a70 <HAL_RCC_OscConfig+0x330>)
 8000796:	685b      	ldr	r3, [r3, #4]
 8000798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800079c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007a0:	d155      	bne.n	800084e <HAL_RCC_OscConfig+0x10e>
 80007a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007a6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007aa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80007ae:	fa93 f3a3 	rbit	r3, r3
 80007b2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 80007b6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007ba:	fab3 f383 	clz	r3, r3
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	095b      	lsrs	r3, r3, #5
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d102      	bne.n	80007d4 <HAL_RCC_OscConfig+0x94>
 80007ce:	4ba8      	ldr	r3, [pc, #672]	; (8000a70 <HAL_RCC_OscConfig+0x330>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	e015      	b.n	8000800 <HAL_RCC_OscConfig+0xc0>
 80007d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007d8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007dc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80007e0:	fa93 f3a3 	rbit	r3, r3
 80007e4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80007e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007ec:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80007f0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80007f4:	fa93 f3a3 	rbit	r3, r3
 80007f8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80007fc:	4b9c      	ldr	r3, [pc, #624]	; (8000a70 <HAL_RCC_OscConfig+0x330>)
 80007fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000800:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000804:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000808:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800080c:	fa92 f2a2 	rbit	r2, r2
 8000810:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000814:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000818:	fab2 f282 	clz	r2, r2
 800081c:	b2d2      	uxtb	r2, r2
 800081e:	f042 0220 	orr.w	r2, r2, #32
 8000822:	b2d2      	uxtb	r2, r2
 8000824:	f002 021f 	and.w	r2, r2, #31
 8000828:	2101      	movs	r1, #1
 800082a:	fa01 f202 	lsl.w	r2, r1, r2
 800082e:	4013      	ands	r3, r2
 8000830:	2b00      	cmp	r3, #0
 8000832:	f000 811f 	beq.w	8000a74 <HAL_RCC_OscConfig+0x334>
 8000836:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800083a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	2b00      	cmp	r3, #0
 8000844:	f040 8116 	bne.w	8000a74 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000848:	2301      	movs	r3, #1
 800084a:	f000 bfaf 	b.w	80017ac <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800084e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000852:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800085e:	d106      	bne.n	800086e <HAL_RCC_OscConfig+0x12e>
 8000860:	4b83      	ldr	r3, [pc, #524]	; (8000a70 <HAL_RCC_OscConfig+0x330>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a82      	ldr	r2, [pc, #520]	; (8000a70 <HAL_RCC_OscConfig+0x330>)
 8000866:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800086a:	6013      	str	r3, [r2, #0]
 800086c:	e036      	b.n	80008dc <HAL_RCC_OscConfig+0x19c>
 800086e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000872:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d10c      	bne.n	8000898 <HAL_RCC_OscConfig+0x158>
 800087e:	4b7c      	ldr	r3, [pc, #496]	; (8000a70 <HAL_RCC_OscConfig+0x330>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4a7b      	ldr	r2, [pc, #492]	; (8000a70 <HAL_RCC_OscConfig+0x330>)
 8000884:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000888:	6013      	str	r3, [r2, #0]
 800088a:	4b79      	ldr	r3, [pc, #484]	; (8000a70 <HAL_RCC_OscConfig+0x330>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4a78      	ldr	r2, [pc, #480]	; (8000a70 <HAL_RCC_OscConfig+0x330>)
 8000890:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000894:	6013      	str	r3, [r2, #0]
 8000896:	e021      	b.n	80008dc <HAL_RCC_OscConfig+0x19c>
 8000898:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800089c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80008a8:	d10c      	bne.n	80008c4 <HAL_RCC_OscConfig+0x184>
 80008aa:	4b71      	ldr	r3, [pc, #452]	; (8000a70 <HAL_RCC_OscConfig+0x330>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a70      	ldr	r2, [pc, #448]	; (8000a70 <HAL_RCC_OscConfig+0x330>)
 80008b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008b4:	6013      	str	r3, [r2, #0]
 80008b6:	4b6e      	ldr	r3, [pc, #440]	; (8000a70 <HAL_RCC_OscConfig+0x330>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a6d      	ldr	r2, [pc, #436]	; (8000a70 <HAL_RCC_OscConfig+0x330>)
 80008bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008c0:	6013      	str	r3, [r2, #0]
 80008c2:	e00b      	b.n	80008dc <HAL_RCC_OscConfig+0x19c>
 80008c4:	4b6a      	ldr	r3, [pc, #424]	; (8000a70 <HAL_RCC_OscConfig+0x330>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a69      	ldr	r2, [pc, #420]	; (8000a70 <HAL_RCC_OscConfig+0x330>)
 80008ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008ce:	6013      	str	r3, [r2, #0]
 80008d0:	4b67      	ldr	r3, [pc, #412]	; (8000a70 <HAL_RCC_OscConfig+0x330>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a66      	ldr	r2, [pc, #408]	; (8000a70 <HAL_RCC_OscConfig+0x330>)
 80008d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008da:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80008dc:	4b64      	ldr	r3, [pc, #400]	; (8000a70 <HAL_RCC_OscConfig+0x330>)
 80008de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008e0:	f023 020f 	bic.w	r2, r3, #15
 80008e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80008e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	689b      	ldr	r3, [r3, #8]
 80008f0:	495f      	ldr	r1, [pc, #380]	; (8000a70 <HAL_RCC_OscConfig+0x330>)
 80008f2:	4313      	orrs	r3, r2
 80008f4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80008f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80008fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d059      	beq.n	80009ba <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000906:	f7ff fe29 	bl	800055c <HAL_GetTick>
 800090a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800090e:	e00a      	b.n	8000926 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000910:	f7ff fe24 	bl	800055c <HAL_GetTick>
 8000914:	4602      	mov	r2, r0
 8000916:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800091a:	1ad3      	subs	r3, r2, r3
 800091c:	2b64      	cmp	r3, #100	; 0x64
 800091e:	d902      	bls.n	8000926 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000920:	2303      	movs	r3, #3
 8000922:	f000 bf43 	b.w	80017ac <HAL_RCC_OscConfig+0x106c>
 8000926:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800092a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800092e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000932:	fa93 f3a3 	rbit	r3, r3
 8000936:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800093a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800093e:	fab3 f383 	clz	r3, r3
 8000942:	b2db      	uxtb	r3, r3
 8000944:	095b      	lsrs	r3, r3, #5
 8000946:	b2db      	uxtb	r3, r3
 8000948:	f043 0301 	orr.w	r3, r3, #1
 800094c:	b2db      	uxtb	r3, r3
 800094e:	2b01      	cmp	r3, #1
 8000950:	d102      	bne.n	8000958 <HAL_RCC_OscConfig+0x218>
 8000952:	4b47      	ldr	r3, [pc, #284]	; (8000a70 <HAL_RCC_OscConfig+0x330>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	e015      	b.n	8000984 <HAL_RCC_OscConfig+0x244>
 8000958:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800095c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000960:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000964:	fa93 f3a3 	rbit	r3, r3
 8000968:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800096c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000970:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000974:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000978:	fa93 f3a3 	rbit	r3, r3
 800097c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000980:	4b3b      	ldr	r3, [pc, #236]	; (8000a70 <HAL_RCC_OscConfig+0x330>)
 8000982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000984:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000988:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800098c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000990:	fa92 f2a2 	rbit	r2, r2
 8000994:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000998:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800099c:	fab2 f282 	clz	r2, r2
 80009a0:	b2d2      	uxtb	r2, r2
 80009a2:	f042 0220 	orr.w	r2, r2, #32
 80009a6:	b2d2      	uxtb	r2, r2
 80009a8:	f002 021f 	and.w	r2, r2, #31
 80009ac:	2101      	movs	r1, #1
 80009ae:	fa01 f202 	lsl.w	r2, r1, r2
 80009b2:	4013      	ands	r3, r2
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d0ab      	beq.n	8000910 <HAL_RCC_OscConfig+0x1d0>
 80009b8:	e05d      	b.n	8000a76 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009ba:	f7ff fdcf 	bl	800055c <HAL_GetTick>
 80009be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009c2:	e00a      	b.n	80009da <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009c4:	f7ff fdca 	bl	800055c <HAL_GetTick>
 80009c8:	4602      	mov	r2, r0
 80009ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80009ce:	1ad3      	subs	r3, r2, r3
 80009d0:	2b64      	cmp	r3, #100	; 0x64
 80009d2:	d902      	bls.n	80009da <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80009d4:	2303      	movs	r3, #3
 80009d6:	f000 bee9 	b.w	80017ac <HAL_RCC_OscConfig+0x106c>
 80009da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009de:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009e2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80009e6:	fa93 f3a3 	rbit	r3, r3
 80009ea:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80009ee:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009f2:	fab3 f383 	clz	r3, r3
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	095b      	lsrs	r3, r3, #5
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	f043 0301 	orr.w	r3, r3, #1
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d102      	bne.n	8000a0c <HAL_RCC_OscConfig+0x2cc>
 8000a06:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <HAL_RCC_OscConfig+0x330>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	e015      	b.n	8000a38 <HAL_RCC_OscConfig+0x2f8>
 8000a0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a10:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a14:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000a18:	fa93 f3a3 	rbit	r3, r3
 8000a1c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000a20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a24:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000a28:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000a2c:	fa93 f3a3 	rbit	r3, r3
 8000a30:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000a34:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <HAL_RCC_OscConfig+0x330>)
 8000a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a38:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a3c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000a40:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000a44:	fa92 f2a2 	rbit	r2, r2
 8000a48:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000a4c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000a50:	fab2 f282 	clz	r2, r2
 8000a54:	b2d2      	uxtb	r2, r2
 8000a56:	f042 0220 	orr.w	r2, r2, #32
 8000a5a:	b2d2      	uxtb	r2, r2
 8000a5c:	f002 021f 	and.w	r2, r2, #31
 8000a60:	2101      	movs	r1, #1
 8000a62:	fa01 f202 	lsl.w	r2, r1, r2
 8000a66:	4013      	ands	r3, r2
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d1ab      	bne.n	80009c4 <HAL_RCC_OscConfig+0x284>
 8000a6c:	e003      	b.n	8000a76 <HAL_RCC_OscConfig+0x336>
 8000a6e:	bf00      	nop
 8000a70:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000a7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f003 0302 	and.w	r3, r3, #2
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	f000 817d 	beq.w	8000d86 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000a8c:	4ba6      	ldr	r3, [pc, #664]	; (8000d28 <HAL_RCC_OscConfig+0x5e8>)
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	f003 030c 	and.w	r3, r3, #12
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d00b      	beq.n	8000ab0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000a98:	4ba3      	ldr	r3, [pc, #652]	; (8000d28 <HAL_RCC_OscConfig+0x5e8>)
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	f003 030c 	and.w	r3, r3, #12
 8000aa0:	2b08      	cmp	r3, #8
 8000aa2:	d172      	bne.n	8000b8a <HAL_RCC_OscConfig+0x44a>
 8000aa4:	4ba0      	ldr	r3, [pc, #640]	; (8000d28 <HAL_RCC_OscConfig+0x5e8>)
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d16c      	bne.n	8000b8a <HAL_RCC_OscConfig+0x44a>
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ab6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000aba:	fa93 f3a3 	rbit	r3, r3
 8000abe:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000ac2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ac6:	fab3 f383 	clz	r3, r3
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	095b      	lsrs	r3, r3, #5
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d102      	bne.n	8000ae0 <HAL_RCC_OscConfig+0x3a0>
 8000ada:	4b93      	ldr	r3, [pc, #588]	; (8000d28 <HAL_RCC_OscConfig+0x5e8>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	e013      	b.n	8000b08 <HAL_RCC_OscConfig+0x3c8>
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ae6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000aea:	fa93 f3a3 	rbit	r3, r3
 8000aee:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000af2:	2302      	movs	r3, #2
 8000af4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000af8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000afc:	fa93 f3a3 	rbit	r3, r3
 8000b00:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000b04:	4b88      	ldr	r3, [pc, #544]	; (8000d28 <HAL_RCC_OscConfig+0x5e8>)
 8000b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b08:	2202      	movs	r2, #2
 8000b0a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8000b0e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000b12:	fa92 f2a2 	rbit	r2, r2
 8000b16:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8000b1a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000b1e:	fab2 f282 	clz	r2, r2
 8000b22:	b2d2      	uxtb	r2, r2
 8000b24:	f042 0220 	orr.w	r2, r2, #32
 8000b28:	b2d2      	uxtb	r2, r2
 8000b2a:	f002 021f 	and.w	r2, r2, #31
 8000b2e:	2101      	movs	r1, #1
 8000b30:	fa01 f202 	lsl.w	r2, r1, r2
 8000b34:	4013      	ands	r3, r2
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d00a      	beq.n	8000b50 <HAL_RCC_OscConfig+0x410>
 8000b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000b3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	691b      	ldr	r3, [r3, #16]
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d002      	beq.n	8000b50 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	f000 be2e 	b.w	80017ac <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b50:	4b75      	ldr	r3, [pc, #468]	; (8000d28 <HAL_RCC_OscConfig+0x5e8>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000b5c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	695b      	ldr	r3, [r3, #20]
 8000b64:	21f8      	movs	r1, #248	; 0xf8
 8000b66:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b6a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000b6e:	fa91 f1a1 	rbit	r1, r1
 8000b72:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8000b76:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8000b7a:	fab1 f181 	clz	r1, r1
 8000b7e:	b2c9      	uxtb	r1, r1
 8000b80:	408b      	lsls	r3, r1
 8000b82:	4969      	ldr	r1, [pc, #420]	; (8000d28 <HAL_RCC_OscConfig+0x5e8>)
 8000b84:	4313      	orrs	r3, r2
 8000b86:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b88:	e0fd      	b.n	8000d86 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000b8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	691b      	ldr	r3, [r3, #16]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	f000 8088 	beq.w	8000cac <HAL_RCC_OscConfig+0x56c>
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ba2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8000ba6:	fa93 f3a3 	rbit	r3, r3
 8000baa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8000bae:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000bb2:	fab3 f383 	clz	r3, r3
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000bbc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bc8:	f7ff fcc8 	bl	800055c <HAL_GetTick>
 8000bcc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bd0:	e00a      	b.n	8000be8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bd2:	f7ff fcc3 	bl	800055c <HAL_GetTick>
 8000bd6:	4602      	mov	r2, r0
 8000bd8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	2b02      	cmp	r3, #2
 8000be0:	d902      	bls.n	8000be8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8000be2:	2303      	movs	r3, #3
 8000be4:	f000 bde2 	b.w	80017ac <HAL_RCC_OscConfig+0x106c>
 8000be8:	2302      	movs	r3, #2
 8000bea:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bee:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000bf2:	fa93 f3a3 	rbit	r3, r3
 8000bf6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8000bfa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bfe:	fab3 f383 	clz	r3, r3
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	095b      	lsrs	r3, r3, #5
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d102      	bne.n	8000c18 <HAL_RCC_OscConfig+0x4d8>
 8000c12:	4b45      	ldr	r3, [pc, #276]	; (8000d28 <HAL_RCC_OscConfig+0x5e8>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	e013      	b.n	8000c40 <HAL_RCC_OscConfig+0x500>
 8000c18:	2302      	movs	r3, #2
 8000c1a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c1e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8000c22:	fa93 f3a3 	rbit	r3, r3
 8000c26:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000c30:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000c34:	fa93 f3a3 	rbit	r3, r3
 8000c38:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8000c3c:	4b3a      	ldr	r3, [pc, #232]	; (8000d28 <HAL_RCC_OscConfig+0x5e8>)
 8000c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c40:	2202      	movs	r2, #2
 8000c42:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8000c46:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000c4a:	fa92 f2a2 	rbit	r2, r2
 8000c4e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8000c52:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8000c56:	fab2 f282 	clz	r2, r2
 8000c5a:	b2d2      	uxtb	r2, r2
 8000c5c:	f042 0220 	orr.w	r2, r2, #32
 8000c60:	b2d2      	uxtb	r2, r2
 8000c62:	f002 021f 	and.w	r2, r2, #31
 8000c66:	2101      	movs	r1, #1
 8000c68:	fa01 f202 	lsl.w	r2, r1, r2
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d0af      	beq.n	8000bd2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c72:	4b2d      	ldr	r3, [pc, #180]	; (8000d28 <HAL_RCC_OscConfig+0x5e8>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	695b      	ldr	r3, [r3, #20]
 8000c86:	21f8      	movs	r1, #248	; 0xf8
 8000c88:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c8c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8000c90:	fa91 f1a1 	rbit	r1, r1
 8000c94:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8000c98:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8000c9c:	fab1 f181 	clz	r1, r1
 8000ca0:	b2c9      	uxtb	r1, r1
 8000ca2:	408b      	lsls	r3, r1
 8000ca4:	4920      	ldr	r1, [pc, #128]	; (8000d28 <HAL_RCC_OscConfig+0x5e8>)
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	600b      	str	r3, [r1, #0]
 8000caa:	e06c      	b.n	8000d86 <HAL_RCC_OscConfig+0x646>
 8000cac:	2301      	movs	r3, #1
 8000cae:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cb2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8000cb6:	fa93 f3a3 	rbit	r3, r3
 8000cba:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8000cbe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cc2:	fab3 f383 	clz	r3, r3
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000ccc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cd8:	f7ff fc40 	bl	800055c <HAL_GetTick>
 8000cdc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ce0:	e00a      	b.n	8000cf8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ce2:	f7ff fc3b 	bl	800055c <HAL_GetTick>
 8000ce6:	4602      	mov	r2, r0
 8000ce8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d902      	bls.n	8000cf8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	f000 bd5a 	b.w	80017ac <HAL_RCC_OscConfig+0x106c>
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cfe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000d02:	fa93 f3a3 	rbit	r3, r3
 8000d06:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8000d0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d0e:	fab3 f383 	clz	r3, r3
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	095b      	lsrs	r3, r3, #5
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d104      	bne.n	8000d2c <HAL_RCC_OscConfig+0x5ec>
 8000d22:	4b01      	ldr	r3, [pc, #4]	; (8000d28 <HAL_RCC_OscConfig+0x5e8>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	e015      	b.n	8000d54 <HAL_RCC_OscConfig+0x614>
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d32:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000d36:	fa93 f3a3 	rbit	r3, r3
 8000d3a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000d3e:	2302      	movs	r3, #2
 8000d40:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000d44:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000d48:	fa93 f3a3 	rbit	r3, r3
 8000d4c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8000d50:	4bc8      	ldr	r3, [pc, #800]	; (8001074 <HAL_RCC_OscConfig+0x934>)
 8000d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d54:	2202      	movs	r2, #2
 8000d56:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8000d5a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000d5e:	fa92 f2a2 	rbit	r2, r2
 8000d62:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8000d66:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000d6a:	fab2 f282 	clz	r2, r2
 8000d6e:	b2d2      	uxtb	r2, r2
 8000d70:	f042 0220 	orr.w	r2, r2, #32
 8000d74:	b2d2      	uxtb	r2, r2
 8000d76:	f002 021f 	and.w	r2, r2, #31
 8000d7a:	2101      	movs	r1, #1
 8000d7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d80:	4013      	ands	r3, r2
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d1ad      	bne.n	8000ce2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f003 0308 	and.w	r3, r3, #8
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	f000 8110 	beq.w	8000fbc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000da0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d079      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x760>
 8000dac:	2301      	movs	r3, #1
 8000dae:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000db2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000db6:	fa93 f3a3 	rbit	r3, r3
 8000dba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8000dbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dc2:	fab3 f383 	clz	r3, r3
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4bab      	ldr	r3, [pc, #684]	; (8001078 <HAL_RCC_OscConfig+0x938>)
 8000dcc:	4413      	add	r3, r2
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dd6:	f7ff fbc1 	bl	800055c <HAL_GetTick>
 8000dda:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dde:	e00a      	b.n	8000df6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000de0:	f7ff fbbc 	bl	800055c <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d902      	bls.n	8000df6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8000df0:	2303      	movs	r3, #3
 8000df2:	f000 bcdb 	b.w	80017ac <HAL_RCC_OscConfig+0x106c>
 8000df6:	2302      	movs	r3, #2
 8000df8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dfc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000e00:	fa93 f3a3 	rbit	r3, r3
 8000e04:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000e08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e0c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000e10:	2202      	movs	r2, #2
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e18:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	fa93 f2a3 	rbit	r2, r3
 8000e22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000e34:	2202      	movs	r2, #2
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	fa93 f2a3 	rbit	r2, r3
 8000e46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e4a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000e4e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e50:	4b88      	ldr	r3, [pc, #544]	; (8001074 <HAL_RCC_OscConfig+0x934>)
 8000e52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e58:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000e5c:	2102      	movs	r1, #2
 8000e5e:	6019      	str	r1, [r3, #0]
 8000e60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e64:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	fa93 f1a3 	rbit	r1, r3
 8000e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e72:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000e76:	6019      	str	r1, [r3, #0]
  return result;
 8000e78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e7c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	fab3 f383 	clz	r3, r3
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	f003 031f 	and.w	r3, r3, #31
 8000e92:	2101      	movs	r1, #1
 8000e94:	fa01 f303 	lsl.w	r3, r1, r3
 8000e98:	4013      	ands	r3, r2
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d0a0      	beq.n	8000de0 <HAL_RCC_OscConfig+0x6a0>
 8000e9e:	e08d      	b.n	8000fbc <HAL_RCC_OscConfig+0x87c>
 8000ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ea4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000eb0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	fa93 f2a3 	rbit	r2, r3
 8000eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ebe:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000ec2:	601a      	str	r2, [r3, #0]
  return result;
 8000ec4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ec8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000ecc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ece:	fab3 f383 	clz	r3, r3
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	4b68      	ldr	r3, [pc, #416]	; (8001078 <HAL_RCC_OscConfig+0x938>)
 8000ed8:	4413      	add	r3, r2
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	461a      	mov	r2, r3
 8000ede:	2300      	movs	r3, #0
 8000ee0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ee2:	f7ff fb3b 	bl	800055c <HAL_GetTick>
 8000ee6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eea:	e00a      	b.n	8000f02 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000eec:	f7ff fb36 	bl	800055c <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ef6:	1ad3      	subs	r3, r2, r3
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d902      	bls.n	8000f02 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8000efc:	2303      	movs	r3, #3
 8000efe:	f000 bc55 	b.w	80017ac <HAL_RCC_OscConfig+0x106c>
 8000f02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f06:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000f0a:	2202      	movs	r2, #2
 8000f0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f12:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	fa93 f2a3 	rbit	r2, r3
 8000f1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f20:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f2a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000f2e:	2202      	movs	r2, #2
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f36:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	fa93 f2a3 	rbit	r2, r3
 8000f40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000f52:	2202      	movs	r2, #2
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	fa93 f2a3 	rbit	r2, r3
 8000f64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f68:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000f6c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f6e:	4b41      	ldr	r3, [pc, #260]	; (8001074 <HAL_RCC_OscConfig+0x934>)
 8000f70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f76:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000f7a:	2102      	movs	r1, #2
 8000f7c:	6019      	str	r1, [r3, #0]
 8000f7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f82:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	fa93 f1a3 	rbit	r1, r3
 8000f8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f90:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000f94:	6019      	str	r1, [r3, #0]
  return result;
 8000f96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f9a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	fab3 f383 	clz	r3, r3
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	f003 031f 	and.w	r3, r3, #31
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d197      	bne.n	8000eec <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fc0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f003 0304 	and.w	r3, r3, #4
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	f000 81a1 	beq.w	8001314 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fd8:	4b26      	ldr	r3, [pc, #152]	; (8001074 <HAL_RCC_OscConfig+0x934>)
 8000fda:	69db      	ldr	r3, [r3, #28]
 8000fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d116      	bne.n	8001012 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fe4:	4b23      	ldr	r3, [pc, #140]	; (8001074 <HAL_RCC_OscConfig+0x934>)
 8000fe6:	69db      	ldr	r3, [r3, #28]
 8000fe8:	4a22      	ldr	r2, [pc, #136]	; (8001074 <HAL_RCC_OscConfig+0x934>)
 8000fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fee:	61d3      	str	r3, [r2, #28]
 8000ff0:	4b20      	ldr	r3, [pc, #128]	; (8001074 <HAL_RCC_OscConfig+0x934>)
 8000ff2:	69db      	ldr	r3, [r3, #28]
 8000ff4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8000ff8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ffc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001006:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800100a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800100c:	2301      	movs	r3, #1
 800100e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001012:	4b1a      	ldr	r3, [pc, #104]	; (800107c <HAL_RCC_OscConfig+0x93c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800101a:	2b00      	cmp	r3, #0
 800101c:	d11a      	bne.n	8001054 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800101e:	4b17      	ldr	r3, [pc, #92]	; (800107c <HAL_RCC_OscConfig+0x93c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a16      	ldr	r2, [pc, #88]	; (800107c <HAL_RCC_OscConfig+0x93c>)
 8001024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001028:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800102a:	f7ff fa97 	bl	800055c <HAL_GetTick>
 800102e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001032:	e009      	b.n	8001048 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001034:	f7ff fa92 	bl	800055c <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	2b64      	cmp	r3, #100	; 0x64
 8001042:	d901      	bls.n	8001048 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001044:	2303      	movs	r3, #3
 8001046:	e3b1      	b.n	80017ac <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001048:	4b0c      	ldr	r3, [pc, #48]	; (800107c <HAL_RCC_OscConfig+0x93c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001050:	2b00      	cmp	r3, #0
 8001052:	d0ef      	beq.n	8001034 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001054:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001058:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d10d      	bne.n	8001080 <HAL_RCC_OscConfig+0x940>
 8001064:	4b03      	ldr	r3, [pc, #12]	; (8001074 <HAL_RCC_OscConfig+0x934>)
 8001066:	6a1b      	ldr	r3, [r3, #32]
 8001068:	4a02      	ldr	r2, [pc, #8]	; (8001074 <HAL_RCC_OscConfig+0x934>)
 800106a:	f043 0301 	orr.w	r3, r3, #1
 800106e:	6213      	str	r3, [r2, #32]
 8001070:	e03c      	b.n	80010ec <HAL_RCC_OscConfig+0x9ac>
 8001072:	bf00      	nop
 8001074:	40021000 	.word	0x40021000
 8001078:	10908120 	.word	0x10908120
 800107c:	40007000 	.word	0x40007000
 8001080:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001084:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d10c      	bne.n	80010aa <HAL_RCC_OscConfig+0x96a>
 8001090:	4bc1      	ldr	r3, [pc, #772]	; (8001398 <HAL_RCC_OscConfig+0xc58>)
 8001092:	6a1b      	ldr	r3, [r3, #32]
 8001094:	4ac0      	ldr	r2, [pc, #768]	; (8001398 <HAL_RCC_OscConfig+0xc58>)
 8001096:	f023 0301 	bic.w	r3, r3, #1
 800109a:	6213      	str	r3, [r2, #32]
 800109c:	4bbe      	ldr	r3, [pc, #760]	; (8001398 <HAL_RCC_OscConfig+0xc58>)
 800109e:	6a1b      	ldr	r3, [r3, #32]
 80010a0:	4abd      	ldr	r2, [pc, #756]	; (8001398 <HAL_RCC_OscConfig+0xc58>)
 80010a2:	f023 0304 	bic.w	r3, r3, #4
 80010a6:	6213      	str	r3, [r2, #32]
 80010a8:	e020      	b.n	80010ec <HAL_RCC_OscConfig+0x9ac>
 80010aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	2b05      	cmp	r3, #5
 80010b8:	d10c      	bne.n	80010d4 <HAL_RCC_OscConfig+0x994>
 80010ba:	4bb7      	ldr	r3, [pc, #732]	; (8001398 <HAL_RCC_OscConfig+0xc58>)
 80010bc:	6a1b      	ldr	r3, [r3, #32]
 80010be:	4ab6      	ldr	r2, [pc, #728]	; (8001398 <HAL_RCC_OscConfig+0xc58>)
 80010c0:	f043 0304 	orr.w	r3, r3, #4
 80010c4:	6213      	str	r3, [r2, #32]
 80010c6:	4bb4      	ldr	r3, [pc, #720]	; (8001398 <HAL_RCC_OscConfig+0xc58>)
 80010c8:	6a1b      	ldr	r3, [r3, #32]
 80010ca:	4ab3      	ldr	r2, [pc, #716]	; (8001398 <HAL_RCC_OscConfig+0xc58>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	6213      	str	r3, [r2, #32]
 80010d2:	e00b      	b.n	80010ec <HAL_RCC_OscConfig+0x9ac>
 80010d4:	4bb0      	ldr	r3, [pc, #704]	; (8001398 <HAL_RCC_OscConfig+0xc58>)
 80010d6:	6a1b      	ldr	r3, [r3, #32]
 80010d8:	4aaf      	ldr	r2, [pc, #700]	; (8001398 <HAL_RCC_OscConfig+0xc58>)
 80010da:	f023 0301 	bic.w	r3, r3, #1
 80010de:	6213      	str	r3, [r2, #32]
 80010e0:	4bad      	ldr	r3, [pc, #692]	; (8001398 <HAL_RCC_OscConfig+0xc58>)
 80010e2:	6a1b      	ldr	r3, [r3, #32]
 80010e4:	4aac      	ldr	r2, [pc, #688]	; (8001398 <HAL_RCC_OscConfig+0xc58>)
 80010e6:	f023 0304 	bic.w	r3, r3, #4
 80010ea:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	f000 8081 	beq.w	8001200 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010fe:	f7ff fa2d 	bl	800055c <HAL_GetTick>
 8001102:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001106:	e00b      	b.n	8001120 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001108:	f7ff fa28 	bl	800055c <HAL_GetTick>
 800110c:	4602      	mov	r2, r0
 800110e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	f241 3288 	movw	r2, #5000	; 0x1388
 8001118:	4293      	cmp	r3, r2
 800111a:	d901      	bls.n	8001120 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800111c:	2303      	movs	r3, #3
 800111e:	e345      	b.n	80017ac <HAL_RCC_OscConfig+0x106c>
 8001120:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001124:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001128:	2202      	movs	r2, #2
 800112a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800112c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001130:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	fa93 f2a3 	rbit	r2, r3
 800113a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800113e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001148:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800114c:	2202      	movs	r2, #2
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001154:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	fa93 f2a3 	rbit	r2, r3
 800115e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001162:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001166:	601a      	str	r2, [r3, #0]
  return result;
 8001168:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800116c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001170:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001172:	fab3 f383 	clz	r3, r3
 8001176:	b2db      	uxtb	r3, r3
 8001178:	095b      	lsrs	r3, r3, #5
 800117a:	b2db      	uxtb	r3, r3
 800117c:	f043 0302 	orr.w	r3, r3, #2
 8001180:	b2db      	uxtb	r3, r3
 8001182:	2b02      	cmp	r3, #2
 8001184:	d102      	bne.n	800118c <HAL_RCC_OscConfig+0xa4c>
 8001186:	4b84      	ldr	r3, [pc, #528]	; (8001398 <HAL_RCC_OscConfig+0xc58>)
 8001188:	6a1b      	ldr	r3, [r3, #32]
 800118a:	e013      	b.n	80011b4 <HAL_RCC_OscConfig+0xa74>
 800118c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001190:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001194:	2202      	movs	r2, #2
 8001196:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001198:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800119c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	fa93 f2a3 	rbit	r2, r3
 80011a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011aa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	4b79      	ldr	r3, [pc, #484]	; (8001398 <HAL_RCC_OscConfig+0xc58>)
 80011b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80011b8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80011bc:	2102      	movs	r1, #2
 80011be:	6011      	str	r1, [r2, #0]
 80011c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80011c4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80011c8:	6812      	ldr	r2, [r2, #0]
 80011ca:	fa92 f1a2 	rbit	r1, r2
 80011ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80011d2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80011d6:	6011      	str	r1, [r2, #0]
  return result;
 80011d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80011dc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80011e0:	6812      	ldr	r2, [r2, #0]
 80011e2:	fab2 f282 	clz	r2, r2
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011ec:	b2d2      	uxtb	r2, r2
 80011ee:	f002 021f 	and.w	r2, r2, #31
 80011f2:	2101      	movs	r1, #1
 80011f4:	fa01 f202 	lsl.w	r2, r1, r2
 80011f8:	4013      	ands	r3, r2
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d084      	beq.n	8001108 <HAL_RCC_OscConfig+0x9c8>
 80011fe:	e07f      	b.n	8001300 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001200:	f7ff f9ac 	bl	800055c <HAL_GetTick>
 8001204:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001208:	e00b      	b.n	8001222 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800120a:	f7ff f9a7 	bl	800055c <HAL_GetTick>
 800120e:	4602      	mov	r2, r0
 8001210:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	f241 3288 	movw	r2, #5000	; 0x1388
 800121a:	4293      	cmp	r3, r2
 800121c:	d901      	bls.n	8001222 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e2c4      	b.n	80017ac <HAL_RCC_OscConfig+0x106c>
 8001222:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001226:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800122a:	2202      	movs	r2, #2
 800122c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800122e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001232:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	fa93 f2a3 	rbit	r2, r3
 800123c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001240:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800124a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800124e:	2202      	movs	r2, #2
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001256:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	fa93 f2a3 	rbit	r2, r3
 8001260:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001264:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001268:	601a      	str	r2, [r3, #0]
  return result;
 800126a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800126e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001272:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001274:	fab3 f383 	clz	r3, r3
 8001278:	b2db      	uxtb	r3, r3
 800127a:	095b      	lsrs	r3, r3, #5
 800127c:	b2db      	uxtb	r3, r3
 800127e:	f043 0302 	orr.w	r3, r3, #2
 8001282:	b2db      	uxtb	r3, r3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d102      	bne.n	800128e <HAL_RCC_OscConfig+0xb4e>
 8001288:	4b43      	ldr	r3, [pc, #268]	; (8001398 <HAL_RCC_OscConfig+0xc58>)
 800128a:	6a1b      	ldr	r3, [r3, #32]
 800128c:	e013      	b.n	80012b6 <HAL_RCC_OscConfig+0xb76>
 800128e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001292:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001296:	2202      	movs	r2, #2
 8001298:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800129e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	fa93 f2a3 	rbit	r2, r3
 80012a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012ac:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	4b39      	ldr	r3, [pc, #228]	; (8001398 <HAL_RCC_OscConfig+0xc58>)
 80012b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80012ba:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80012be:	2102      	movs	r1, #2
 80012c0:	6011      	str	r1, [r2, #0]
 80012c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80012c6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80012ca:	6812      	ldr	r2, [r2, #0]
 80012cc:	fa92 f1a2 	rbit	r1, r2
 80012d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80012d4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80012d8:	6011      	str	r1, [r2, #0]
  return result;
 80012da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80012de:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80012e2:	6812      	ldr	r2, [r2, #0]
 80012e4:	fab2 f282 	clz	r2, r2
 80012e8:	b2d2      	uxtb	r2, r2
 80012ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012ee:	b2d2      	uxtb	r2, r2
 80012f0:	f002 021f 	and.w	r2, r2, #31
 80012f4:	2101      	movs	r1, #1
 80012f6:	fa01 f202 	lsl.w	r2, r1, r2
 80012fa:	4013      	ands	r3, r2
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d184      	bne.n	800120a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001300:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001304:	2b01      	cmp	r3, #1
 8001306:	d105      	bne.n	8001314 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001308:	4b23      	ldr	r3, [pc, #140]	; (8001398 <HAL_RCC_OscConfig+0xc58>)
 800130a:	69db      	ldr	r3, [r3, #28]
 800130c:	4a22      	ldr	r2, [pc, #136]	; (8001398 <HAL_RCC_OscConfig+0xc58>)
 800130e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001312:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001314:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001318:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	69db      	ldr	r3, [r3, #28]
 8001320:	2b00      	cmp	r3, #0
 8001322:	f000 8242 	beq.w	80017aa <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001326:	4b1c      	ldr	r3, [pc, #112]	; (8001398 <HAL_RCC_OscConfig+0xc58>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f003 030c 	and.w	r3, r3, #12
 800132e:	2b08      	cmp	r3, #8
 8001330:	f000 8213 	beq.w	800175a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001334:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001338:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	69db      	ldr	r3, [r3, #28]
 8001340:	2b02      	cmp	r3, #2
 8001342:	f040 8162 	bne.w	800160a <HAL_RCC_OscConfig+0xeca>
 8001346:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800134a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800134e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001352:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001354:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001358:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	fa93 f2a3 	rbit	r2, r3
 8001362:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001366:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800136a:	601a      	str	r2, [r3, #0]
  return result;
 800136c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001370:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001374:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001376:	fab3 f383 	clz	r3, r3
 800137a:	b2db      	uxtb	r3, r3
 800137c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001380:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	461a      	mov	r2, r3
 8001388:	2300      	movs	r3, #0
 800138a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138c:	f7ff f8e6 	bl	800055c <HAL_GetTick>
 8001390:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001394:	e00c      	b.n	80013b0 <HAL_RCC_OscConfig+0xc70>
 8001396:	bf00      	nop
 8001398:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800139c:	f7ff f8de 	bl	800055c <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e1fd      	b.n	80017ac <HAL_RCC_OscConfig+0x106c>
 80013b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013b4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80013b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013c2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	fa93 f2a3 	rbit	r2, r3
 80013cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013d0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80013d4:	601a      	str	r2, [r3, #0]
  return result;
 80013d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013da:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80013de:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013e0:	fab3 f383 	clz	r3, r3
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	095b      	lsrs	r3, r3, #5
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	f043 0301 	orr.w	r3, r3, #1
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d102      	bne.n	80013fa <HAL_RCC_OscConfig+0xcba>
 80013f4:	4bb0      	ldr	r3, [pc, #704]	; (80016b8 <HAL_RCC_OscConfig+0xf78>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	e027      	b.n	800144a <HAL_RCC_OscConfig+0xd0a>
 80013fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013fe:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001402:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001406:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001408:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800140c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	fa93 f2a3 	rbit	r2, r3
 8001416:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800141a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001424:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001428:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001432:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	fa93 f2a3 	rbit	r2, r3
 800143c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001440:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	4b9c      	ldr	r3, [pc, #624]	; (80016b8 <HAL_RCC_OscConfig+0xf78>)
 8001448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800144e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001452:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001456:	6011      	str	r1, [r2, #0]
 8001458:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800145c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001460:	6812      	ldr	r2, [r2, #0]
 8001462:	fa92 f1a2 	rbit	r1, r2
 8001466:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800146a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800146e:	6011      	str	r1, [r2, #0]
  return result;
 8001470:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001474:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001478:	6812      	ldr	r2, [r2, #0]
 800147a:	fab2 f282 	clz	r2, r2
 800147e:	b2d2      	uxtb	r2, r2
 8001480:	f042 0220 	orr.w	r2, r2, #32
 8001484:	b2d2      	uxtb	r2, r2
 8001486:	f002 021f 	and.w	r2, r2, #31
 800148a:	2101      	movs	r1, #1
 800148c:	fa01 f202 	lsl.w	r2, r1, r2
 8001490:	4013      	ands	r3, r2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d182      	bne.n	800139c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001496:	4b88      	ldr	r3, [pc, #544]	; (80016b8 <HAL_RCC_OscConfig+0xf78>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800149e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80014aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6a1b      	ldr	r3, [r3, #32]
 80014b6:	430b      	orrs	r3, r1
 80014b8:	497f      	ldr	r1, [pc, #508]	; (80016b8 <HAL_RCC_OscConfig+0xf78>)
 80014ba:	4313      	orrs	r3, r2
 80014bc:	604b      	str	r3, [r1, #4]
 80014be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014c2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80014c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80014ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	fa93 f2a3 	rbit	r2, r3
 80014da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014de:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80014e2:	601a      	str	r2, [r3, #0]
  return result;
 80014e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014e8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80014ec:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014ee:	fab3 f383 	clz	r3, r3
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80014f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	461a      	mov	r2, r3
 8001500:	2301      	movs	r3, #1
 8001502:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001504:	f7ff f82a 	bl	800055c <HAL_GetTick>
 8001508:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800150c:	e009      	b.n	8001522 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800150e:	f7ff f825 	bl	800055c <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e144      	b.n	80017ac <HAL_RCC_OscConfig+0x106c>
 8001522:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001526:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800152a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800152e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001530:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001534:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	fa93 f2a3 	rbit	r2, r3
 800153e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001542:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001546:	601a      	str	r2, [r3, #0]
  return result;
 8001548:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800154c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001550:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001552:	fab3 f383 	clz	r3, r3
 8001556:	b2db      	uxtb	r3, r3
 8001558:	095b      	lsrs	r3, r3, #5
 800155a:	b2db      	uxtb	r3, r3
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b01      	cmp	r3, #1
 8001564:	d102      	bne.n	800156c <HAL_RCC_OscConfig+0xe2c>
 8001566:	4b54      	ldr	r3, [pc, #336]	; (80016b8 <HAL_RCC_OscConfig+0xf78>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	e027      	b.n	80015bc <HAL_RCC_OscConfig+0xe7c>
 800156c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001570:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001574:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001578:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800157a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800157e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	fa93 f2a3 	rbit	r2, r3
 8001588:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800158c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001596:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800159a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	fa93 f2a3 	rbit	r2, r3
 80015ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015b2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	4b3f      	ldr	r3, [pc, #252]	; (80016b8 <HAL_RCC_OscConfig+0xf78>)
 80015ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80015c0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80015c4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80015c8:	6011      	str	r1, [r2, #0]
 80015ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80015ce:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80015d2:	6812      	ldr	r2, [r2, #0]
 80015d4:	fa92 f1a2 	rbit	r1, r2
 80015d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80015dc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80015e0:	6011      	str	r1, [r2, #0]
  return result;
 80015e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80015e6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80015ea:	6812      	ldr	r2, [r2, #0]
 80015ec:	fab2 f282 	clz	r2, r2
 80015f0:	b2d2      	uxtb	r2, r2
 80015f2:	f042 0220 	orr.w	r2, r2, #32
 80015f6:	b2d2      	uxtb	r2, r2
 80015f8:	f002 021f 	and.w	r2, r2, #31
 80015fc:	2101      	movs	r1, #1
 80015fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001602:	4013      	ands	r3, r2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d082      	beq.n	800150e <HAL_RCC_OscConfig+0xdce>
 8001608:	e0cf      	b.n	80017aa <HAL_RCC_OscConfig+0x106a>
 800160a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800160e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001612:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001616:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001618:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800161c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	fa93 f2a3 	rbit	r2, r3
 8001626:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800162a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800162e:	601a      	str	r2, [r3, #0]
  return result;
 8001630:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001634:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001638:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800163a:	fab3 f383 	clz	r3, r3
 800163e:	b2db      	uxtb	r3, r3
 8001640:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001644:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	461a      	mov	r2, r3
 800164c:	2300      	movs	r3, #0
 800164e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001650:	f7fe ff84 	bl	800055c <HAL_GetTick>
 8001654:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001658:	e009      	b.n	800166e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800165a:	f7fe ff7f 	bl	800055c <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b02      	cmp	r3, #2
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e09e      	b.n	80017ac <HAL_RCC_OscConfig+0x106c>
 800166e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001672:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001676:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800167a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800167c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001680:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	fa93 f2a3 	rbit	r2, r3
 800168a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800168e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001692:	601a      	str	r2, [r3, #0]
  return result;
 8001694:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001698:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800169c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800169e:	fab3 f383 	clz	r3, r3
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	095b      	lsrs	r3, r3, #5
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d104      	bne.n	80016bc <HAL_RCC_OscConfig+0xf7c>
 80016b2:	4b01      	ldr	r3, [pc, #4]	; (80016b8 <HAL_RCC_OscConfig+0xf78>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	e029      	b.n	800170c <HAL_RCC_OscConfig+0xfcc>
 80016b8:	40021000 	.word	0x40021000
 80016bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80016c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ce:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	fa93 f2a3 	rbit	r2, r3
 80016d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016dc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80016ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016f4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	fa93 f2a3 	rbit	r2, r3
 80016fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001702:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	4b2b      	ldr	r3, [pc, #172]	; (80017b8 <HAL_RCC_OscConfig+0x1078>)
 800170a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001710:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001714:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001718:	6011      	str	r1, [r2, #0]
 800171a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800171e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001722:	6812      	ldr	r2, [r2, #0]
 8001724:	fa92 f1a2 	rbit	r1, r2
 8001728:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800172c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001730:	6011      	str	r1, [r2, #0]
  return result;
 8001732:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001736:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800173a:	6812      	ldr	r2, [r2, #0]
 800173c:	fab2 f282 	clz	r2, r2
 8001740:	b2d2      	uxtb	r2, r2
 8001742:	f042 0220 	orr.w	r2, r2, #32
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	f002 021f 	and.w	r2, r2, #31
 800174c:	2101      	movs	r1, #1
 800174e:	fa01 f202 	lsl.w	r2, r1, r2
 8001752:	4013      	ands	r3, r2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d180      	bne.n	800165a <HAL_RCC_OscConfig+0xf1a>
 8001758:	e027      	b.n	80017aa <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800175a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800175e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	69db      	ldr	r3, [r3, #28]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d101      	bne.n	800176e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e01e      	b.n	80017ac <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800176e:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <HAL_RCC_OscConfig+0x1078>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001776:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800177a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800177e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001782:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	6a1b      	ldr	r3, [r3, #32]
 800178a:	429a      	cmp	r2, r3
 800178c:	d10b      	bne.n	80017a6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800178e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001792:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001796:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800179a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d001      	beq.n	80017aa <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e000      	b.n	80017ac <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40021000 	.word	0x40021000

080017bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b09e      	sub	sp, #120	; 0x78
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80017c6:	2300      	movs	r3, #0
 80017c8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d101      	bne.n	80017d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e162      	b.n	8001a9a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017d4:	4b90      	ldr	r3, [pc, #576]	; (8001a18 <HAL_RCC_ClockConfig+0x25c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0307 	and.w	r3, r3, #7
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d910      	bls.n	8001804 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017e2:	4b8d      	ldr	r3, [pc, #564]	; (8001a18 <HAL_RCC_ClockConfig+0x25c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f023 0207 	bic.w	r2, r3, #7
 80017ea:	498b      	ldr	r1, [pc, #556]	; (8001a18 <HAL_RCC_ClockConfig+0x25c>)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017f2:	4b89      	ldr	r3, [pc, #548]	; (8001a18 <HAL_RCC_ClockConfig+0x25c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d001      	beq.n	8001804 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e14a      	b.n	8001a9a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d008      	beq.n	8001822 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001810:	4b82      	ldr	r3, [pc, #520]	; (8001a1c <HAL_RCC_ClockConfig+0x260>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	497f      	ldr	r1, [pc, #508]	; (8001a1c <HAL_RCC_ClockConfig+0x260>)
 800181e:	4313      	orrs	r3, r2
 8001820:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b00      	cmp	r3, #0
 800182c:	f000 80dc 	beq.w	80019e8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d13c      	bne.n	80018b2 <HAL_RCC_ClockConfig+0xf6>
 8001838:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800183c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001840:	fa93 f3a3 	rbit	r3, r3
 8001844:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001846:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001848:	fab3 f383 	clz	r3, r3
 800184c:	b2db      	uxtb	r3, r3
 800184e:	095b      	lsrs	r3, r3, #5
 8001850:	b2db      	uxtb	r3, r3
 8001852:	f043 0301 	orr.w	r3, r3, #1
 8001856:	b2db      	uxtb	r3, r3
 8001858:	2b01      	cmp	r3, #1
 800185a:	d102      	bne.n	8001862 <HAL_RCC_ClockConfig+0xa6>
 800185c:	4b6f      	ldr	r3, [pc, #444]	; (8001a1c <HAL_RCC_ClockConfig+0x260>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	e00f      	b.n	8001882 <HAL_RCC_ClockConfig+0xc6>
 8001862:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001866:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001868:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800186a:	fa93 f3a3 	rbit	r3, r3
 800186e:	667b      	str	r3, [r7, #100]	; 0x64
 8001870:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001874:	663b      	str	r3, [r7, #96]	; 0x60
 8001876:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001878:	fa93 f3a3 	rbit	r3, r3
 800187c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800187e:	4b67      	ldr	r3, [pc, #412]	; (8001a1c <HAL_RCC_ClockConfig+0x260>)
 8001880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001882:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001886:	65ba      	str	r2, [r7, #88]	; 0x58
 8001888:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800188a:	fa92 f2a2 	rbit	r2, r2
 800188e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001890:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001892:	fab2 f282 	clz	r2, r2
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	f042 0220 	orr.w	r2, r2, #32
 800189c:	b2d2      	uxtb	r2, r2
 800189e:	f002 021f 	and.w	r2, r2, #31
 80018a2:	2101      	movs	r1, #1
 80018a4:	fa01 f202 	lsl.w	r2, r1, r2
 80018a8:	4013      	ands	r3, r2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d17b      	bne.n	80019a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e0f3      	b.n	8001a9a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d13c      	bne.n	8001934 <HAL_RCC_ClockConfig+0x178>
 80018ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018be:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018c2:	fa93 f3a3 	rbit	r3, r3
 80018c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80018c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ca:	fab3 f383 	clz	r3, r3
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	095b      	lsrs	r3, r3, #5
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d102      	bne.n	80018e4 <HAL_RCC_ClockConfig+0x128>
 80018de:	4b4f      	ldr	r3, [pc, #316]	; (8001a1c <HAL_RCC_ClockConfig+0x260>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	e00f      	b.n	8001904 <HAL_RCC_ClockConfig+0x148>
 80018e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018e8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018ec:	fa93 f3a3 	rbit	r3, r3
 80018f0:	647b      	str	r3, [r7, #68]	; 0x44
 80018f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018f6:	643b      	str	r3, [r7, #64]	; 0x40
 80018f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018fa:	fa93 f3a3 	rbit	r3, r3
 80018fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001900:	4b46      	ldr	r3, [pc, #280]	; (8001a1c <HAL_RCC_ClockConfig+0x260>)
 8001902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001904:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001908:	63ba      	str	r2, [r7, #56]	; 0x38
 800190a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800190c:	fa92 f2a2 	rbit	r2, r2
 8001910:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001912:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001914:	fab2 f282 	clz	r2, r2
 8001918:	b2d2      	uxtb	r2, r2
 800191a:	f042 0220 	orr.w	r2, r2, #32
 800191e:	b2d2      	uxtb	r2, r2
 8001920:	f002 021f 	and.w	r2, r2, #31
 8001924:	2101      	movs	r1, #1
 8001926:	fa01 f202 	lsl.w	r2, r1, r2
 800192a:	4013      	ands	r3, r2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d13a      	bne.n	80019a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e0b2      	b.n	8001a9a <HAL_RCC_ClockConfig+0x2de>
 8001934:	2302      	movs	r3, #2
 8001936:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800193a:	fa93 f3a3 	rbit	r3, r3
 800193e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001942:	fab3 f383 	clz	r3, r3
 8001946:	b2db      	uxtb	r3, r3
 8001948:	095b      	lsrs	r3, r3, #5
 800194a:	b2db      	uxtb	r3, r3
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b01      	cmp	r3, #1
 8001954:	d102      	bne.n	800195c <HAL_RCC_ClockConfig+0x1a0>
 8001956:	4b31      	ldr	r3, [pc, #196]	; (8001a1c <HAL_RCC_ClockConfig+0x260>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	e00d      	b.n	8001978 <HAL_RCC_ClockConfig+0x1bc>
 800195c:	2302      	movs	r3, #2
 800195e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001962:	fa93 f3a3 	rbit	r3, r3
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
 8001968:	2302      	movs	r3, #2
 800196a:	623b      	str	r3, [r7, #32]
 800196c:	6a3b      	ldr	r3, [r7, #32]
 800196e:	fa93 f3a3 	rbit	r3, r3
 8001972:	61fb      	str	r3, [r7, #28]
 8001974:	4b29      	ldr	r3, [pc, #164]	; (8001a1c <HAL_RCC_ClockConfig+0x260>)
 8001976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001978:	2202      	movs	r2, #2
 800197a:	61ba      	str	r2, [r7, #24]
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	fa92 f2a2 	rbit	r2, r2
 8001982:	617a      	str	r2, [r7, #20]
  return result;
 8001984:	697a      	ldr	r2, [r7, #20]
 8001986:	fab2 f282 	clz	r2, r2
 800198a:	b2d2      	uxtb	r2, r2
 800198c:	f042 0220 	orr.w	r2, r2, #32
 8001990:	b2d2      	uxtb	r2, r2
 8001992:	f002 021f 	and.w	r2, r2, #31
 8001996:	2101      	movs	r1, #1
 8001998:	fa01 f202 	lsl.w	r2, r1, r2
 800199c:	4013      	ands	r3, r2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e079      	b.n	8001a9a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019a6:	4b1d      	ldr	r3, [pc, #116]	; (8001a1c <HAL_RCC_ClockConfig+0x260>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f023 0203 	bic.w	r2, r3, #3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	491a      	ldr	r1, [pc, #104]	; (8001a1c <HAL_RCC_ClockConfig+0x260>)
 80019b4:	4313      	orrs	r3, r2
 80019b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019b8:	f7fe fdd0 	bl	800055c <HAL_GetTick>
 80019bc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019be:	e00a      	b.n	80019d6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019c0:	f7fe fdcc 	bl	800055c <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e061      	b.n	8001a9a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019d6:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <HAL_RCC_ClockConfig+0x260>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f003 020c 	and.w	r2, r3, #12
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d1eb      	bne.n	80019c0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019e8:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <HAL_RCC_ClockConfig+0x25c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0307 	and.w	r3, r3, #7
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d214      	bcs.n	8001a20 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f6:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <HAL_RCC_ClockConfig+0x25c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f023 0207 	bic.w	r2, r3, #7
 80019fe:	4906      	ldr	r1, [pc, #24]	; (8001a18 <HAL_RCC_ClockConfig+0x25c>)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a06:	4b04      	ldr	r3, [pc, #16]	; (8001a18 <HAL_RCC_ClockConfig+0x25c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	683a      	ldr	r2, [r7, #0]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d005      	beq.n	8001a20 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e040      	b.n	8001a9a <HAL_RCC_ClockConfig+0x2de>
 8001a18:	40022000 	.word	0x40022000
 8001a1c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0304 	and.w	r3, r3, #4
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d008      	beq.n	8001a3e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a2c:	4b1d      	ldr	r3, [pc, #116]	; (8001aa4 <HAL_RCC_ClockConfig+0x2e8>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	491a      	ldr	r1, [pc, #104]	; (8001aa4 <HAL_RCC_ClockConfig+0x2e8>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0308 	and.w	r3, r3, #8
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d009      	beq.n	8001a5e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a4a:	4b16      	ldr	r3, [pc, #88]	; (8001aa4 <HAL_RCC_ClockConfig+0x2e8>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	4912      	ldr	r1, [pc, #72]	; (8001aa4 <HAL_RCC_ClockConfig+0x2e8>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001a5e:	f000 f829 	bl	8001ab4 <HAL_RCC_GetSysClockFreq>
 8001a62:	4601      	mov	r1, r0
 8001a64:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <HAL_RCC_ClockConfig+0x2e8>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a6c:	22f0      	movs	r2, #240	; 0xf0
 8001a6e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	fa92 f2a2 	rbit	r2, r2
 8001a76:	60fa      	str	r2, [r7, #12]
  return result;
 8001a78:	68fa      	ldr	r2, [r7, #12]
 8001a7a:	fab2 f282 	clz	r2, r2
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	40d3      	lsrs	r3, r2
 8001a82:	4a09      	ldr	r2, [pc, #36]	; (8001aa8 <HAL_RCC_ClockConfig+0x2ec>)
 8001a84:	5cd3      	ldrb	r3, [r2, r3]
 8001a86:	fa21 f303 	lsr.w	r3, r1, r3
 8001a8a:	4a08      	ldr	r2, [pc, #32]	; (8001aac <HAL_RCC_ClockConfig+0x2f0>)
 8001a8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001a8e:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <HAL_RCC_ClockConfig+0x2f4>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7fe fd1e 	bl	80004d4 <HAL_InitTick>
  
  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3778      	adds	r7, #120	; 0x78
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	080022c8 	.word	0x080022c8
 8001aac:	20000000 	.word	0x20000000
 8001ab0:	20000004 	.word	0x20000004

08001ab4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b08b      	sub	sp, #44	; 0x2c
 8001ab8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001aba:	2300      	movs	r3, #0
 8001abc:	61fb      	str	r3, [r7, #28]
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61bb      	str	r3, [r7, #24]
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001aca:	2300      	movs	r3, #0
 8001acc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001ace:	4b29      	ldr	r3, [pc, #164]	; (8001b74 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	f003 030c 	and.w	r3, r3, #12
 8001ada:	2b04      	cmp	r3, #4
 8001adc:	d002      	beq.n	8001ae4 <HAL_RCC_GetSysClockFreq+0x30>
 8001ade:	2b08      	cmp	r3, #8
 8001ae0:	d003      	beq.n	8001aea <HAL_RCC_GetSysClockFreq+0x36>
 8001ae2:	e03c      	b.n	8001b5e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ae4:	4b24      	ldr	r3, [pc, #144]	; (8001b78 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ae6:	623b      	str	r3, [r7, #32]
      break;
 8001ae8:	e03c      	b.n	8001b64 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001af0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001af4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af6:	68ba      	ldr	r2, [r7, #8]
 8001af8:	fa92 f2a2 	rbit	r2, r2
 8001afc:	607a      	str	r2, [r7, #4]
  return result;
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	fab2 f282 	clz	r2, r2
 8001b04:	b2d2      	uxtb	r2, r2
 8001b06:	40d3      	lsrs	r3, r2
 8001b08:	4a1c      	ldr	r2, [pc, #112]	; (8001b7c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001b0a:	5cd3      	ldrb	r3, [r2, r3]
 8001b0c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001b0e:	4b19      	ldr	r3, [pc, #100]	; (8001b74 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b12:	f003 030f 	and.w	r3, r3, #15
 8001b16:	220f      	movs	r2, #15
 8001b18:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	fa92 f2a2 	rbit	r2, r2
 8001b20:	60fa      	str	r2, [r7, #12]
  return result;
 8001b22:	68fa      	ldr	r2, [r7, #12]
 8001b24:	fab2 f282 	clz	r2, r2
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	40d3      	lsrs	r3, r2
 8001b2c:	4a14      	ldr	r2, [pc, #80]	; (8001b80 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001b2e:	5cd3      	ldrb	r3, [r2, r3]
 8001b30:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d008      	beq.n	8001b4e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b3c:	4a0e      	ldr	r2, [pc, #56]	; (8001b78 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	fb02 f303 	mul.w	r3, r2, r3
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b4c:	e004      	b.n	8001b58 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	4a0c      	ldr	r2, [pc, #48]	; (8001b84 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001b52:	fb02 f303 	mul.w	r3, r2, r3
 8001b56:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5a:	623b      	str	r3, [r7, #32]
      break;
 8001b5c:	e002      	b.n	8001b64 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b5e:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001b60:	623b      	str	r3, [r7, #32]
      break;
 8001b62:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b64:	6a3b      	ldr	r3, [r7, #32]
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	372c      	adds	r7, #44	; 0x2c
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	40021000 	.word	0x40021000
 8001b78:	007a1200 	.word	0x007a1200
 8001b7c:	080022d8 	.word	0x080022d8
 8001b80:	080022e8 	.word	0x080022e8
 8001b84:	003d0900 	.word	0x003d0900

08001b88 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b092      	sub	sp, #72	; 0x48
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b90:	2300      	movs	r3, #0
 8001b92:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8001b94:	2300      	movs	r3, #0
 8001b96:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f000 80cd 	beq.w	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bac:	4b86      	ldr	r3, [pc, #536]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001bae:	69db      	ldr	r3, [r3, #28]
 8001bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d10e      	bne.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bb8:	4b83      	ldr	r3, [pc, #524]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001bba:	69db      	ldr	r3, [r3, #28]
 8001bbc:	4a82      	ldr	r2, [pc, #520]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001bbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc2:	61d3      	str	r3, [r2, #28]
 8001bc4:	4b80      	ldr	r3, [pc, #512]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001bc6:	69db      	ldr	r3, [r3, #28]
 8001bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bcc:	60bb      	str	r3, [r7, #8]
 8001bce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd6:	4b7d      	ldr	r3, [pc, #500]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d118      	bne.n	8001c14 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001be2:	4b7a      	ldr	r3, [pc, #488]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a79      	ldr	r2, [pc, #484]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bee:	f7fe fcb5 	bl	800055c <HAL_GetTick>
 8001bf2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf4:	e008      	b.n	8001c08 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bf6:	f7fe fcb1 	bl	800055c <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b64      	cmp	r3, #100	; 0x64
 8001c02:	d901      	bls.n	8001c08 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e0db      	b.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c08:	4b70      	ldr	r3, [pc, #448]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d0f0      	beq.n	8001bf6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c14:	4b6c      	ldr	r3, [pc, #432]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d07d      	beq.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d076      	beq.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c32:	4b65      	ldr	r3, [pc, #404]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001c34:	6a1b      	ldr	r3, [r3, #32]
 8001c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c40:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c44:	fa93 f3a3 	rbit	r3, r3
 8001c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c4c:	fab3 f383 	clz	r3, r3
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	461a      	mov	r2, r3
 8001c54:	4b5e      	ldr	r3, [pc, #376]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c56:	4413      	add	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	6013      	str	r3, [r2, #0]
 8001c60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c64:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c68:	fa93 f3a3 	rbit	r3, r3
 8001c6c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c70:	fab3 f383 	clz	r3, r3
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	461a      	mov	r2, r3
 8001c78:	4b55      	ldr	r3, [pc, #340]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c7a:	4413      	add	r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	461a      	mov	r2, r3
 8001c80:	2300      	movs	r3, #0
 8001c82:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001c84:	4a50      	ldr	r2, [pc, #320]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001c86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c88:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d045      	beq.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c94:	f7fe fc62 	bl	800055c <HAL_GetTick>
 8001c98:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c9a:	e00a      	b.n	8001cb2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c9c:	f7fe fc5e 	bl	800055c <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e086      	b.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cb8:	fa93 f3a3 	rbit	r3, r3
 8001cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	623b      	str	r3, [r7, #32]
 8001cc2:	6a3b      	ldr	r3, [r7, #32]
 8001cc4:	fa93 f3a3 	rbit	r3, r3
 8001cc8:	61fb      	str	r3, [r7, #28]
  return result;
 8001cca:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ccc:	fab3 f383 	clz	r3, r3
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	095b      	lsrs	r3, r3, #5
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	f043 0302 	orr.w	r3, r3, #2
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d102      	bne.n	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8001ce0:	4b39      	ldr	r3, [pc, #228]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	e007      	b.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	fa93 f3a3 	rbit	r3, r3
 8001cf0:	617b      	str	r3, [r7, #20]
 8001cf2:	4b35      	ldr	r3, [pc, #212]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	613a      	str	r2, [r7, #16]
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	fa92 f2a2 	rbit	r2, r2
 8001d00:	60fa      	str	r2, [r7, #12]
  return result;
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	fab2 f282 	clz	r2, r2
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	f002 021f 	and.w	r2, r2, #31
 8001d14:	2101      	movs	r1, #1
 8001d16:	fa01 f202 	lsl.w	r2, r1, r2
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d0bd      	beq.n	8001c9c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001d20:	4b29      	ldr	r3, [pc, #164]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	4926      	ldr	r1, [pc, #152]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d32:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d105      	bne.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d3a:	4b23      	ldr	r3, [pc, #140]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	4a22      	ldr	r2, [pc, #136]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001d40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d44:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d008      	beq.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d52:	4b1d      	ldr	r3, [pc, #116]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	f023 0203 	bic.w	r2, r3, #3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	491a      	ldr	r1, [pc, #104]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001d60:	4313      	orrs	r3, r2
 8001d62:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0320 	and.w	r3, r3, #32
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d008      	beq.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d70:	4b15      	ldr	r3, [pc, #84]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d74:	f023 0210 	bic.w	r2, r3, #16
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	4912      	ldr	r1, [pc, #72]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d008      	beq.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001d8e:	4b0e      	ldr	r3, [pc, #56]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d92:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	490b      	ldr	r1, [pc, #44]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d008      	beq.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001dac:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	695b      	ldr	r3, [r3, #20]
 8001db8:	4903      	ldr	r1, [pc, #12]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3748      	adds	r7, #72	; 0x48
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	40007000 	.word	0x40007000
 8001dd0:	10908100 	.word	0x10908100

08001dd4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e073      	b.n	8001ed2 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	7f5b      	ldrb	r3, [r3, #29]
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d105      	bne.n	8001e00 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7fe fac8 	bl	8000390 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2202      	movs	r2, #2
 8001e04:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	f003 0310 	and.w	r3, r3, #16
 8001e10:	2b10      	cmp	r3, #16
 8001e12:	d055      	beq.n	8001ec0 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	22ca      	movs	r2, #202	; 0xca
 8001e1a:	625a      	str	r2, [r3, #36]	; 0x24
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2253      	movs	r2, #83	; 0x53
 8001e22:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 f99d 	bl	8002164 <RTC_EnterInitMode>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d12c      	bne.n	8001e8e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6812      	ldr	r2, [r2, #0]
 8001e3e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8001e42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e46:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6899      	ldr	r1, [r3, #8]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685a      	ldr	r2, [r3, #4]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	431a      	orrs	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	695b      	ldr	r3, [r3, #20]
 8001e5c:	431a      	orrs	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	68d2      	ldr	r2, [r2, #12]
 8001e6e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6919      	ldr	r1, [r3, #16]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	041a      	lsls	r2, r3, #16
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	430a      	orrs	r2, r1
 8001e82:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 f9a4 	bl	80021d2 <RTC_ExitInitMode>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8001e8e:	7bfb      	ldrb	r3, [r7, #15]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d110      	bne.n	8001eb6 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ea2:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	699a      	ldr	r2, [r3, #24]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	22ff      	movs	r2, #255	; 0xff
 8001ebc:	625a      	str	r2, [r3, #36]	; 0x24
 8001ebe:	e001      	b.n	8001ec4 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8001ec4:	7bfb      	ldrb	r3, [r7, #15]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d102      	bne.n	8001ed0 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8001ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001eda:	b590      	push	{r4, r7, lr}
 8001edc:	b087      	sub	sp, #28
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	60f8      	str	r0, [r7, #12]
 8001ee2:	60b9      	str	r1, [r7, #8]
 8001ee4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	7f1b      	ldrb	r3, [r3, #28]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d101      	bne.n	8001ef6 <HAL_RTC_SetTime+0x1c>
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	e087      	b.n	8002006 <HAL_RTC_SetTime+0x12c>
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2202      	movs	r2, #2
 8001f00:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d126      	bne.n	8001f56 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d102      	bne.n	8001f1c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f000 f97b 	bl	800221c <RTC_ByteToBcd2>
 8001f26:	4603      	mov	r3, r0
 8001f28:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	785b      	ldrb	r3, [r3, #1]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f000 f974 	bl	800221c <RTC_ByteToBcd2>
 8001f34:	4603      	mov	r3, r0
 8001f36:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001f38:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	789b      	ldrb	r3, [r3, #2]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 f96c 	bl	800221c <RTC_ByteToBcd2>
 8001f44:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001f46:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	78db      	ldrb	r3, [r3, #3]
 8001f4e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001f50:	4313      	orrs	r3, r2
 8001f52:	617b      	str	r3, [r7, #20]
 8001f54:	e018      	b.n	8001f88 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d102      	bne.n	8001f6a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	2200      	movs	r2, #0
 8001f68:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	785b      	ldrb	r3, [r3, #1]
 8001f74:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001f76:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8001f78:	68ba      	ldr	r2, [r7, #8]
 8001f7a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8001f7c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	78db      	ldrb	r3, [r3, #3]
 8001f82:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001f84:	4313      	orrs	r3, r2
 8001f86:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	22ca      	movs	r2, #202	; 0xca
 8001f8e:	625a      	str	r2, [r3, #36]	; 0x24
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2253      	movs	r2, #83	; 0x53
 8001f96:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8001f98:	68f8      	ldr	r0, [r7, #12]
 8001f9a:	f000 f8e3 	bl	8002164 <RTC_EnterInitMode>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8001fa2:	7cfb      	ldrb	r3, [r7, #19]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d120      	bne.n	8001fea <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8001fb2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001fb6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689a      	ldr	r2, [r3, #8]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fc6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6899      	ldr	r1, [r3, #8]
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	68da      	ldr	r2, [r3, #12]
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f000 f8f6 	bl	80021d2 <RTC_ExitInitMode>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8001fea:	7cfb      	ldrb	r3, [r7, #19]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d102      	bne.n	8001ff6 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	22ff      	movs	r2, #255	; 0xff
 8001ffc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2200      	movs	r2, #0
 8002002:	771a      	strb	r2, [r3, #28]

  return status;
 8002004:	7cfb      	ldrb	r3, [r7, #19]
}
 8002006:	4618      	mov	r0, r3
 8002008:	371c      	adds	r7, #28
 800200a:	46bd      	mov	sp, r7
 800200c:	bd90      	pop	{r4, r7, pc}

0800200e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800200e:	b590      	push	{r4, r7, lr}
 8002010:	b087      	sub	sp, #28
 8002012:	af00      	add	r7, sp, #0
 8002014:	60f8      	str	r0, [r7, #12]
 8002016:	60b9      	str	r1, [r7, #8]
 8002018:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800201a:	2300      	movs	r3, #0
 800201c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	7f1b      	ldrb	r3, [r3, #28]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d101      	bne.n	800202a <HAL_RTC_SetDate+0x1c>
 8002026:	2302      	movs	r3, #2
 8002028:	e071      	b.n	800210e <HAL_RTC_SetDate+0x100>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2201      	movs	r2, #1
 800202e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2202      	movs	r2, #2
 8002034:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d10e      	bne.n	800205a <HAL_RTC_SetDate+0x4c>
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	785b      	ldrb	r3, [r3, #1]
 8002040:	f003 0310 	and.w	r3, r3, #16
 8002044:	2b00      	cmp	r3, #0
 8002046:	d008      	beq.n	800205a <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	785b      	ldrb	r3, [r3, #1]
 800204c:	f023 0310 	bic.w	r3, r3, #16
 8002050:	b2db      	uxtb	r3, r3
 8002052:	330a      	adds	r3, #10
 8002054:	b2da      	uxtb	r2, r3
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d11c      	bne.n	800209a <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	78db      	ldrb	r3, [r3, #3]
 8002064:	4618      	mov	r0, r3
 8002066:	f000 f8d9 	bl	800221c <RTC_ByteToBcd2>
 800206a:	4603      	mov	r3, r0
 800206c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	785b      	ldrb	r3, [r3, #1]
 8002072:	4618      	mov	r0, r3
 8002074:	f000 f8d2 	bl	800221c <RTC_ByteToBcd2>
 8002078:	4603      	mov	r3, r0
 800207a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800207c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	789b      	ldrb	r3, [r3, #2]
 8002082:	4618      	mov	r0, r3
 8002084:	f000 f8ca 	bl	800221c <RTC_ByteToBcd2>
 8002088:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800208a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002094:	4313      	orrs	r3, r2
 8002096:	617b      	str	r3, [r7, #20]
 8002098:	e00e      	b.n	80020b8 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	78db      	ldrb	r3, [r3, #3]
 800209e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	785b      	ldrb	r3, [r3, #1]
 80020a4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80020a6:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80020a8:	68ba      	ldr	r2, [r7, #8]
 80020aa:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80020ac:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80020b4:	4313      	orrs	r3, r2
 80020b6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	22ca      	movs	r2, #202	; 0xca
 80020be:	625a      	str	r2, [r3, #36]	; 0x24
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2253      	movs	r2, #83	; 0x53
 80020c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f000 f84b 	bl	8002164 <RTC_EnterInitMode>
 80020ce:	4603      	mov	r3, r0
 80020d0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80020d2:	7cfb      	ldrb	r3, [r7, #19]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d10c      	bne.n	80020f2 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80020e2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80020e6:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	f000 f872 	bl	80021d2 <RTC_ExitInitMode>
 80020ee:	4603      	mov	r3, r0
 80020f0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80020f2:	7cfb      	ldrb	r3, [r7, #19]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d102      	bne.n	80020fe <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2201      	movs	r2, #1
 80020fc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	22ff      	movs	r2, #255	; 0xff
 8002104:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	771a      	strb	r2, [r3, #28]

  return status;
 800210c:	7cfb      	ldrb	r3, [r7, #19]
}
 800210e:	4618      	mov	r0, r3
 8002110:	371c      	adds	r7, #28
 8002112:	46bd      	mov	sp, r7
 8002114:	bd90      	pop	{r4, r7, pc}
	...

08002118 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002120:	2300      	movs	r3, #0
 8002122:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a0d      	ldr	r2, [pc, #52]	; (8002160 <HAL_RTC_WaitForSynchro+0x48>)
 800212a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800212c:	f7fe fa16 	bl	800055c <HAL_GetTick>
 8002130:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002132:	e009      	b.n	8002148 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002134:	f7fe fa12 	bl	800055c <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002142:	d901      	bls.n	8002148 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e007      	b.n	8002158 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	f003 0320 	and.w	r3, r3, #32
 8002152:	2b00      	cmp	r3, #0
 8002154:	d0ee      	beq.n	8002134 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	00017f5f 	.word	0x00017f5f

08002164 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800216c:	2300      	movs	r3, #0
 800216e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002170:	2300      	movs	r3, #0
 8002172:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800217e:	2b00      	cmp	r3, #0
 8002180:	d122      	bne.n	80021c8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68da      	ldr	r2, [r3, #12]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002190:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002192:	f7fe f9e3 	bl	800055c <HAL_GetTick>
 8002196:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002198:	e00c      	b.n	80021b4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800219a:	f7fe f9df 	bl	800055c <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021a8:	d904      	bls.n	80021b4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2204      	movs	r2, #4
 80021ae:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d102      	bne.n	80021c8 <RTC_EnterInitMode+0x64>
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d1e8      	bne.n	800219a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b084      	sub	sp, #16
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021da:	2300      	movs	r3, #0
 80021dc:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68da      	ldr	r2, [r3, #12]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021ec:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f003 0320 	and.w	r3, r3, #32
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d10a      	bne.n	8002212 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f7ff ff8b 	bl	8002118 <HAL_RTC_WaitForSynchro>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d004      	beq.n	8002212 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2204      	movs	r2, #4
 800220c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002212:	7bfb      	ldrb	r3, [r7, #15]
}
 8002214:	4618      	mov	r0, r3
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002226:	2300      	movs	r3, #0
 8002228:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800222a:	e005      	b.n	8002238 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	3301      	adds	r3, #1
 8002230:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8002232:	79fb      	ldrb	r3, [r7, #7]
 8002234:	3b0a      	subs	r3, #10
 8002236:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8002238:	79fb      	ldrb	r3, [r7, #7]
 800223a:	2b09      	cmp	r3, #9
 800223c:	d8f6      	bhi.n	800222c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	b2db      	uxtb	r3, r3
 8002242:	011b      	lsls	r3, r3, #4
 8002244:	b2da      	uxtb	r2, r3
 8002246:	79fb      	ldrb	r3, [r7, #7]
 8002248:	4313      	orrs	r3, r2
 800224a:	b2db      	uxtb	r3, r3
}
 800224c:	4618      	mov	r0, r3
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <memset>:
 8002258:	4402      	add	r2, r0
 800225a:	4603      	mov	r3, r0
 800225c:	4293      	cmp	r3, r2
 800225e:	d100      	bne.n	8002262 <memset+0xa>
 8002260:	4770      	bx	lr
 8002262:	f803 1b01 	strb.w	r1, [r3], #1
 8002266:	e7f9      	b.n	800225c <memset+0x4>

08002268 <__libc_init_array>:
 8002268:	b570      	push	{r4, r5, r6, lr}
 800226a:	4d0d      	ldr	r5, [pc, #52]	; (80022a0 <__libc_init_array+0x38>)
 800226c:	4c0d      	ldr	r4, [pc, #52]	; (80022a4 <__libc_init_array+0x3c>)
 800226e:	1b64      	subs	r4, r4, r5
 8002270:	10a4      	asrs	r4, r4, #2
 8002272:	2600      	movs	r6, #0
 8002274:	42a6      	cmp	r6, r4
 8002276:	d109      	bne.n	800228c <__libc_init_array+0x24>
 8002278:	4d0b      	ldr	r5, [pc, #44]	; (80022a8 <__libc_init_array+0x40>)
 800227a:	4c0c      	ldr	r4, [pc, #48]	; (80022ac <__libc_init_array+0x44>)
 800227c:	f000 f818 	bl	80022b0 <_init>
 8002280:	1b64      	subs	r4, r4, r5
 8002282:	10a4      	asrs	r4, r4, #2
 8002284:	2600      	movs	r6, #0
 8002286:	42a6      	cmp	r6, r4
 8002288:	d105      	bne.n	8002296 <__libc_init_array+0x2e>
 800228a:	bd70      	pop	{r4, r5, r6, pc}
 800228c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002290:	4798      	blx	r3
 8002292:	3601      	adds	r6, #1
 8002294:	e7ee      	b.n	8002274 <__libc_init_array+0xc>
 8002296:	f855 3b04 	ldr.w	r3, [r5], #4
 800229a:	4798      	blx	r3
 800229c:	3601      	adds	r6, #1
 800229e:	e7f2      	b.n	8002286 <__libc_init_array+0x1e>
 80022a0:	080022f8 	.word	0x080022f8
 80022a4:	080022f8 	.word	0x080022f8
 80022a8:	080022f8 	.word	0x080022f8
 80022ac:	080022fc 	.word	0x080022fc

080022b0 <_init>:
 80022b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022b2:	bf00      	nop
 80022b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022b6:	bc08      	pop	{r3}
 80022b8:	469e      	mov	lr, r3
 80022ba:	4770      	bx	lr

080022bc <_fini>:
 80022bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022be:	bf00      	nop
 80022c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022c2:	bc08      	pop	{r3}
 80022c4:	469e      	mov	lr, r3
 80022c6:	4770      	bx	lr
